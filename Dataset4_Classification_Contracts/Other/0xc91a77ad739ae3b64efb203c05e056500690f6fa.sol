{"IDividendTracker.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IDividendTracker {\n    function LP_Token() external view returns (address);\n\n    function accumulativeDividendOf(address _owner)\n        external\n        view\n        returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function decimals() external view returns (uint8);\n\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        external\n        returns (bool);\n\n    function distributeLPDividends(uint256 amount) external;\n\n    function dividendOf(address _owner) external view returns (uint256);\n\n    function excludeFromDividends(address account, bool value) external;\n\n    function excludedFromDividends(address) external view returns (bool);\n\n    function getAccount(address account)\n        external\n        view\n        returns (\n            address,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function increaseAllowance(address spender, uint256 addedValue)\n        external\n        returns (bool);\n\n    function init() external;\n\n    function lastClaimTimes(address) external view returns (uint256);\n\n    function name() external view returns (string memory);\n\n    function owner() external view returns (address);\n\n    function processAccount(address account) external returns (bool);\n\n    function renounceOwnership() external;\n\n    function setBalance(address account, uint256 newBalance) external;\n\n    function totalDividendsDistributed() external view returns (uint256);\n\n    function totalDividendsWithdrawn() external view returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n\n    function trackerRescueETH20Tokens(address recipient, address tokenAddress)\n        external;\n\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    function transferOwnership(address newOwner) external;\n\n    function updateLP_Token(address _lpToken) external;\n\n    function withdrawDividend() external;\n\n    function withdrawableDividendOf(address _owner)\n        external\n        view\n        returns (uint256);\n\n    function withdrawnDividendOf(address _owner)\n        external\n        view\n        returns (uint256);\n}"},"LiquidityBest.sol":{"content":"// SPDX-License-Identifier: MIT\n\n/*\n * LiquidityBest, buy and hold, earn liquidity rewards.\n * Website: https://liquidity.best/\n * Docs: https://docs.liquidity.best/\n * Twitter: https://twitter.com/Liquidity_best\n * Telegram: https://t.me/Liquidity_Best\n*/\n\npragma solidity ^0.8.0;\n\nimport \"./IDividendTracker.sol\";\n\ninterface IStaking {\n    function updateReward(uint256 _amount) external;\n\n    function init(address _rewardToken, address _stakingToken) external;\n}\n\ninterface IPair {\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function token0() external view returns (address);\n}\n\ninterface IFactory {\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n\n    function getPair(address tokenA, address tokenB)\n        external\n        view\n        returns (address pair);\n}\n\ninterface IUniswapRouter {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\u0027t required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address =\u003e uint256) private _balances;\n\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it\u0027s overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(\n            currentAllowance \u003e= subtractedValue,\n            \"ERC20: decreased allowance below zero\"\n        );\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(\n            fromBalance \u003e= amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount \u003c= accountBalance \u003c= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(\n                currentAllowance \u003e= amount,\n                \"ERC20: insufficient allowance\"\n            );\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\ncontract LiquidityBest is ERC20, Ownable {\n    IUniswapRouter public router;\n    address public pair;\n\n    bool private swapping;\n    bool public claimEnabled;\n    bool public tradingEnabled;\n\n    IDividendTracker public dividendTracker;\n\n    address public marketingWallet;\n    IStaking public stakingPool;\n\n    uint256 public swapTokensAtAmount;\n    uint256 public maxBuyAmount;\n    uint256 public maxSellAmount;\n    uint256 public maxWallet;\n\n    struct Taxes {\n        uint256 liquidity;\n        uint256 dev;\n        uint256 stakingPool;\n    }\n\n    Taxes public taxes = Taxes(3, 2, 1);\n\n    uint256 public tax = 6;\n\n    uint256 private _initialTax = 20;\n    uint256 private _reduceTaxAt = 25;\n    uint256 private _buyCount = 0;\n    uint256 private _sellCount = 0;\n\n    mapping(address =\u003e bool) private _isExcludedFromFees;\n    mapping(address =\u003e bool) public automatedMarketMakerPairs;\n    mapping(address =\u003e bool) private _isExcludedFromMaxWallet;\n\n    event ExcludeFromFees(address indexed account, bool isExcluded);\n    event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\n    event GasForProcessingUpdated(\n        uint256 indexed newValue,\n        uint256 indexed oldValue\n    );\n    event SendDividends(uint256 tokensSwapped, uint256 amount);\n\n    constructor(address _dividendTracker, address _stakingPool)\n        ERC20(\"liquidity.best\", \"LIB\")\n    {\n        marketingWallet = _msgSender();\n\n        IUniswapRouter _router = IUniswapRouter(\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n        );\n        address _pair = IFactory(_router.factory()).createPair(\n            address(this),\n            _router.WETH()\n        );\n\n        router = _router;\n        pair = _pair;\n\n        dividendTracker = IDividendTracker(_dividendTracker);\n        dividendTracker.init();\n\n        stakingPool = IStaking(_stakingPool);\n        stakingPool.init(address(this), _pair);\n\n        setSwapTokensAtAmount(300000);\n        updateMaxWalletAmount(2000000);\n        setMaxBuyAndSell(2000000, 2000000);\n\n        _setAutomatedMarketMakerPair(_pair, true);\n\n        dividendTracker.updateLP_Token(pair);\n\n        dividendTracker.excludeFromDividends(address(dividendTracker), true);\n        dividendTracker.excludeFromDividends(_stakingPool, true);\n        dividendTracker.excludeFromDividends(address(this), true);\n        dividendTracker.excludeFromDividends(owner(), true);\n        dividendTracker.excludeFromDividends(address(0xdead), true);\n        dividendTracker.excludeFromDividends(address(_router), true);\n\n        setExcludeFromMaxWallet(address(_pair), true);\n        setExcludeFromMaxWallet(address(this), true);\n        setExcludeFromMaxWallet(address(_router), true);\n        setExcludeFromMaxWallet(_stakingPool, true);\n\n        setExcludeFromFees(owner(), true);\n        setExcludeFromFees(address(this), true);\n        setExcludeFromFees(_stakingPool, true);\n\n        _mint(owner(), 100000000 * (10**18));\n    }\n\n    receive() external payable {}\n\n    function claim() external {\n        require(claimEnabled, \"Claim not enabled\");\n        dividendTracker.processAccount(payable(msg.sender));\n    }\n\n    function updateMaxWalletAmount(uint256 newNum) public onlyOwner {\n        require(newNum \u003e= 1000000, \"Cannot set maxWallet lower than 1%\");\n        maxWallet = newNum * 10**18;\n    }\n\n    function setMaxBuyAndSell(uint256 maxBuy, uint256 maxSell)\n        public\n        onlyOwner\n    {\n        require(maxBuy \u003e= 1000000, \"Can\u0027t set maxbuy lower than 1% \");\n        require(maxSell \u003e= 500000, \"Can\u0027t set maxsell lower than 0.5% \");\n        maxBuyAmount = maxBuy * 10**18;\n        maxSellAmount = maxSell * 10**18;\n    }\n\n    function setSwapTokensAtAmount(uint256 amount) public onlyOwner {\n        swapTokensAtAmount = amount * 10**18;\n    }\n\n    function setExcludeFromMaxWallet(address account, bool excluded)\n        public\n        onlyOwner\n    {\n        _isExcludedFromMaxWallet[account] = excluded;\n    }\n\n    function setExcludeFromFees(address account, bool excluded)\n        public\n        onlyOwner\n    {\n        require(\n            _isExcludedFromFees[account] != excluded,\n            \"Account is already the value of \u0027excluded\u0027\"\n        );\n        _isExcludedFromFees[account] = excluded;\n\n        emit ExcludeFromFees(account, excluded);\n    }\n\n    function excludeFromDividends(address account, bool value)\n        public\n        onlyOwner\n    {\n        dividendTracker.excludeFromDividends(account, value);\n    }\n\n    function enableTrading() external onlyOwner {\n        require(!tradingEnabled, \"Already enabled\");\n        tradingEnabled = true;\n    }\n\n    function setClaimStatus(bool _status) external onlyOwner {\n        claimEnabled = _status;\n    }\n\n    function _setAutomatedMarketMakerPair(address newPair, bool value) private {\n        require(\n            automatedMarketMakerPairs[newPair] != value,\n            \"Automated market maker pair is already set to that value\"\n        );\n        automatedMarketMakerPairs[newPair] = value;\n\n        if (value) {\n            dividendTracker.excludeFromDividends(newPair, true);\n        }\n\n        emit SetAutomatedMarketMakerPair(newPair, value);\n    }\n\n    function getTotalDividendsDistributed() external view returns (uint256) {\n        return dividendTracker.totalDividendsDistributed();\n    }\n\n    function isExcludedFromFees(address account) public view returns (bool) {\n        return _isExcludedFromFees[account];\n    }\n\n    function withdrawableDividendOf(address account)\n        public\n        view\n        returns (uint256)\n    {\n        return dividendTracker.withdrawableDividendOf(account);\n    }\n\n    function dividendTokenBalanceOf(address account)\n        public\n        view\n        returns (uint256)\n    {\n        return dividendTracker.balanceOf(account);\n    }\n\n    function getAccountInfo(address account)\n        external\n        view\n        returns (\n            address,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        return dividendTracker.getAccount(account);\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        if (\n            !_isExcludedFromFees[from] \u0026\u0026 !_isExcludedFromFees[to] \u0026\u0026 !swapping\n        ) {\n            require(tradingEnabled, \"Trading not active\");\n            if (automatedMarketMakerPairs[to]) {\n                require(\n                    amount \u003c= maxSellAmount,\n                    \"You are exceeding maxSellAmount\"\n                );\n                _sellCount++;\n            } else if (automatedMarketMakerPairs[from]) {\n                require(\n                    amount \u003c= maxBuyAmount,\n                    \"You are exceeding maxBuyAmount\"\n                );\n                _buyCount++;\n            }\n            if (!_isExcludedFromMaxWallet[to]) {\n                require(\n                    amount + balanceOf(to) \u003c= maxWallet,\n                    \"Unable to exceed Max Wallet\"\n                );\n            }\n        }\n\n        if (amount == 0) {\n            super._transfer(from, to, 0);\n            return;\n        }\n\n        uint256 contractTokenBalance = balanceOf(address(this));\n        bool canSwap = contractTokenBalance \u003e= swapTokensAtAmount;\n\n        if (\n            canSwap \u0026\u0026\n            !swapping \u0026\u0026\n            automatedMarketMakerPairs[to] \u0026\u0026\n            !_isExcludedFromFees[from] \u0026\u0026\n            !_isExcludedFromFees[to]\n        ) {\n            swapping = true;\n\n            swapAndLiquify(swapTokensAtAmount);\n\n            swapping = false;\n        }\n\n        bool takeFee = !swapping;\n\n        // if any account belongs to _isExcludedFromFee account then remove the fee\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\n            takeFee = false;\n        }\n\n        if (!automatedMarketMakerPairs[to] \u0026\u0026 !automatedMarketMakerPairs[from])\n            takeFee = false;\n\n        if (takeFee) {\n            uint256 feeAmt;\n            if (automatedMarketMakerPairs[to]) {\n                feeAmt =\n                    (amount * (_sellCount \u003e _reduceTaxAt ? tax : _initialTax)) /\n                    100;\n            } else if (automatedMarketMakerPairs[from]) {\n                feeAmt =\n                    (amount * (_buyCount \u003e _reduceTaxAt ? tax : _initialTax)) /\n                    100;\n            }\n\n            amount = amount - feeAmt;\n            super._transfer(from, address(this), feeAmt);\n        }\n        super._transfer(from, to, amount);\n\n        try dividendTracker.setBalance(from, balanceOf(from)) {} catch {}\n        try dividendTracker.setBalance(to, balanceOf(to)) {} catch {}\n    }\n\n    function swapAndLiquify(uint256 tokens) private {\n        uint256 toSwapForLiq = ((tokens * taxes.liquidity) / tax) / 2;\n        uint256 tokensToAddLiquidityWith = ((tokens * taxes.liquidity) / tax) / 2;\n        uint256 toSwapForDev = (tokens * taxes.dev) / tax;\n        uint256 toStakingPool = (tokens * taxes.stakingPool) / tax;\n\n        super._transfer(address(this), address(stakingPool), toStakingPool);\n        try stakingPool.updateReward(toStakingPool) {} catch {}\n\n        swapTokensForETH(toSwapForLiq);\n\n        uint256 currentbalance = address(this).balance;\n\n        if (currentbalance \u003e 0) {\n            // Add liquidity to uni\n            addLiquidity(tokensToAddLiquidityWith, currentbalance);\n        }\n\n        swapTokensForETH(toSwapForDev);\n\n        uint256 EthTaxBalance = address(this).balance;\n\n        // Send ETH to dev\n        uint256 devAmt = EthTaxBalance;\n\n        if (devAmt \u003e 0) {\n            (bool success, ) = payable(marketingWallet).call{value: devAmt}(\"\");\n            require(success, \"Failed to send ETH to dev wallet\");\n        }\n\n        uint256 lpBalance = IERC20(pair).balanceOf(address(this));\n\n        //Send LP to dividends\n        uint256 dividends = lpBalance;\n\n        if (dividends \u003e 0) {\n            bool success = IERC20(pair).transfer(\n                address(dividendTracker),\n                dividends\n            );\n            if (success) {\n                dividendTracker.distributeLPDividends(dividends);\n                emit SendDividends(tokens, dividends);\n            }\n        }\n    }\n\n    function distributionLiquidity(uint256 amount) public onlyOwner {\n        bool success = IERC20(pair).transferFrom(\n            msg.sender,\n            address(dividendTracker),\n            amount\n        );\n        if (success) {\n            dividendTracker.distributeLPDividends(amount);\n        }\n    }\n\n    function trackerRescueETH20Tokens(address tokenAddress) external onlyOwner {\n        dividendTracker.trackerRescueETH20Tokens(msg.sender, tokenAddress);\n    }\n\n    function swapTokensForETH(uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = router.WETH();\n\n        _approve(address(this), address(router), tokenAmount);\n        // make the swap\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(router), tokenAmount);\n\n        // add the liquidity\n        router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            address(this),\n            block.timestamp\n        );\n    }\n}"}}