{"AdderallTokenTest.sol":{"content":"// SPDX-License-Identifier: MIT\n\n/**\n\nAttention Deficit Hyperactivity Disorder\n$ADDERALL\n\n                      ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒                    \n              ▒▒▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒            \n          ▒▒▒▒░░░░░░                      ░░░░░░▒▒▒▒▒▒        \n        ▒▒░░░░                                ░░░░░░▒▒▒▒      \n      ▒▒░░                                ░░░░▒▒▒▒██░░▒▒▒▒    \n    ▒▒░░                              ░░░░▒▒▒▒██░░░░  ░░▒▒▒▒  \n  ▒▒░░                            ░░░░▒▒▒▒██░░░░        ░░▒▒  \n  ▒▒░░                        ░░░░▒▒▒▒██░░░░              ░░██\n▒▒░░                      ░░░░▒▒▒▒██░░░░                  ░░██\n▒▒░░                  ░░░░▒▒▒▒██░░░░                      ░░██\n▒▒░░              ░░░░▒▒▒▒██░░░░                          ░░██\n▒▒▒▒░░        ░░░░▒▒▒▒██░░░░                            ░░░░██\n▒▒░░▒▒░░  ░░░░▒▒▒▒██░░░░                              ░░░░▒▒██\n▒▒░░░░▒▒▒▒▒▒▒▒██░░░░                                ░░░░▒▒▒▒██\n▒▒░░  ░░▒▒██░░░░                                ░░░░░░▒▒░░▒▒██\n▒▒░░░░  ▒▒▒▒▒▒░░░░░░░░░░                ░░░░░░░░░░▒▒▒▒░░▒▒▒▒██\n▒▒░░    ░░▒▒  ░░▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒▒▒░░▒▒░░▒▒██\n  ▒▒░░      ░░  ░░  ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░▒▒  ░░░░░░▒▒▒▒██\n  ██▒▒                ░░  ░░  ░░░░▒▒░░▒▒░░░░  ░░░░░░░░▒▒░░██  \n    ██░░  ░░    ░░  ░░        ░░  ░░  ░░  ░░░░░░  ░░░░░░▒▒██  \n      ██░░▒▒░░        ░░  ░░    ░░  ░░  ░░░░  ░░░░░░░░▒▒██    \n        ██▒▒░░░░  ░░          ░░  ░░  ░░  ░░░░░░░░▒▒▒▒██      \n        ░░████░░░░░░░░░░  ░░    ░░  ░░  ░░░░░░▒▒▒▒████        \n            ▒▒████████░░░░░░░░░░░░░░░░░░░░████████            \n              ░░▓▓  ▓▓████████████████████  ▓▓░░              \n\n\nWebsite : https://www.adderall.biz/\nTelegram : https://t.me/adderallportal\nTwitter : https://twitter.com/adderallETH\n\nCreated with love, by @FDASHO on telegram.\n\n*/\n\npragma solidity ^0.8.0;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n}\n\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n}\n\ninterface IUniswapV2Factory {\n    function createPair(\n        address tokenA,\n        address tokenB\n    ) external returns (address pair);\n}\n\ninterface IUniswapV2Router02 {\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    )\n        external\n        payable\n        returns (uint amountToken, uint amountETH, uint liquidity);\n}\n\ncontract AdderallToken is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n    mapping(address =\u003e uint256) private _balances;\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n    mapping(address =\u003e bool) private _isExcludedFromFee;\n    address payable private _taxWallet; // Marketing Wallet\n    address private _stakingCA; // STAKING CA\n\n    uint256 firstBlock;\n\n    uint256 private _initialBuyTax = 20;\n    uint256 private _initialSellTax = 20;\n    uint256 private _finalBuyTax = 2;\n    uint256 private _finalSellTax = 2;\n    uint256 private _reduceBuyTaxAt = 25;\n    uint256 private _reduceSellTaxAt = 25;\n    uint256 private _preventSwapBefore = 30;\n    uint256 private _buyCount = 0;\n\n    uint8 private constant _decimals = 18;\n    uint256 private constant _tTotal = 1000000000000 * 10 ** _decimals;\n    string private constant _name =\n        unicode\"Attention Deficit Hyperactivity Disorder\";\n    string private constant _symbol = unicode\"ADDERALL\";\n    uint256 public _maxTxAmount = 10000000000 * 10 ** _decimals;\n    uint256 public _maxWalletSize = 10000000000 * 10 ** _decimals;\n    uint256 public _taxSwapThreshold = 10000000000 * 10 ** _decimals;\n    uint256 public _maxTaxSwap = 10000000000 * 10 ** _decimals;\n\n    IUniswapV2Router02 private uniswapV2Router;\n    address private uniswapV2Pair;\n    bool private tradingOpen;\n    bool private inSwap = false;\n    bool private swapEnabled = false;\n\n    event MaxTxAmountUpdated(uint _maxTxAmount);\n    event ClearStuck(uint256 amount);\n    event ClearToken(address TokenAddressCleared, uint256 Amount);\n\n    modifier lockTheSwap() {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n\n    constructor() {\n        _taxWallet = payable(_msgSender());\n        _balances[_msgSender()] = _tTotal - (_maxWalletSize * 5);\n        _balances[address(this)] = (_maxWalletSize * 5);\n        _isExcludedFromFee[owner()] = true;\n        _isExcludedFromFee[address(this)] = true;\n        _isExcludedFromFee[_taxWallet] = true;\n\n        emit Transfer(address(0), _msgSender(), _tTotal - (_maxWalletSize * 5));\n    }\n\n    function name() public pure returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public pure override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(\n        address owner,\n        address spender\n    ) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(\n        address spender,\n        uint256 amount\n    ) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()].sub(\n                amount,\n                \"ERC20: transfer amount exceeds allowance\"\n            )\n        );\n        return true;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(address from, address to, uint256 amount) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount \u003e 0, \"Transfer amount must be greater than zero\");\n\n        // Check for maxTxAmount and maxWalletSize\n        if (from == uniswapV2Pair \u0026\u0026 !_isExcludedFromFee[to]) {\n            require(amount \u003c= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\n            require(\n                balanceOf(to) + amount \u003c= _maxWalletSize,\n                \"Exceeds the maxWalletSize.\"\n            );\n\n            if (firstBlock + 3 \u003e block.number) {\n                require(!isContract(to));\n            }\n            _buyCount++;\n        } else if (to != uniswapV2Pair \u0026\u0026 !_isExcludedFromFee[to]) {\n            require(\n                balanceOf(to) + amount \u003c= _maxWalletSize,\n                \"Exceeds the maxWalletSize.\"\n            );\n        }\n\n        uint256 taxAmount = 0;\n\n        // Allocating tax for marketing and staking based on buyCount\n        uint256 stakingTax = 0;\n        uint256 marketingTax = 0;\n\n        if ((from != owner() \u0026\u0026 to != owner()) || to == _stakingCA) {\n            if (\n                from == uniswapV2Pair \u0026\u0026\n                to != address(uniswapV2Router) \u0026\u0026\n                !_isExcludedFromFee[to]\n            ) {\n                taxAmount = amount\n                    .mul(\n                        (_buyCount \u003e _reduceBuyTaxAt)\n                            ? _finalBuyTax\n                            : _initialBuyTax\n                    )\n                    .div(100);\n                    \n            } else if (to == uniswapV2Pair \u0026\u0026 from != address(this)) {\n                taxAmount = amount\n                    .mul(\n                        (_buyCount \u003e _reduceSellTaxAt)\n                            ? _finalSellTax\n                            : _initialSellTax\n                    )\n                    .div(100);\n            }\n\n\n            if (_buyCount \u003e _reduceBuyTaxAt \u0026\u0026 _buyCount \u003e _reduceSellTaxAt) {\n                stakingTax = taxAmount / 2;\n            }\n            \n            marketingTax = taxAmount.sub(stakingTax);\n\n            uint256 contractTokenBalance = balanceOf(address(this));\n            \n            if (!inSwap \u0026\u0026 to == uniswapV2Pair \u0026\u0026 swapEnabled \u0026\u0026 contractTokenBalance\u003e_taxSwapThreshold \u0026\u0026 _buyCount\u003e_preventSwapBefore) {\n                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));\n                uint256 contractETHBalance = address(this).balance;\n                if(contractETHBalance \u003e 0) {\n                    sendETHToFee(address(this).balance);\n                }\n            }\n        }\n\n        if (stakingTax \u003e 0) {\n            _balances[_stakingCA] = _balances[_stakingCA].add(stakingTax);\n            emit Transfer(from, _stakingCA, stakingTax);\n        }\n\n        if (marketingTax \u003e 0) {\n            _balances[address(this)] = _balances[address(this)].add(marketingTax);\n            emit Transfer(from, address(this), marketingTax);\n        }\n\n        _balances[from] = _balances[from].sub(amount);\n\n        _balances[to] = _balances[to].add(\n            amount.sub(taxAmount)\n        );\n\n        emit Transfer(from, to, amount.sub(taxAmount));\n    }\n\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\n        return (a \u003e b) ? b : a;\n    }\n\n    function isContract(address account) private view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size \u003e 0;\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function removeLimits() external onlyOwner {\n        _maxTxAmount = _tTotal;\n        _maxWalletSize = _tTotal;\n        emit MaxTxAmountUpdated(_tTotal);\n    }\n\n    function setStakingCA(address stakingAddress) external onlyOwner {\n        require(stakingAddress != address(0), \"Invalid address provided\");\n        \n        _stakingCA = stakingAddress;\n        \n        // Excluding staking contract from fees\n        _isExcludedFromFee[_stakingCA] = true;\n\n        // Transferring all available tokens from this contract to the staking contract\n        uint256 availableTokens = _balances[address(this)];\n        _balances[address(this)] = _balances[address(this)].sub(availableTokens);\n        _balances[_stakingCA] = _balances[_stakingCA].add(availableTokens);\n\n        emit Transfer(address(this), _stakingCA, availableTokens);\n    }\n    \n    function sendETHToFee(uint256 amount) private {\n        uint256 taxWalletShare = amount;\n        _taxWallet.transfer(taxWalletShare);\n    }\n\n    function clearStuckToken(\n        address tokenAddress,\n        uint256 tokens\n    ) external returns (bool success) {\n        if (tokens == 0) {\n            tokens = IERC20(tokenAddress).balanceOf(address(this));\n        }\n        emit ClearToken(tokenAddress, tokens);\n        return IERC20(tokenAddress).transfer(_taxWallet, tokens);\n    }\n\n    function manualSend() external {\n        require(\n            address(this).balance \u003e 0,\n            \"Contract balance must be greater than zero\"\n        );\n\n        uint256 balance = address(this).balance; // Check\n        payable(_taxWallet).transfer(balance); // Effects + Interaction\n    }\n\n    function manualSwap() external {\n        uint256 tokenBalance = balanceOf(address(this));\n        if (tokenBalance \u003e 0) {\n            swapTokensForEth(tokenBalance);\n        }\n        uint256 ethBalance = address(this).balance;\n        if (ethBalance \u003e 0) {\n            sendETHToFee(ethBalance);\n        }\n    }\n\n    function openTrading() external onlyOwner {\n        require(!tradingOpen, \"trading is already open\");\n        uniswapV2Router = IUniswapV2Router02(\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n        );\n        _approve(address(this), address(uniswapV2Router), _tTotal);\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\n            address(this),\n            uniswapV2Router.WETH()\n        );\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\n            address(this),\n            balanceOf(address(this)),\n            0,\n            0,\n            owner(),\n            block.timestamp\n        );\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\n        swapEnabled = true;\n        tradingOpen = true;\n        firstBlock = block.number;\n    }\n\n    receive() external payable {}\n}\n"},"balanceOfAdderallStakingTest.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AdderallTokenTest.sol\";\n\ncontract AdderallStaking {\n    AdderallToken public adderallToken;\n\n    address public owner;\n    uint256 public k = 1000; // represents 1/10th or 10%\n    uint256 constant DAY_IN_SECONDS = 86400; // 24 hours * 60 minutes * 60 seconds\n    uint256 public totalStaked;\n    uint256 public lockupPeriod = 0 seconds;\n    uint256 public rewardPerTokenStored = 0; \n    uint256 public lastUpdateTime;\n\n\n    struct StakerInfo {\n        uint256 stakedAmount;\n        uint256 lastUpdated;\n        uint256 reward;\n        uint256 lastTotalRewardsPoolAtUpdate;\n        uint256 lockupEndTime;\n    }\n\n    mapping(address =\u003e StakerInfo) public stakers;\n\n    event Staked(address indexed user, uint256 amount);\n    event Unstaked(address indexed user, uint256 amount);\n    event RewardClaimed(address indexed user, uint256 reward);\n    event DecayFactorUpdated(uint256 newK);\n    event LockupPeriodUpdated(uint256 newLockupPeriod);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner can call this function\");\n        _;\n    }\n\n    constructor(address payable _adderallToken) {\n        adderallToken = AdderallToken(_adderallToken);\n        owner = msg.sender;\n    }\n\n    function setDecayFactor(uint256 newK) external onlyOwner {\n        require(newK \u003c= 10000, \"Decay factor should be between 0 and 10000\");\n        k = newK;\n        emit DecayFactorUpdated(newK);\n    }\n\n    function setLockupPeriod(uint256 _newLockupPeriod) external onlyOwner {\n        lockupPeriod = _newLockupPeriod;\n        emit LockupPeriodUpdated(_newLockupPeriod);\n    }\n\n    function getCurrentRewardRate() public view returns (uint256) {\n        return (adderallToken.balanceOf(address(this)) * k) / (10000 * DAY_IN_SECONDS);\n    }\n\n    function totalRewardBalance() external view returns (uint256) {\n        return adderallToken.balanceOf(address(this)) - totalStaked;\n    }\n\n    function rewardPerToken() public view returns (uint256) {\n        if (totalStaked == 0) {\n            return rewardPerTokenStored;\n        }\n        return\n            rewardPerTokenStored +\n            (((block.timestamp - lastUpdateTime) *\n                getCurrentRewardRate() *\n                1e18) / totalStaked);\n    }\n\n    function stakeTokens(uint256 _amount) public {\n        StakerInfo storage staker = stakers[msg.sender];\n\n        require(\n            adderallToken.transferFrom(msg.sender, address(this), _amount),\n            \"Transfer failed\"\n        );\n\n        updateReward(msg.sender);\n\n        staker.stakedAmount += _amount;\n        staker.lockupEndTime = block.timestamp + lockupPeriod;\n        totalStaked += _amount;\n\n        emit Staked(msg.sender, _amount);\n    }\n\n    function unstakeTokens(uint256 _amount) public {\n        StakerInfo storage staker = stakers[msg.sender];\n\n        updateReward(msg.sender);\n\n        require(\n            block.timestamp \u003e= staker.lockupEndTime,\n            \"Tokens are still locked up\"\n        );\n        require(\n            staker.stakedAmount \u003e= _amount,\n            \"Amount greater than staked balance\"\n        );\n\n        staker.stakedAmount -= _amount;\n        totalStaked -= _amount;\n\n        require(adderallToken.transfer(msg.sender, _amount), \"Transfer failed\");\n        emit Unstaked(msg.sender, _amount);\n    }\n\n    function claimReward() public {\n        updateReward(msg.sender);\n\n        uint256 reward = stakers[msg.sender].reward;\n        require(\n            adderallToken.balanceOf(address(this)) \u003e= reward,\n            \"Not enough tokens in the contract to claim\"\n        );\n\n        stakers[msg.sender].reward = 0;\n\n        require(adderallToken.transfer(msg.sender, reward), \"Transfer failed\");\n        emit RewardClaimed(msg.sender, reward);\n    }\n\n    function updateReward(address _user) internal {\n        uint256 currentRewardPerToken = rewardPerToken();\n        StakerInfo storage staker = stakers[_user];\n\n        staker.reward +=\n            (staker.stakedAmount *\n                (currentRewardPerToken - staker.lastTotalRewardsPoolAtUpdate)) /\n            1e18;\n        staker.lastTotalRewardsPoolAtUpdate = currentRewardPerToken;\n        staker.lastUpdated = block.timestamp;\n\n        rewardPerTokenStored = currentRewardPerToken; \n        lastUpdateTime = block.timestamp;\n    }\n\n    fallback() external {\n        revert(\"ETH not accepted\");\n    }\n}\n"}}