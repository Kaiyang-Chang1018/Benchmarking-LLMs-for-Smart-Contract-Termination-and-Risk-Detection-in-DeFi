{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\u0027t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length \u003e 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}"},"AFiBase.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport {IAFiStorage} from \"./IAFiStorage.sol\";\nimport {OwnableDelayModule} from \"./OwnableDelayModule.sol\";\nimport {ReentrancyGuard} from \"./ReentrancyGuard.sol\";\nimport {SafeERC20} from \"./SafeERC20.sol\";\nimport {SafeCast} from \"./SafeCast.sol\";\nimport {ILendingPool} from \"./ILendingPool.sol\";\nimport {IPoolAddressesProvider} from \"./ILendingPoolAddressesProvider.sol\";\nimport {ISwapRouter} from \"./ISwapRouter.sol\";\nimport {IUniswapOracleV3} from \"./IUniswapV3.sol\";\nimport \"./IAFi.sol\";\nimport \"./IPassiveRebal.sol\";\nimport \"./ArrayUtils.sol\";\nimport \"./IUniswapV3Factory.sol\";\nimport {ERC20} from \"./ERC20.sol\";\n\ninterface Compound {\n  function mint(uint mintAmount) external returns (uint);\n\n  function redeem(uint redeemTokens) external returns (uint);\n\n  function redeemUnderlying(uint redeemAmount) external returns (uint);\n\n  function exchangeRateStored() external view returns (uint);\n}\n\ninterface CompoundV3 {\n  function supply(address asset, uint amount) external;\n\n  function withdraw(address asset, uint amount) external;\n}\n\ninterface IAFiFactory {\n  function setIfUserInvesting(address user, address afiContract) external;\n\n  function hasUserInvestedAlready(\n    address afiContract,\n    address user\n  ) external view returns (bool);\n\n  function withdrawAndResetInvestmentStatus(address user, address afiContract) external;\n\n  function afiContractInitUpdate(address aFiContract, uint order) external;\n}\n\ninterface LendingPoolAddressesProvider {\n  function getLendingPool() external view returns (address);\n\n  function getLendingPoolCore() external view returns (address);\n}\n\ncontract AFiVariableStorage {\n  uint internal pool;\n  address[] internal token; // deposit stable coin\n  mapping(address =\u003e address) internal compound; // compound address for various u tokens\n  mapping(address =\u003e address) internal aaveToken; // aaveToken address for various u tokens\n  mapping(address =\u003e uint) internal depositNAV;\n  address payable internal platformWallet =\n    payable(0xB60C61DBb7456f024f9338c739B02Be68e3F545C);\n  mapping(address =\u003e bool) internal whitelistedTokens;\n  address[] internal uTokens;\n  uint[] internal uTokenProportions;\n  uint[] internal defaultProportion;\n}\n\ncontract AFiBase is\n  ERC20,\n  ReentrancyGuard,\n  OwnableDelayModule,\n  AFiVariableStorage,\n  IAFi\n{\n  using SafeERC20 for IERC20;\n  using ArrayUtils for uint[];\n  using ArrayUtils for address[];\n  using SafeCast for uint256;\n  IPassiveRebal internal rebalContract;\n  IAFiStorage internal aFiStorage;\n  address internal aFiManager;\n  bool internal depositPaused;\n  bool internal withdrawPaused;\n  address internal pauseDepositController;\n  bool public vaultReInitialized;\n  uint internal typeOfProduct;\n  bool internal isBase;\n  bool public isAfiTransferrable; // true if AFi tokens are transferrable\n  address internal factory;\n  address internal aFiOracle;\n  uint256 internal cSwapCounter;\n  uint256 internal preSwapDepositLimit;\n  mapping(address =\u003e mapping(uint =\u003e uint)) public nonWithdrawableShares;\n  address[] internal nonOverlappingITokens; // Tokens that are not common between underlying and input tokens\n  uint8 public tvlUpdated;\n  uint256 public lastTVLupdate;\n  uint256 public tvlUpdatePeriod;\n\n  address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n  address private constant POOL_ADDRESS_PROVIDER =\n    0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e;\n\n  ISwapRouter internal constant UNISWAP_EXCHANGE =\n    ISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\n\n  mapping(address =\u003e address) public compoundV3Comet;\n\n  address public tLContract;\n  mapping(address =\u003e uint256) public userLockedAmount;\n  mapping(address =\u003e bool) public isPausedForWithdrawals; // true if deposit token is paused(users can\u0027t withdraw in this token)\n\n  event SetInitialValues(address indexed afiContract);\n  event UpdateShares(address user, uint256 amount, bool lock);\n  event Deposit(address indexed investor, uint256 amount, address depToken);\n  event Withdraw(address indexed investor, uint256 amount, address withdrawnToken);\n  event Initialized(address indexed afiContract);\n  event InitializedToken(address indexed afiContract);\n  event SupplyCompV3(address indexed afiContract, address tok, uint amount);\n  event SupplyAave(address indexed afiContract, address tok, uint amount);\n  event SupplyCompound(address indexed afiContract, address tok, uint amount);\n  event WithdrawAave(address indexed afiContract, address tok, uint amount);\n  event WithdrawCompound(address indexed afiContract, address tok, uint amount);\n  event WithdrawCompoundV3(address indexed afiContract, address tok, uint amount);\n  event UpdatePoolData(address indexed afiContract, bytes data);\n\n  constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {}\n\n  function initialize(\n    address newOwner,\n    string memory tokenName,\n    string memory tokenSymbol,\n    bytes memory data,\n    bool _isActiveRebalanced,\n    IAFiStorage _aFiStorage,\n    address[] memory _nonOverlappingITokens\n  ) external override nonReentrant {\n    checkFalse(isBase);\n    addressCheck(newOwner, address(0));\n    _name = tokenName;\n    _symbol = tokenSymbol;\n    _transferOwnership(newOwner);\n    delayModule = newOwner;\n    aFiStorage = _aFiStorage;\n    aFiOracle = aFiStorage.getAFiOracle();\n    nonOverlappingITokens = _nonOverlappingITokens;\n    IAFi.PoolsData memory pooldata = abi.decode(data, (IAFi.PoolsData));\n    typeOfProduct = pooldata._typeOfProduct;\n    preSwapDepositLimit = 1e20;\n    factory = msg.sender;\n    setInitialValues(data);\n    defaultProportion = uTokenProportions;\n    IAFiStorage(_aFiStorage).setAFiActive(address(this), true);\n    IAFiStorage(_aFiStorage).setActiveRebalancedStatus(\n      address(this),\n      _isActiveRebalanced\n    );\n\n    IAFiFactory(factory).afiContractInitUpdate(address(this), 1);\n\n    emit Initialized(address(this));\n  }\n\n  function initializeToken(\n    address[] memory iToken,\n    address[] memory _teamWallets,\n    IPassiveRebal _rebalContract,\n    address _aFiManager\n  ) external override nonReentrant {\n    checkFalse(isBase);\n    isBase = true;\n    aFiManager = _aFiManager;\n    rebalContract = _rebalContract;\n    aFiStorage.setTeamWallets(address(this), _teamWallets);\n    uint iLen = iToken.length;\n    unchecked {\n      for (uint i = 0; i \u003c iLen; i++) {\n        updatetoken(iToken[i]);\n        whitelistedTokens[iToken[i]] = true;\n      }\n    }\n    IAFiFactory(factory).afiContractInitUpdate(address(this), 2);\n    emit InitializedToken(address(this));\n  }\n\n  function updatetoken(address tok) internal {\n    token.push(tok);\n    safeApproveERC20(tok, aFiOracle, ~uint(0));\n  }\n\n  function getcSwapCounter() external view override returns (uint256) {\n    return cSwapCounter;\n  }\n\n  function transferValidationAndSet(address from, address to, uint256 amount) internal {\n    checkFalse(!isAfiTransferrable);\n    address owner = from;\n\n    require(\n      amount \u003c=\n        (_balances[owner] -\n          (userLockedAmount[owner] + nonWithdrawableShares[owner][cSwapCounter])),\n      \"AB333\"\n    );\n\n    depositNAV[to] =\n      ((depositNAV[to] * _balances[to]) + (depositNAV[owner] * amount)) /\n      (_balances[to] + amount);\n  }\n\n  function checkNav(address target) internal {\n    if (_balances[target] == 0) {\n      delete depositNAV[target];\n    }\n  }\n\n  function transfer(address to, uint256 amount) public virtual override returns (bool) {\n    transferValidationAndSet(_msgSender(), to, amount);\n    _transfer(_msgSender(), to, amount);\n    checkNav(_msgSender());\n    return true;\n  }\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 amount\n  ) public virtual override returns (bool) {\n    transferValidationAndSet(from, to, amount);\n    address spender = _msgSender();\n    _spendAllowance(from, spender, amount);\n    _transfer(from, to, amount);\n    checkNav(from);\n    return true;\n  }\n\n  function setAfiTransferability(bool _afiTransferrable) external onlyOwner {\n    isAfiTransferrable = _afiTransferrable;\n  }\n\n  function reinitializeHappened(bool status) external override {\n    twoAddressCompare(aFiManager, aFiOracle);\n    vaultReInitialized = status;\n  }\n\n  function setRebalanceController(address _pauseDepositController) external onlyOwner {\n    addressCheck(_pauseDepositController, address(0));\n    pauseDepositController = _pauseDepositController;\n  }\n\n  function getRebalanceController() external view returns (address) {\n    return pauseDepositController;\n  }\n\n  /**\n   * @notice Pauses / unpause deposits in the contract.\n   * @dev Requirements: Can only be invoked by the Owner wallet.\n   */\n  function pauseUnpauseDeposit(bool status) external {\n    twoAddressCompare(pauseDepositController, aFiOracle);\n    depositPaused = status;\n  }\n\n  /**\n   * @notice Pauses / unpause withdrawals in the contract.\n   * @dev Requirements: Can only be invoked by the Delay Module.\n   */\n  function pauseWithdraw(bool status) external {\n    checkDelayModule();\n    withdrawPaused = status;\n  }\n\n  /**\n   * @notice Returns the paused status of the contract.\n   */\n  function isPaused() external view override returns (bool, bool) {\n    return (depositPaused, withdrawPaused);\n  }\n\n  /**\n   * @notice To update the platform wallet address and zero address should not pass.\n   * @dev Requirements: It can be invoked only by the owner.\n   * @param _platformWallet Address of the platform wallet.\n   */\n  function setplatformWallet(address payable _platformWallet) external onlyOwner {\n    addressCheck(_platformWallet, address(0));\n    platformWallet = _platformWallet;\n  }\n\n  function getplatformWallet() external view returns (address) {\n    return platformWallet;\n  }\n\n  function getPreSwapDepositLimit() external view override returns (uint256) {\n    return preSwapDepositLimit;\n  }\n\n  function getTVLandRebalContractandType()\n    external\n    view\n    override\n    returns (uint256, address, uint256)\n  {\n    return (pool, address(rebalContract), typeOfProduct);\n  }\n\n  function checkFalse(bool flag) internal pure {\n    require(!flag, \"AB03\");\n  }\n\n  function addressEqual(address add1, address add2) internal pure {\n    require(add1 == add2, \"AB30\");\n  }\n\n  function twoAddressCompare(address add1, address add2) internal view {\n    require(msg.sender == add1 || msg.sender == add2, \"AB32\");\n  }\n\n  function addressCheck(address add1, address add2) internal pure {\n    require(add1 != add2, \"AB05\"); //solhint-disable-line reason-string\n  }\n\n  function greaterComparison(uint256 valA, uint256 valB) internal pure {\n    require(valA \u003e= valB, \"AB24\");\n  }\n\n  function togglePauseDepositTokenForWithdrawals(\n    address tok,\n    bool _pause\n  ) external onlyOwner {\n    if (_pause) {\n      checkFalse(!whitelistedTokens[tok]);\n    } else {\n      checkFalse(!isPausedForWithdrawals[tok]);\n    }\n    isPausedForWithdrawals[tok] = _pause;\n  }\n\n  function safeApproveERC20(address tok, address spender, uint amount) internal {\n    IERC20(tok).safeApprove(spender, amount);\n  }\n\n  function addToWhitelist(address tok) external onlyOwner {\n    checkFalse(whitelistedTokens[tok]);\n    (, bool isPresent) = token.indexOf(tok);\n    (, bool isInputTokenPresent) = uTokens.indexOf(tok);\n    if (!isPresent) {\n      updatetoken(tok);\n    }\n    // Prevent duplication in nonOverlappingITokens\n    (, bool isAlreadyInNonOverlapping) = nonOverlappingITokens.indexOf(tok);\n    if (!isInputTokenPresent \u0026\u0026 !isAlreadyInNonOverlapping) {\n      nonOverlappingITokens.push(tok);\n    }\n    whitelistedTokens[tok] = true;\n  }\n\n  function getPreDepositTokensBalance(\n    address tok,\n    uint256 _cSwapCounter\n  ) internal view returns (uint) {\n    return aFiStorage.getPreSwapDepositsTokens(address(this), _cSwapCounter, tok);\n  }\n\n  function removeFromWhitelist(\n    address tok,\n    address swapTok,\n    uint256 deadline,\n    uint256 amountOut\n  ) external onlyOwner {\n    checkFalse(!whitelistedTokens[tok]);\n    checkFalse(!whitelistedTokens[swapTok]);\n    delete whitelistedTokens[tok];\n    if (getPreDepositTokensBalance(tok, cSwapCounter) \u003e 0) {\n      addressCheck(tok, swapTok);\n      aFiStorage.doSwapForThewhiteListRemoval(\n        tok,\n        cSwapCounter,\n        swapTok,\n        deadline,\n        amountOut\n      );\n    }\n\n    token = rebalContract.removeToken(token, tok);\n    safeApproveERC20(tok, aFiOracle, 0);\n\n    // Remove tok from nonOverlappingITokens if present\n    nonOverlappingITokens = rebalContract.removeToken(nonOverlappingITokens, tok);\n  }\n\n  function updateTVLUpdatePeriod(uint256 _tvlUpdatePeriod) external {\n    checkDelayModule();\n    tvlUpdatePeriod = _tvlUpdatePeriod;\n  }\n\n  function updatePool(uint256 _pool) external {\n    (address cumulativeSwapController, ) = IUniswapOracleV3(aFiOracle).getControllers(\n      address(this)\n    );\n    addressEqual(msg.sender, cumulativeSwapController);\n    tvlDataUpdate(_pool);\n  }\n\n  function tvlDataUpdate(uint256 _tvl) internal {\n    pool = _tvl;\n    tvlUpdated = 1;\n    lastTVLupdate = block.timestamp;\n  }\n\n  function checkTVL(bool _updateTVL) public override {\n    if (tvlUpdated == 0 || (block.timestamp - lastTVLupdate) \u003e tvlUpdatePeriod) {\n      if (_updateTVL) {\n        tvlDataUpdate(aFiStorage.calculatePoolInUsd(address(this)));\n      } else {\n        revert(\"AB111\");\n      }\n    } else {\n      delete tvlUpdated;\n    }\n  }\n\n  function contractTransfers(address tok, address to, uint256 amount) private {\n    IERC20(tok).safeTransfer(to, amount);\n  }\n\n  /**\n   * @notice Stakes underlying tokens.\n   * @dev This function is used to stake underlying tokens, triggering certain operations such as token conversion and rebalancing.\n   * @param _depositTokens An array containing addresses of tokens to be deposited.\n   */\n  function underlyingTokensStaking(\n    address[] memory _depositTokens\n  ) external override returns (uint256 _totalProp) {\n    checkOracle();\n    uint256 toSwap;\n\n    for (uint i = 0; i \u003c _depositTokens.length; i++) {\n      toSwap += aFiStorage.convertInUSDAndTok(\n        _depositTokens[i],\n        getPreDepositTokensBalance(_depositTokens[i], cSwapCounter),\n        false\n      );\n    }\n\n    greaterComparison(toSwap, preSwapDepositLimit);\n    uint strategy = rebalContract.getRebalStrategyNumber(address(this));\n    // Rebal block starts\n    if (\n      strategy == 1 \u0026\u0026 cSwapCounter \u003e 0 \u0026\u0026 !vaultReInitialized\n    ) {\n      (uTokenProportions, _totalProp) = rebalContract.applyRebalForProportions(\n        address(this),\n        aFiManager,\n        address(aFiStorage),\n        uTokens,\n        strategy\n      );\n    } else if (cSwapCounter == 0 || vaultReInitialized) {\n      _totalProp = 10000000;\n    }\n    if (vaultReInitialized) {\n      vaultReInitialized = false;\n    }\n    cSwapCounter++;\n    delete tvlUpdated;\n  }\n\n  function swap(\n    address inputToken,\n    address uTok,\n    uint256 amountAsPerProportion,\n    uint _deadline,\n    address middleToken,\n    uint256 minimumReturnAmount\n  ) external override returns (uint256) {\n    checkOracle();\n\n    if (inputToken != uTok \u0026\u0026 middleToken == address(0)) {\n      return\n        _uniswapV3Router(\n          inputToken,\n          uTok,\n          amountAsPerProportion,\n          _deadline,\n          IUniswapOracleV3(aFiOracle).getMidToken(uTok),\n          minimumReturnAmount\n        );\n    } else if (inputToken != uTok) {\n      return\n        _uniswapV3Router(\n          inputToken,\n          uTok,\n          amountAsPerProportion,\n          _deadline,\n          middleToken,\n          minimumReturnAmount\n        );\n    }\n  }\n\n  function isOTokenWhitelisted(address oToken) external view override returns (bool) {\n    return whitelistedTokens[oToken];\n  }\n\n  function deposit(uint amount, address iToken, bool _updateTVL) external nonReentrant {\n    greaterComparison((amount / (10 ** (IERC20(iToken).decimals()))), 100);\n    checkTVL(_updateTVL);\n    uint256 prevPool = pool;\n    checkFalse(!whitelistedTokens[iToken]); // Added validation to check if the token is whitelisted\n    checkFalse(depositPaused);\n    IERC20(iToken).safeTransferFrom(msg.sender, address(this), amount);\n    uint256 fee = (amount * 1) / (100); // 1% platform fees is deducted\n    contractTransfers(iToken, platformWallet, fee);\n    amount = amount - fee;\n    aFiStorage.setPreDepositedInputToken(cSwapCounter, amount, iToken);\n\n    (uint256 shares, uint256 newDepositNAV) = aFiStorage.calculateShares(\n      address(this),\n      amount, // assuming amount is defined somewhere\n      prevPool,\n      _totalSupply,\n      iToken, // assuming iToken is defined somewhere\n      depositNAV[msg.sender],\n      _balances[msg.sender]\n    );\n\n    depositNAV[msg.sender] = newDepositNAV;\n    _mint(msg.sender, shares);\n    nonWithdrawableShares[msg.sender][cSwapCounter] += shares;\n\n    emit Deposit(msg.sender, amount, iToken);\n  }\n\n  function validateWithdraw(\n    address user,\n    address oToken,\n    uint256 _shares\n  ) public view override {\n    checkFalse(!whitelistedTokens[oToken]); // Added validation to check if the token is whitelisted\n    checkFalse(isPausedForWithdrawals[oToken]);\n    validateShares(user, _shares);\n    greaterComparison(_shares, 1e17);\n  }\n\n  function validateShares(address user, uint256 _shares) internal view {\n    greaterComparison(\n      _balances[user] -\n        (userLockedAmount[user] + nonWithdrawableShares[user][cSwapCounter]),\n      _shares\n    );\n  }\n\n  function withdraw(\n    uint _shares,\n    address oToken,\n    uint deadline,\n    uint[] memory minimumReturnAmount,\n    bool _updateTVL,\n    uint swapMethod\n  ) external nonReentrant {\n    require(!(aFiStorage.isSwapMethodPaused(address(this), swapMethod)), \"AB011\"); // Check if the swap method is paused\n    checkFalse(withdrawPaused);\n    validateWithdraw(msg.sender, oToken, _shares);\n    checkTVL(_updateTVL);\n\n    // Calculate the redemption amount before updating balances\n    uint r = (pool * (_shares)) / (_totalSupply);\n\n    IAFiStorage.RedemptionParams memory params = IAFiStorage.RedemptionParams({\n      baseContract: address(this),\n      r: r,\n      oToken: oToken,\n      cSwapCounter: cSwapCounter,\n      uTokens: uTokens,\n      iTokens: token,\n      deadline: deadline,\n      minimumReturnAmount: minimumReturnAmount,\n      _pool: pool,\n      tSupply: _totalSupply,\n      depositNAV: depositNAV[msg.sender]\n    });\n\n    uint256 redFromContract = aFiStorage.handleRedemption(params, _shares, swapMethod);\n\n    burn(msg.sender, _shares);\n    greaterComparison(balance(oToken, address(this)), redFromContract);\n    checkNav(msg.sender);\n\n    contractTransfers(oToken, msg.sender, redFromContract);\n    emit Withdraw(msg.sender, _shares, oToken);\n  }\n\n  function burn(address account, uint256 amount) internal {\n    _balances[account] -= amount;\n    _totalSupply -= amount;\n    emit Transfer(account, address(0), amount);\n  }\n\n  function compareManagerAndStorage() internal view {\n    twoAddressCompare(aFiManager, address(aFiStorage));\n  }\n\n  /**\n   * @notice Executes a token swap using Uniswap V3 via either the AFiStorage or AFiManager contract.\n   * @dev This function initiates a token swap operation through Uniswap V3, utilizing the provided parameters.\n   * @param from The address of the token to swap from.\n   * @param to The address of the token to receive.\n   * @param amount The amount of tokens to swap.\n   * @param deadline The deadline by which the swap must be executed.\n   * @param midTok The address of the intermediary token for the swap.\n   * @param minimumReturnAmount The minimum amount of tokens expected to receive from the swap.\n   * @return _amountOut The amount of tokens received from the swap operation.\n   */\n  function swapViaStorageOrManager(\n    address from,\n    address to,\n    uint amount,\n    uint deadline,\n    address midTok,\n    uint minimumReturnAmount\n  ) external override returns (uint256 _amountOut) {\n    compareManagerAndStorage();\n    _amountOut = _uniswapV3Router(\n      from,\n      to,\n      amount,\n      deadline,\n      midTok,\n      minimumReturnAmount\n    );\n  }\n\n  function _uniswapV3Router(\n    address _tokenIn,\n    address _tokenOut,\n    uint _amountIn,\n    uint _maxTime,\n    address middleToken,\n    uint256 minimumReturnAmount\n  ) internal returns (uint amountOut) {\n    //approval\n    approval(_tokenIn, address(UNISWAP_EXCHANGE), _amountIn);\n    if (\n      _tokenIn == WETH ||\n      _tokenOut == WETH ||\n      _tokenIn == middleToken ||\n      _tokenOut == middleToken\n    ) {\n      bytes memory swapParams = rebalContract.uniswapV3Oracle(\n        address(this),\n        _tokenIn,\n        _tokenOut,\n        _amountIn,\n        _maxTime,\n        middleToken,\n        minimumReturnAmount\n      );\n      ISwapRouter.ExactInputSingleParams memory params = abi.decode(\n        swapParams,\n        (ISwapRouter.ExactInputSingleParams)\n      );\n      amountOut = UNISWAP_EXCHANGE.exactInputSingle(params);\n    } else {\n      bytes memory swapParams = rebalContract.uniswapV3Oracle(\n        address(this),\n        _tokenIn,\n        _tokenOut,\n        _amountIn,\n        _maxTime,\n        middleToken,\n        minimumReturnAmount\n      );\n      ISwapRouter.ExactInputParams memory params = abi.decode(\n        swapParams,\n        (ISwapRouter.ExactInputParams)\n      );\n      amountOut = UNISWAP_EXCHANGE.exactInput(params);\n    }\n    greaterComparison(amountOut, minimumReturnAmount);\n  }\n\n  /**\n   * @notice Function sends profit to wallets in the process of proffir share.\n   * @param wallet address to send profit to.\n   * @param profitShare i.e. amount to be transferred.\n   * @param oToken address of the token to consider for amount deduction.\n   */\n  function sendProfitOrFeeToManager(\n    address wallet,\n    uint profitShare,\n    address oToken\n  ) external override {\n    compareManagerAndStorage();\n    contractTransfers(oToken, wallet, profitShare);\n  }\n\n  function checkStorage() internal view {\n    addressEqual(msg.sender, address(aFiStorage));\n  }\n\n  /**\n   * @notice _supplyCompV3 function supply the fund of token to Compound V3 protocol for yield generation.\n   * @dev this function should be called by AFiStorage only\n   * @param tok address of the token to consider for supply.\n   * @param amount i.e calculated amount of token to invest.\n   */\n  function _supplyCompV3(address tok, uint amount) external override {\n    checkStorage();\n    //approval\n    approval(tok, compoundV3Comet[tok], amount);\n    CompoundV3(compoundV3Comet[tok]).supply(tok, amount);\n    emit SupplyCompV3(address(this), tok, amount);\n  }\n\n  /**\n   * @notice _withdrawCompoundV3 function withdraws the fund of token from CompoundV3 protocol.\n   * @param tok address of the token to consider to withdraw.\n   * @param amount i.e calculated amount of token to withdraw.\n   */\n  function _withdrawCompoundV3(address tok, uint amount) external override {\n    checkStorage();\n    CompoundV3(compoundV3Comet[tok]).withdraw(tok, amount);\n    emit WithdrawCompoundV3(address(this), tok, amount);\n  }\n\n  /**\n   * @notice _supplyAave function supply the fund of token to AAVe protocol for yield generation.\n   * @dev this function should be called by AFiStorage only\n   * @param tok address of the token to consider for supply.\n   * @param amount i.e calculated amount of token to invest.\n   */\n  function _supplyAave(address tok, uint amount) external override {\n    checkStorage();\n    //approval\n    approval(tok, address(_lendingPool()), amount);\n    _lendingPool().deposit(tok, amount, address(this), 0);\n    emit SupplyAave(address(this), tok, amount);\n  }\n\n  /**\n   * @notice _supplyCompound function supply the fund of token to Compound protocol for yield generation.\n   * @dev this function should be called by AFiStorage only\n   * @param tok address of the token to consider for supply.\n   * @param amount i.e calculated amount of token to invest.\n   */\n  function _supplyCompound(address tok, uint amount) external override {\n    checkStorage();\n    //approval\n    approval(tok, compound[tok], amount);\n    require(Compound(compound[tok]).mint(amount) == 0, \"AB18\");\n    emit SupplyCompound(address(this), tok, amount);\n  }\n\n  function approval(address tok, address sender, uint256 amount) internal {\n    uint256 allowance = IERC20(tok).allowance(address(this), sender);\n    if (allowance \u003c amount) {\n      IERC20(tok).safeIncreaseAllowance(sender, (amount - allowance));\n    }\n  }\n\n  /**\n   * @notice _withdrawAave function withdraws the fund of token from AAve protocol.\n   * @param tok address of the token to consider to withdraw.\n   * @param amount i.e calculated amount of token to withdraw.\n   */\n  function _withdrawAave(address tok, uint amount) external override {\n    checkStorage();\n    _lendingPool().withdraw(tok, amount, address(this));\n    emit WithdrawAave(address(this), tok, amount);\n  }\n\n  /**\n   * @notice _withdrawCompound function withdraws the fund of token from Compound protocol.\n   * @param tok address of the token to consider to withdraw.\n   * @param amount i.e calculated amount of token to withdraw.\n   */\n  function _withdrawCompound(address tok, uint amount) external override {\n    checkStorage();\n    require(Compound(compound[tok]).redeemUnderlying(amount) == 0, \"AB20\");\n    emit WithdrawCompound(address(this), tok, amount);\n  }\n\n  /**\n   * @notice updatePoolData function updates the pool data in the process of rebalance.\n   * @param data encoded data to update.\n   */\n  function updatePoolData(bytes memory data) external override nonReentrant {\n    checkManager();\n    setInitialValues(data);\n    emit UpdatePoolData(address(this), data);\n  }\n\n  /**\n   * @notice Returns the array of underlying tokens.\n   * @return uTokensArray Array of underlying tokens.\n   */\n  function getUTokens() external view override returns (address[] memory uTokensArray) {\n    return uTokens;\n  }\n\n  function getProportions()\n    external\n    view\n    override\n    returns (uint[] memory, uint[] memory)\n  {\n    return (uTokenProportions, defaultProportion);\n  }\n\n  /**\n   * @notice Sets unstaking data and returns necessary information.\n   * @dev This function is used to set unstaking data and returns relevant information.\n   * @param totalQueuedShares The total number of queued shares for unstaking.\n   * @return token An array containing token addresses.\n   * @return uTokens An array containing addresses of underlying tokens.\n   * @return pool The address of the pool.\n   * @return tSupply The total supply of tokens after considering queued shares.\n   */\n  function setUnstakeData(\n    uint256 totalQueuedShares\n  ) external override returns (address[] memory, address[] memory, uint256, uint256) {\n    checkOracle();\n    uint256 tSupply = _totalSupply;\n    if (totalQueuedShares != 0) {\n      _totalSupply -= totalQueuedShares;\n    }\n    return (token, uTokens, pool, tSupply);\n  }\n\n  /**\n   * @notice Retrieves input tokens.\n   * @dev This function is used to retrieve input token addresses and non-overlapping input token addresses.\n   * @return token An array containing input token addresses.\n   * @return nonOverlappingITokens An array containing non-overlapping input token addresses.\n   */\n  function getInputToken()\n    external\n    view\n    override\n    returns (address[] memory, address[] memory)\n  {\n    return (token, nonOverlappingITokens);\n  }\n\n  /**\n   * @notice setInitialValues function initialises the pool and afi product data\n   * @param data  i.e encoded data that contains pool, product data.\n   */\n  function setInitialValues(bytes memory data) internal {\n    IAFi.PoolsData memory pooldata = abi.decode(data, (IAFi.PoolsData));\n    IAFi.UnderlyingData memory uData = abi.decode(\n      pooldata.underlyingData,\n      (IAFi.UnderlyingData)\n    );\n\n    address tok;\n    uint uLen = uData._underlyingTokens.length;\n    for (uint i = 0; i \u003c uLen; i++) {\n      tok = uData._underlyingTokens[i];\n      uTokens.push(uData._underlyingTokens[i]);\n      uTokenProportions.push(pooldata._underlyingTokensProportion[i]);\n      aaveToken[tok] = pooldata._aaveToken[i];\n      compound[tok] = pooldata._compound[i];\n      compoundV3Comet[tok] = pooldata.compoundV3Comet[i];\n      aFiStorage.afiSync(\n        address(this),\n        tok,\n        aaveToken[tok],\n        compoundV3Comet[tok],\n        compound[tok]\n      );\n    }\n\n    emit SetInitialValues(address(this));\n  }\n\n  function updateuTokAndProp(address[] memory _uTokens) external override {\n    checkManager();\n    uTokens = _uTokens;\n  }\n\n  function checkManager() internal {\n    addressEqual(msg.sender, aFiManager);\n  }\n\n  /**\n   * @notice updateDp Function updates the default proportion after rebalance\n   * @dev it should be called by the AFiManager contract only.\n   * @param _defaultProportion i.e array of new default proportion\n   */\n  function updateDp(\n    uint256[] memory _defaultProportion,\n    uint256[] memory _uTokensProportion\n  ) external override {\n    checkManager();\n    uTokenProportions = _uTokensProportion;\n    defaultProportion = _defaultProportion;\n  }\n\n  /// @notice Retrieves Aave LendingPool address\n  /// @return A reference to LendingPool interface\n  function _lendingPool() internal view returns (ILendingPool) {\n    return ILendingPool(IPoolAddressesProvider(POOL_ADDRESS_PROVIDER).getPool());\n  }\n\n  function checkOracle() internal {\n    addressEqual(msg.sender, aFiOracle);\n  }\n\n  /**\n   * @notice updateShares Function locks/unlocks afi token\n   * @dev it should be called by the time lock contract only.\n   * @param user address to lock the afi token from.\n   * @param amount i.e. amount to be locked/unlocked.\n   * @param lock i.e. status if amount should be locked or unlocked.\n   */\n  function stakeShares(address user, uint256 amount, bool lock) external {\n    addressCheck(user, tLContract);\n    if (lock) {\n      validateShares(user, amount);\n    } else {\n      greaterComparison(userLockedAmount[user], amount);\n    }\n    updateLockedTokens(user, amount, lock, false, false, 0);\n    emit UpdateShares(user, amount, lock);\n  }\n\n  function updateLockedTokens(\n    address user,\n    uint256 amount,\n    bool lock,\n    bool queue,\n    bool unqueue,\n    uint256 newNAV\n  ) public override {\n    twoAddressCompare(tLContract, aFiOracle);\n    if (msg.sender == tLContract) {\n      if (lock) {\n        userLockedAmount[user] = userLockedAmount[user] + (amount);\n      } else {\n        userLockedAmount[user] = userLockedAmount[user] - (amount);\n      }\n    }\n\n    if (queue) {\n      _balances[user] -= amount;\n      if (_balances[user] == 0 \u0026\u0026 userLockedAmount[user] == 0) {\n        delete depositNAV[user];\n      }\n      emit Transfer(user, address(0), amount);\n    }\n    if (unqueue) {\n      depositNAV[user] = newNAV;\n      _balances[user] += amount;\n      emit Transfer(address(0), user, amount);\n    }\n  }\n\n  /**\n   * @notice updateTimeLockContract Function updates timelock contract address and zero address should not pass\n   * @param newTL address of the timelock contract.\n   */\n  function updateTimeLockContract(address newTL) external onlyOwner {\n    addressCheck(newTL, address(0));\n    tLContract = newTL;\n  }\n\n  /**\n   * @notice Allows the owner to emergency withdraw tokens from the contract.\n   * @dev Only the platform wallet can call this function.\n   * @param tok Address of the token to be withdrawn.\n   * @param wallet Address to receive the withdrawn tokens.\n   */\n\n  function emergencyWithdraw(address tok, address wallet) external {\n    checkDelayModule();\n    (, bool present) = uTokens.indexOf(tok);\n    (, bool iPresent) = token.indexOf(tok);\n    checkFalse(present);\n    checkFalse(iPresent);\n    contractTransfers(tok, wallet, balance(tok, address(this)));\n  }\n\n  function checkDelayModule() internal {\n    addressEqual(msg.sender, delayModule);\n  }\n\n  /**\n   * @notice Returns the balance of a specific token in the AFi contract.\n   * @param tok The address of the token.\n   * @param afiContract The address of the AFi contract.\n   * @return The token balance.\n   */\n  function balance(address tok, address afiContract) internal view returns (uint) {\n    return IERC20(tok).balanceOf(afiContract);\n  }\n\n  /**\n   * @notice Updates the list of input tokens for the contract.\n   * @dev Only the contract owner can call this function.\n   * @param _nonOverlappingITokens Array of addresses representing input tokens.\n   */\n  function updateInputTokens(\n    address[] memory _nonOverlappingITokens\n  ) external override {\n    twoAddressCompare(owner(), aFiManager);\n    nonOverlappingITokens = _nonOverlappingITokens;\n  }\n\n  /**\n   * @notice Updates the limit for pre-swap deposits.\n   * @dev Only the contract owner can call this function.\n   * @param _preSwapDepositLimit New limit for pre-swap deposits.\n   */\n  function updatePreSwapDepositLimit(uint256 _preSwapDepositLimit) external onlyOwner {\n    preSwapDepositLimit = _preSwapDepositLimit;\n  }\n\n  /**\n   * @notice Returns the NAV (Net Asset Value) of a user\u0027s deposited funds.\n   * @param user Address of the user.\n   * @return The NAV of the user\u0027s deposited funds.\n   */\n  function depositUserNav(address user) external view override returns (uint256) {\n    if (_balances[user] == 0) {\n      return 0;\n    } else {\n      return depositNAV[user];\n    }\n  }\n}\n"},"ArrayUtils.sol":{"content":"// SPDX-License-Identifier: Unlicensed\n\npragma solidity ^0.8.0;\n\n// Reference: https://github.com/cryptofinlabs/cryptofin-solidity/blob/master/contracts/array-utils/AddressArrayUtils.sol\nlibrary ArrayUtils {\n  /**\n   * Deletes address at index and fills the spot with the last address.\n   * Order is preserved.\n   */\n  // solhint-disable-next-line var-name-mixedcase\n  function sPopAddress(address[] storage A, uint index) internal {\n    uint length = A.length;\n    if (index \u003e= length) {\n      revert(\"Error: index out of bounds\");\n    }\n\n    for (uint i = index; i \u003c length - 1; i++) {\n      A[i] = A[i + 1];\n    }\n    A.pop();\n  }\n\n  // solhint-disable-next-line var-name-mixedcase\n  function sPopUint256(uint[] storage A, uint index) internal {\n    uint length = A.length;\n    if (index \u003e= length) {\n      revert(\"Error: index out of bounds\");\n    }\n\n    for (uint i = index; i \u003c length - 1; i++) {\n      A[i] = A[i + 1];\n    }\n    A.pop();\n  }\n\n  // solhint-disable-next-line var-name-mixedcase\n  function sumOfMArrays(\n    uint[] memory A,\n    uint[] memory B\n  ) internal pure returns (uint[] memory sum) {\n    sum = new uint[](A.length);\n    for (uint i = 0; i \u003c A.length; i++) {\n      sum[i] = A[i] + B[i];\n    }\n    return sum;\n  }\n\n  /**\n   * Finds the index of the first occurrence of the given element.\n   * @param A The input array to search\n   * @param a The value to find\n   * @return Returns (index and isIn) for the first occurrence starting from index 0\n   */\n  function indexOf(address[] memory A, address a) internal pure returns (uint, bool) {\n    uint length = A.length;\n    for (uint i = 0; i \u003c length; i++) {\n      if (A[i] == a) {\n        return (i, true);\n      }\n    }\n    return (type(uint).max, false);\n  }\n\n  /**\n   * Returns true if the value is present in the list. Uses indexOf internally.\n   * @param A The input array to search\n   * @param a The value to find\n   * @return Returns isIn for the first occurrence starting from index 0\n   */\n  function contains(address[] memory A, address a) internal pure returns (bool) {\n    (, bool isIn) = indexOf(A, a);\n    return isIn;\n  }\n\n  /**\n   * Returns true if there are 2 elements that are the same in an array\n   * @param A The input array to search\n   * @return Returns boolean for the first occurrence of a duplicate\n   */\n  function hasDuplicate(address[] memory A) internal pure returns (bool) {\n    require(A.length \u003e 0, \"A is empty\");\n\n    for (uint i = 0; i \u003c A.length - 1; i++) {\n      address current = A[i];\n      for (uint j = i + 1; j \u003c A.length; j++) {\n        if (current == A[j]) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param A The input array to search\n   * @param a The address to remove\n   * @return Returns the array with the object removed.\n   */\n  function remove(\n    address[] memory A,\n    address a\n  ) internal pure returns (address[] memory) {\n    (uint index, bool isIn) = indexOf(A, a);\n    if (!isIn) {\n      revert(\"Address not in array.\");\n    } else {\n      (address[] memory _A, ) = pop(A, index);\n      return _A;\n    }\n  }\n\n  /**\n   * @param A The input array to search\n   * @param a The address to remove\n   */\n  function removeStorage(address[] storage A, address a) internal {\n    (uint index, bool isIn) = indexOf(A, a);\n    if (!isIn) {\n      revert(\"Address not in array.\");\n    } else {\n      uint lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\n      if (index != lastIndex) {\n        A[index] = A[lastIndex];\n      }\n      A.pop();\n    }\n  }\n\n  /**\n   * Removes specified index from array\n   * @param A The input array to search\n   * @param index The index to remove\n   * @return Returns the new array and the removed entry\n   */\n  function pop(\n    address[] memory A,\n    uint index\n  ) internal pure returns (address[] memory, address) {\n    uint length = A.length;\n    require(index \u003c A.length, \"Index must be \u003c A length\");\n    address[] memory newAddresses = new address[](length - 1);\n    for (uint i = 0; i \u003c index; i++) {\n      newAddresses[i] = A[i];\n    }\n    for (uint j = index + 1; j \u003c length; j++) {\n      newAddresses[j - 1] = A[j];\n    }\n    return (newAddresses, A[index]);\n  }\n\n  /**\n   * Returns the combination of the two arrays\n   * @param A The first array\n   * @param B The second array\n   * @return Returns A extended by B\n   */\n  function extend(\n    address[] memory A,\n    address[] memory B\n  ) internal pure returns (address[] memory) {\n    uint aLength = A.length;\n    uint bLength = B.length;\n    address[] memory newAddresses = new address[](aLength + bLength);\n    for (uint i = 0; i \u003c aLength; i++) {\n      newAddresses[i] = A[i];\n    }\n    for (uint j = 0; j \u003c bLength; j++) {\n      newAddresses[aLength + j] = B[j];\n    }\n    return newAddresses;\n  }\n\n  /**\n   * Validate that address and uint array lengths match. Validate address array is not empty\n   * and contains no duplicate elements.\n   *\n   * @param A         Array of addresses\n   * @param B         Array of uint\n   */\n  function validatePairsWithArray(address[] memory A, uint[] memory B) internal pure {\n    require(A.length == B.length, \"Array length mismatch\");\n    _validateLengthAndUniqueness(A);\n  }\n\n  /**\n   * Validate that address and bool array lengths match. Validate address array is not empty\n   * and contains no duplicate elements.\n   *\n   * @param A         Array of addresses\n   * @param B         Array of bool\n   */\n  function validatePairsWithArray(address[] memory A, bool[] memory B) internal pure {\n    require(A.length == B.length, \"Array length mismatch\");\n    _validateLengthAndUniqueness(A);\n  }\n\n  /**\n   * Validate that address and string array lengths match. Validate address array is not empty\n   * and contains no duplicate elements.\n   *\n   * @param A         Array of addresses\n   * @param B         Array of strings\n   */\n  function validatePairsWithArray(address[] memory A, string[] memory B) internal pure {\n    require(A.length == B.length, \"Array length mismatch\");\n    _validateLengthAndUniqueness(A);\n  }\n\n  /**\n   * Validate that address array lengths match, and calling address array are not empty\n   * and contain no duplicate elements.\n   *\n   * @param A         Array of addresses\n   * @param B         Array of addresses\n   */\n  function validatePairsWithArray(\n    address[] memory A,\n    address[] memory B\n  ) internal pure {\n    require(A.length == B.length, \"Array length mismatch\");\n    _validateLengthAndUniqueness(A);\n  }\n\n  /**\n   * Validate that address and bytes array lengths match. Validate address array is not empty\n   * and contains no duplicate elements.\n   *\n   * @param A         Array of addresses\n   * @param B         Array of bytes\n   */\n  function validatePairsWithArray(address[] memory A, bytes[] memory B) internal pure {\n    require(A.length == B.length, \"Array length mismatch\");\n    _validateLengthAndUniqueness(A);\n  }\n\n  /**\n   * Validate address array is not empty and contains no duplicate elements.\n   *\n   * @param A          Array of addresses\n   */\n  function _validateLengthAndUniqueness(address[] memory A) internal pure {\n    require(A.length \u003e 0, \"Array length must be \u003e 0\");\n    require(!hasDuplicate(A), \"Cannot duplicate addresses\");\n  }\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"},"CustomizeIERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface CustomizeIERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n}"},"DataTypes.sol":{"content":"// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nlibrary DataTypes {\n  struct ReserveData {\n    //stores the reserve configuration\n    ReserveConfigurationMap configuration;\n    //the liquidity index. Expressed in ray\n    uint128 liquidityIndex;\n    //the current supply rate. Expressed in ray\n    uint128 currentLiquidityRate;\n    //variable borrow index. Expressed in ray\n    uint128 variableBorrowIndex;\n    //the current variable borrow rate. Expressed in ray\n    uint128 currentVariableBorrowRate;\n    //the current stable borrow rate. Expressed in ray\n    uint128 currentStableBorrowRate;\n    //timestamp of last update\n    uint40 lastUpdateTimestamp;\n    //the id of the reserve. Represents the position in the list of the active reserves\n    uint16 id;\n    //aToken address\n    address aTokenAddress;\n    //stableDebtToken address\n    address stableDebtTokenAddress;\n    //variableDebtToken address\n    address variableDebtTokenAddress;\n    //address of the interest rate strategy\n    address interestRateStrategyAddress;\n    //the current treasury balance, scaled\n    uint128 accruedToTreasury;\n    //the outstanding unbacked aTokens minted through the bridging feature\n    uint128 unbacked;\n    //the outstanding debt borrowed against this asset in isolation mode\n    uint128 isolationModeTotalDebt;\n  }\n\n  struct ReserveConfigurationMap {\n    //bit 0-15: LTV\n    //bit 16-31: Liq. threshold\n    //bit 32-47: Liq. bonus\n    //bit 48-55: Decimals\n    //bit 56: reserve is active\n    //bit 57: reserve is frozen\n    //bit 58: borrowing is enabled\n    //bit 59: stable rate borrowing enabled\n    //bit 60: asset is paused\n    //bit 61: borrowing in isolation mode is enabled\n    //bit 62-63: reserved\n    //bit 64-79: reserve factor\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 =\u003e no cap\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 =\u003e no cap\n    //bit 152-167 liquidation protocol fee\n    //bit 168-175 eMode category\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 =\u003e minting disabled\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\n    //bit 252-255 unused\n\n    uint256 data;\n  }\n\n  struct EModeCategory {\n    // each eMode category has a custom ltv and liquidation threshold\n    uint16 ltv;\n    uint16 liquidationThreshold;\n    uint16 liquidationBonus;\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\n    address priceSource;\n    string label;\n  }\n\n  enum InterestRateMode {\n    NONE,\n    STABLE,\n    VARIABLE\n  }\n\n  struct ReserveCache {\n    uint256 currScaledVariableDebt;\n    uint256 nextScaledVariableDebt;\n    uint256 currPrincipalStableDebt;\n    uint256 currAvgStableBorrowRate;\n    uint256 currTotalStableDebt;\n    uint256 nextAvgStableBorrowRate;\n    uint256 nextTotalStableDebt;\n    uint256 currLiquidityIndex;\n    uint256 nextLiquidityIndex;\n    uint256 currVariableBorrowIndex;\n    uint256 nextVariableBorrowIndex;\n    uint256 currLiquidityRate;\n    uint256 currVariableBorrowRate;\n    uint256 reserveFactor;\n    ReserveConfigurationMap reserveConfiguration;\n    address aTokenAddress;\n    address stableDebtTokenAddress;\n    address variableDebtTokenAddress;\n    uint40 reserveLastUpdateTimestamp;\n    uint40 stableDebtLastUpdateTimestamp;\n  }\n\n  struct ExecuteLiquidationCallParams {\n    uint256 reservesCount;\n    uint256 debtToCover;\n    address collateralAsset;\n    address debtAsset;\n    address user;\n    bool receiveAToken;\n    address priceOracle;\n    uint8 userEModeCategory;\n    address priceOracleSentinel;\n  }\n\n  struct ExecuteSupplyParams {\n    address asset;\n    uint256 amount;\n    address onBehalfOf;\n    uint16 referralCode;\n  }\n\n  struct ExecuteBorrowParams {\n    address asset;\n    address user;\n    address onBehalfOf;\n    uint256 amount;\n    InterestRateMode interestRateMode;\n    uint16 referralCode;\n    bool releaseUnderlying;\n    uint256 maxStableRateBorrowSizePercent;\n    uint256 reservesCount;\n    address oracle;\n    uint8 userEModeCategory;\n    address priceOracleSentinel;\n  }\n\n  struct ExecuteRepayParams {\n    address asset;\n    uint256 amount;\n    InterestRateMode interestRateMode;\n    address onBehalfOf;\n    bool useATokens;\n  }\n\n  struct ExecuteWithdrawParams {\n    address asset;\n    uint256 amount;\n    address to;\n    uint256 reservesCount;\n    address oracle;\n    uint8 userEModeCategory;\n  }\n\n  struct ExecuteSetUserEModeParams {\n    uint256 reservesCount;\n    address oracle;\n    uint8 categoryId;\n  }\n\n  struct FinalizeTransferParams {\n    address asset;\n    address from;\n    address to;\n    uint256 amount;\n    uint256 balanceFromBefore;\n    uint256 balanceToBefore;\n    uint256 reservesCount;\n    address oracle;\n    uint8 fromEModeCategory;\n  }\n\n  struct FlashloanParams {\n    address receiverAddress;\n    address[] assets;\n    uint256[] amounts;\n    uint256[] interestRateModes;\n    address onBehalfOf;\n    bytes params;\n    uint16 referralCode;\n    uint256 flashLoanPremiumToProtocol;\n    uint256 flashLoanPremiumTotal;\n    uint256 maxStableRateBorrowSizePercent;\n    uint256 reservesCount;\n    address addressesProvider;\n    uint8 userEModeCategory;\n    bool isAuthorizedFlashBorrower;\n  }\n\n  struct FlashloanSimpleParams {\n    address receiverAddress;\n    address asset;\n    uint256 amount;\n    bytes params;\n    uint16 referralCode;\n    uint256 flashLoanPremiumToProtocol;\n    uint256 flashLoanPremiumTotal;\n  }\n\n  struct FlashLoanRepaymentParams {\n    uint256 amount;\n    uint256 totalPremium;\n    uint256 flashLoanPremiumToProtocol;\n    address asset;\n    address receiverAddress;\n    uint16 referralCode;\n  }\n\n  struct ValidateLiquidationCallParams {\n    ReserveCache debtReserveCache;\n    uint256 totalDebt;\n    uint256 healthFactor;\n    address priceOracleSentinel;\n  }\n\n  struct CalculateInterestRatesParams {\n    uint256 unbacked;\n    uint256 liquidityAdded;\n    uint256 liquidityTaken;\n    uint256 totalStableDebt;\n    uint256 totalVariableDebt;\n    uint256 averageStableBorrowRate;\n    uint256 reserveFactor;\n    address reserve;\n    address aToken;\n  }\n\n  struct InitReserveParams {\n    address asset;\n    address aTokenAddress;\n    address stableDebtAddress;\n    address variableDebtAddress;\n    address interestRateStrategyAddress;\n    uint16 reservesCount;\n    uint16 maxNumberReserves;\n  }\n}"},"draft-IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account\u0027s ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn\u0027t\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``\u0027s tokens,\n     * given ``owner``\u0027s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``\u0027s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``\u0027s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport {CustomizeIERC20} from \"./CustomizeIERC20.sol\";\nimport \"./IERC20Metadata.sol\";\nimport \"./Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\u0027t required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is CustomizeIERC20, Context, IERC20Metadata {\n    mapping(address =\u003e uint256) internal _balances;\n\n    mapping(address =\u003e mapping(address =\u003e uint256)) internal _allowances;\n    \n    uint256 internal _totalSupply;\n\n    string internal _name;\n    string internal _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it\u0027s overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    // /**\n    //  * @dev See {IERC20-totalSupply}.\n    //  */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    // /**\n    //  * @dev See {IERC20-balanceOf}.\n    //  */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n      /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance \u003e= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}"},"IAFi.sol":{"content":"// SPDX-License-Identifier: Unlicensed\n\npragma solidity ^0.8.0;\n\nimport {IERC20Extended as IERC20} from \"./IERC20Extended.sol\";\nimport \"./IAFiStorage.sol\";\nimport \"./IPassiveRebal.sol\";\n\n/**\n * @title PassiveRebal.\n * @notice Interface of the Passive Rebalance contract.\n */\ninterface PassiveRebal {\n  function applyRebalForProportions(\n    address _aFiContract,\n    address _aFiManager,\n    address _aFiStorage,\n    address[] memory _tokens,\n    uint256 strategy\n  ) external returns (uint[] memory proportions, uint256);\n\n  function getPauseStatus() external returns (bool);\n  function getRebalStrategyNumber(address aFiContract) external returns (uint);\n}\n\ninterface IAFiOracle {\n  function uniswapV3Oracle(\n    address afiContract,\n    address _tokenIn,\n    address _tokenOut,\n    uint _amountIn,\n    uint _maxTime,\n    address middleToken,\n    uint256 minimumReturnAmount\n  ) external returns (bytes memory swapParams);\n}\n\ninterface IAFiManager {\n  function updateUTokenProportion(\n    address aFiContract,\n    address aFiStorage\n  ) external returns (uint256[] memory);\n\n  function inputTokenUSD(\n    IAFi aFiContract,\n    uint256 cSwapCounter,\n    IAFiStorage _aFiStorage\n  ) external view returns (uint256 totalPreDepositInUSD);\n\n  function rebalanceController() external view returns(address);\n  function pauseQueueWithdrawUnstaking(address afiContract,bool status) external;\n  function isQueueWithdrawUnstakingPaused(address afiContract) external view returns(bool);\n}\n\n/**\n * @title IAFi.\n * @notice Interface of the AToken.\n */\ninterface IAFi {\n\n  struct UnderlyingData {\n    address[] _underlyingTokens; //uTokens\n    address[] _underlyingUniPoolToken; //uToken - MiddleToken\n  }\n\n  struct PoolsData {\n    address[] _depositStableCoin;\n    address[] _depositCoinOracle;\n    bytes underlyingData;\n    address[] _compound;\n    address[] _aaveToken;\n    address[] _priceOracles;\n    uint[] _underlyingTokensProportion;\n    address[] compoundV3Comet;\n    uint _typeOfProduct;\n  }\n\n  struct SwapParameters {\n    address afiContract;\n    address oToken;\n    uint256 cSwapFee;\n    uint256 cSwapCounter;\n    address[] depositTokens;\n    uint256[] minimumReturnAmount;\n    uint256[] iMinimumReturnAmount; // minimum amount out expcted after swaps For deposit tokens\n    address[] underlyingTokens;\n    uint256[] newProviders;\n    uint _deadline;\n    address[] cometToClaim;\n    address[] cometRewardTokens;\n    uint256[] rewardTokenMinReturnAmounts;\n  }\n\n  /**\n   * @notice Function to initialize the data, owner and afi token related data.\n   * @dev the function should be called once only by factory\n   * @param newOwner indicates the owner of the created afi product.\n   * @param _name indicates the name of the afi Token\n   * @param _symbol indicates symbol of the the afi Token.\n   * @param data indicates the encoded data that follows the PoolsData struct format.\n   * @param _isActiveRebalanced indicates the active rebalance status of the afi contract.\n   * @param _aFiStorage indicates the afi storage contract address.\n   */\n  function initialize(\n    address newOwner,\n    string memory _name,\n    string memory _symbol,\n    bytes memory data,\n    bool _isActiveRebalanced,\n    IAFiStorage _aFiStorage,\n    address[] memory _commonInputTokens\n  ) external;\n\n  /**\n   * @notice Function to initialize accepted tokens in deposit and withdraw functions.\n   * @dev  the function should be called once only by factory\n   * @param iToken indicates the array of the accepted token addressess.\n   */\n  function initializeToken(\n    address[] memory iToken,\n    address[] memory _teamWallets,\n    IPassiveRebal _rebalContract,\n    address _aFiManager\n  ) external;\n\n  function getcSwapCounter() external view returns(uint256);\n\n  /**\n   * @notice Returns the array of underlying tokens.\n   * @return uTokensArray Array of underlying tokens.\n   */\n  function getUTokens() external view returns (address[] memory uTokensArray);\n\n  function swapViaStorageOrManager(\n    address from,\n    address to,\n    uint amount,\n    uint deadline,\n    address midTok,\n    uint minimumReturnAmount\n  ) external returns (uint256);\n\n  /**\n   * @notice Returns the paused status of the contract.\n   */\n  function isPaused() external view returns (bool, bool);\n\n  function getProportions()\n    external\n    view\n    returns (uint[] memory, uint[] memory);\n\n  /**\n   * @notice Updates the pool data during Active Rebalance.\n   * @param data that follows PoolsData format indicates the data of the token being rebalanced in Active Rebalance.\n   */\n  function updatePoolData(bytes memory data) external;\n\n  function sendProfitOrFeeToManager(\n    address wallet,\n    uint profitShare,\n    address oToken\n  ) external;\n\n  function _supplyCompV3(address tok, uint amount) external;\n\n  function _supplyAave(address tok, uint amount) external;\n\n  function _supplyCompound(address tok, uint amount) external;\n\n  function _withdrawAave(address tok, uint amount) external;\n\n  function _withdrawCompoundV3(address tok, uint amount) external;\n\n  function _withdrawCompound(address tok, uint amount) external;\n\n  function getTVLandRebalContractandType()\n    external\n    view\n  returns (uint256, address, uint256);\n\n  function getInputToken() external view returns (address[] memory, address[] memory);\n\n  function swap(\n    address inputToken,\n    address uTok,\n    uint256 amountAsPerProportion,\n    uint _deadline,\n    address middleToken,\n    uint256 minimumReturnAmount\n  ) external returns (uint256);\n\n  function updateDp(\n    uint256[] memory _defaultProportion,\n    uint256[] memory _uTokensProportion\n  ) external;\n\n  function updateuTokAndProp(\n    address[] memory _uTokens\n  ) external;\n\n  function underlyingTokensStaking(address[] memory _depositTokens) external returns(uint256 _totalProp);\n\n  function depositUserNav(address user) external view returns (uint256);\n\n  function setUnstakeData(uint256 totalQueuedShares) external returns (address[] memory, address[] memory, uint256, uint256);\n\n  function isOTokenWhitelisted(address oToken) external view returns (bool);\n\n  function validateWithdraw(address user, address oToken, uint256 _shares) external;\n\n function updateLockedTokens(\n    address user,\n    uint256 amount,\n    bool lock,\n    bool queue,\n    bool unqueue,\n    uint256 newNAV\n  ) external;\n\n  function checkTVL(bool _updateTVL) external;\n\n  function updateInputTokens(address[] memory _inputTokens) external;\n  \n  function reinitializeHappened(bool status) external;\n\n  function getPreSwapDepositLimit() external view returns(uint256);\n\n  function pauseUnpauseDeposit(bool status) external;\n}"},"IAFiStorage.sol":{"content":"// SPDX-License-Identifier: Unlicensed\n\npragma solidity ^0.8.0;\n\n/**\n * @title IAFiStorage.\n * @notice Interface of the AFiStorage.\n */\n\ninterface IIEarnManager {\n  function recommend(\n    address _token,\n    address afiBase,\n    address afiStorage\n  ) external view returns (string memory choice, uint capr, uint aapr, uint dapr);\n}\n\ninterface IAFiStorage {\n  /**\n   * @notice Struct representing investor details.\n   * @param isPresent Boolean indicating whether an investor exists.\n   * @param uTokenBalance Investor underlying token balance.\n   * @param investedAmount Amount of StableCoin invested in the underlying token\n   */\n  struct Investor {\n    bool isPresent;\n    uint depositNAV;\n    uint redemptionNAV;\n  }\n\n  struct RedemptionParams {\n        address baseContract;\n        uint r;\n        address oToken;\n        uint256 cSwapCounter;\n        address[] uTokens;\n        address[] iTokens;\n        uint256 deadline;\n        uint256[] minimumReturnAmount;\n        uint256 _pool;\n        uint256 tSupply;\n        uint256 depositNAV;\n    }\n\n  /**\n   * @notice Struct representing TeamWallet details.\n   * @param isPresent Boolean indicating whether a wallet exists.\n   * @param isActive Boolean indicating whether a wallet is active.\n   * @param walletAddress Wallet address.\n   */\n  struct TeamWallet {\n    bool isPresent;\n    bool isActive;\n    address walletAddress;\n  }\n\n  /**\n   * @notice Struct representing Rebalance details.\n   * @param scenario Scenario can be either of 0, 1 or 2.\n   * @param rebalancedUToken Address of the underlying token that is rebalanced.\n   * @param rebalancedToUTokens Array of addresses of underlying tokens to which the uToken has been rebalanced.\n   */\n  struct RebalanceDetails {\n    uint8 scenario;\n    address rebalancedUToken;\n    address[] rebalancedToUTokens;\n  }\n\n  /**\n   * @param walletAddress Address of the wallet.\n   * @param isActive Boolean indicating wallet active status.\n   */\n  event TeamWalletActive(address indexed walletAddress, bool isActive);\n\n  /**\n   * @param walletAddress Address of the wallet.\n   * @param isActive Boolean indicating wallet active status.\n   */\n  event TeamWalletAdd(address indexed walletAddress, bool isActive);\n\n  /**\n   * @notice Returns the team wallet details.\n   * @param aFiContract Address of the AFi contract.\n   * @param _wallet Wallet address\n   * @return isPresent Boolean indicating the present status of the wallet.\n   * @return isActive Boolean indicating whether to set the wallet to either active/inactive.\n   */\n  function getTeamWalletDetails(\n    address aFiContract,\n    address _wallet\n  ) external view returns (bool isPresent, bool isActive);\n\n\n\n   function handleRedemption(RedemptionParams memory params, uint _shares, uint swapMethod) external  returns (uint256 redemptionFromContract);\n\n  /**\n   * @notice To add a new team wallet.\n   * @param aFiContract Address of the AFi contract.\n   * @param _wallet Wallet address that has to be added in the `teamWallets` array.\n   * @param isActive Boolean indicating whether to set the wallet to either active/inactive.\n   * @param isPresent Boolean indicating the present status of the wallet.\n   */\n  function addTeamWallet(\n    address aFiContract,\n    address _wallet,\n    bool isActive,\n    bool isPresent\n  ) external;\n\n  /**\n   * @notice Returns the team wallets for an AFi.\n   * @param aFiContract Address of the AFi contract.\n   * @return _teamWallets Array of teamWallets.\n   */\n  function getTeamWalletsOfAFi(\n    address aFiContract\n  ) external view returns (address[] memory _teamWallets);\n\n  /**\n   * @notice Sets the address for team wallets.\n   * @param aFiContract Address of the AFi contract.\n   * @param _teamWallets Array of addresses for the team wallets.\n   */\n  function setTeamWallets(address aFiContract, address[] memory _teamWallets) external;\n\n  /**\n   * @notice Sets the status for the AFi in the storage contract.\n   * @param aFiContract Address of the AFi contract.\n   * @param active status for afiContracts.\n   */\n  function setAFiActive(address aFiContract, bool active) external;\n\n  /**\n   * @notice Sets Active Rebalance status of an AFi.\n   * @param aFiContract Address of the AFi contract.\n   * @param status indicating active rebalance status of the AFi contract.\n   */\n  function setActiveRebalancedStatus(address aFiContract, bool status) external;\n\n  /**\n   * @notice gets Active Rebalance status of an AFi.\n   * @param aFiContract Address of the AFi contract.\n   * @return _isActiveRebalanced bool indicating active rebalance status of the AFi contract.\n   */\n  function isAFiActiveRebalanced(\n    address aFiContract\n  ) external view returns (bool _isActiveRebalanced);\n\n  function getTotalActiveWallets(address aFiContract) external view returns (uint);\n\n  function calcPoolValue(\n    address tok,\n    address afiContract\n  ) external view returns (uint);\n\n  function calculateBalanceOfUnderlying(\n    address tok,\n    address afiContract\n  ) external view returns (uint);\n\n  function calculatePoolInUsd(address afiContract) external view returns (uint);\n\n  function afiSync(\n    address afiContract,\n    address tok,\n    address aaveTok,\n    address compV3Comet,\n    address compTok\n  ) external;\n\n  function getPriceInUSDC(\n    address tok\n  ) external view returns (uint256, uint256);\n\n  function validateAndGetDecimals(address tok) external view returns (uint256);\n\n  function getStakedStatus(\n    address aFiContract,\n    address uToken\n  ) external view returns (bool);\n\n  function rearrange(address aFiContract,address[] memory underlyingTokens, uint256[] memory newProviders) external;\n\n  function swapForOtherProduct(\n    address afiContract,\n    uint r,\n    address oToken,\n    uint deadline,\n    uint[] memory minimumReturnAmount,\n    address[] memory uToken\n  ) external returns (uint256);\n\n  function _withdrawAll(address afiContract, address tok) external returns(bool);\n  function getAFiOracle() external view returns(address);\n\n  function calculateRedemptionFromContract(\n    address afiContract,\n    address tok,\n    uint256 r\n  ) external view returns (uint256, bool, uint256, uint256, uint256);\n\n\n\n  function tvlRead(\n    address tok,\n    address afiContract\n  ) external view returns (uint, uint256);\n\n  function getPreSwapDepositsTokens(\n    address aFiContract,\n    uint256 _cSwapCounter,\n    address stableToken\n  ) external view returns (uint256);\n\n  function setPreDepositedInputToken(uint256 _cSwapCounter, uint256 _amount,address _oToken) external;\n  function setPreDepositedInputTokenInRebalance(\n    address aficontract,\n    uint256 _cSwapCounter,\n    uint256 _amount,\n    address _oToken\n  ) external;\n\n  function convertInUSDAndTok(\n    address tok,\n    uint256 amt,\n    bool usd\n  ) external view returns (uint256);\n\n  function calculateShares(\n    address afiContract,\n    uint256 amount,\n    uint256 prevPool,\n    uint256 _totalSupply,\n    address iToken,\n    uint256 currentDepositNAV,\n    uint256 prevBalance\n  ) external view returns (uint256 shares, uint256 newDepositNAV);\n\n  function deletePreDepositedInputToken(\n    address aFiContract,\n    address oToken,\n    uint256 currentCounter\n  )external;\n\n  function doSwapForThewhiteListRemoval(\n    address tok,\n    uint256 _cSwapCounter,\n    address swapToken,\n    uint256 deadline,\n    uint256 minAmountOut\n  ) external;\n\n  function isSwapMethodPaused(address afiContract,uint swapMethod) external view returns (bool);\n}\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}"},"IERC20Extended.sol":{"content":"// SPDX-License-Identifier: Unlicensed\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\ninterface IERC20Extended is IERC20 {\n  function decimals() external view returns (uint8);\n}"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./CustomizeIERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is CustomizeIERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}"},"ILendingPool.sol":{"content":"// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\nimport {DataTypes} from \"./DataTypes.sol\";\n\ninterface ILendingPool {\n  /**\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\n   * @param asset The address of the underlying asset to deposit\n   * @param amount The amount to be deposited\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n   *   is a different wallet\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   **/\n  function deposit(\n    address asset,\n    uint256 amount,\n    address onBehalfOf,\n    uint16 referralCode\n  ) external;\n\n  /**\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n   * @param asset The address of the underlying asset to withdraw\n   * @param amount The underlying amount to be withdrawn\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n   * @param to Address that will receive the underlying, same as msg.sender if the user\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n   *   different wallet\n   * @return The final amount withdrawn\n   **/\n  function withdraw(\n    address asset,\n    uint256 amount,\n    address to\n  ) external returns (uint256);\n\n  /**\n   * @dev Returns the state and configuration of the reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @return The state of the reserve\n   **/\n  function getReserveData(\n    address asset\n  ) external view returns (DataTypes.ReserveData memory);\n}\n"},"ILendingPoolAddressesProvider.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\n/**\n * @title IPoolAddressesProvider\n * @author Aave\n * @notice Defines the basic interface for a Pool Addresses Provider.\n **/\ninterface IPoolAddressesProvider {\n  /**\n   * @dev Emitted when the market identifier is updated.\n   * @param oldMarketId The old id of the market\n   * @param newMarketId The new id of the market\n   */\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\n\n  /**\n   * @dev Emitted when the pool is updated.\n   * @param oldAddress The old address of the Pool\n   * @param newAddress The new address of the Pool\n   */\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the pool configurator is updated.\n   * @param oldAddress The old address of the PoolConfigurator\n   * @param newAddress The new address of the PoolConfigurator\n   */\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the price oracle is updated.\n   * @param oldAddress The old address of the PriceOracle\n   * @param newAddress The new address of the PriceOracle\n   */\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the ACL manager is updated.\n   * @param oldAddress The old address of the ACLManager\n   * @param newAddress The new address of the ACLManager\n   */\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the ACL admin is updated.\n   * @param oldAddress The old address of the ACLAdmin\n   * @param newAddress The new address of the ACLAdmin\n   */\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the price oracle sentinel is updated.\n   * @param oldAddress The old address of the PriceOracleSentinel\n   * @param newAddress The new address of the PriceOracleSentinel\n   */\n  event PriceOracleSentinelUpdated(\n    address indexed oldAddress,\n    address indexed newAddress\n  );\n\n  /**\n   * @dev Emitted when the pool data provider is updated.\n   * @param oldAddress The old address of the PoolDataProvider\n   * @param newAddress The new address of the PoolDataProvider\n   */\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when a new proxy is created.\n   * @param id The identifier of the proxy\n   * @param proxyAddress The address of the created proxy contract\n   * @param implementationAddress The address of the implementation contract\n   */\n  event ProxyCreated(\n    bytes32 indexed id,\n    address indexed proxyAddress,\n    address indexed implementationAddress\n  );\n\n  /**\n   * @dev Emitted when a new non-proxied contract address is registered.\n   * @param id The identifier of the contract\n   * @param oldAddress The address of the old contract\n   * @param newAddress The address of the new contract\n   */\n  event AddressSet(\n    bytes32 indexed id,\n    address indexed oldAddress,\n    address indexed newAddress\n  );\n\n  /**\n   * @dev Emitted when the implementation of the proxy registered with id is updated\n   * @param id The identifier of the contract\n   * @param proxyAddress The address of the proxy contract\n   * @param oldImplementationAddress The address of the old implementation contract\n   * @param newImplementationAddress The address of the new implementation contract\n   */\n  event AddressSetAsProxy(\n    bytes32 indexed id,\n    address indexed proxyAddress,\n    address oldImplementationAddress,\n    address indexed newImplementationAddress\n  );\n\n  /**\n   * @notice Returns the id of the Aave market to which this contract points to.\n   * @return The market id\n   **/\n  function getMarketId() external view returns (string memory);\n\n  /**\n   * @notice Associates an id with a specific PoolAddressesProvider.\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\n   * identify and validate multiple Aave markets.\n   * @param newMarketId The market id\n   */\n  function setMarketId(string calldata newMarketId) external;\n\n  /**\n   * @notice Returns an address by its identifier.\n   * @dev The returned address might be an EOA or a contract, potentially proxied\n   * @dev It returns ZERO if there is no registered address with the given id\n   * @param id The id\n   * @return The address of the registered for the specified id\n   */\n  function getAddress(bytes32 id) external view returns (address);\n\n  /**\n   * @notice General function to update the implementation of a proxy registered with\n   * certain `id`. If there is no proxy registered, it will instantiate one and\n   * set as implementation the `newImplementationAddress`.\n   * @dev IMPORTANT Use this function carefully, only for ids that don\u0027t have an explicit\n   * setter function, in order to avoid unexpected consequences\n   * @param id The id\n   * @param newImplementationAddress The address of the new implementation\n   */\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\n\n  /**\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\n   * @param id The id\n   * @param newAddress The address to set\n   */\n  function setAddress(bytes32 id, address newAddress) external;\n\n  /**\n   * @notice Returns the address of the Pool proxy.\n   * @return The Pool proxy address\n   **/\n  function getPool() external view returns (address);\n\n  /**\n   * @notice Updates the implementation of the Pool, or creates a proxy\n   * setting the new `pool` implementation when the function is called for the first time.\n   * @param newPoolImpl The new Pool implementation\n   **/\n  function setPoolImpl(address newPoolImpl) external;\n\n  /**\n   * @notice Returns the address of the PoolConfigurator proxy.\n   * @return The PoolConfigurator proxy address\n   **/\n  function getPoolConfigurator() external view returns (address);\n\n  /**\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\n   **/\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\n\n  /**\n   * @notice Returns the address of the price oracle.\n   * @return The address of the PriceOracle\n   */\n  function getPriceOracle() external view returns (address);\n\n  /**\n   * @notice Updates the address of the price oracle.\n   * @param newPriceOracle The address of the new PriceOracle\n   */\n  function setPriceOracle(address newPriceOracle) external;\n\n  /**\n   * @notice Returns the address of the ACL manager.\n   * @return The address of the ACLManager\n   */\n  function getACLManager() external view returns (address);\n\n  /**\n   * @notice Updates the address of the ACL manager.\n   * @param newAclManager The address of the new ACLManager\n   **/\n  function setACLManager(address newAclManager) external;\n\n  /**\n   * @notice Returns the address of the ACL admin.\n   * @return The address of the ACL admin\n   */\n  function getACLAdmin() external view returns (address);\n\n  /**\n   * @notice Updates the address of the ACL admin.\n   * @param newAclAdmin The address of the new ACL admin\n   */\n  function setACLAdmin(address newAclAdmin) external;\n\n  /**\n   * @notice Returns the address of the price oracle sentinel.\n   * @return The address of the PriceOracleSentinel\n   */\n  function getPriceOracleSentinel() external view returns (address);\n\n  /**\n   * @notice Updates the address of the price oracle sentinel.\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\n   **/\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\n\n  /**\n   * @notice Returns the address of the data provider.\n   * @return The address of the DataProvider\n   */\n  function getPoolDataProvider() external view returns (address);\n\n  /**\n   * @notice Updates the address of the data provider.\n   * @param newDataProvider The address of the new DataProvider\n   **/\n  function setPoolDataProvider(address newDataProvider) external;\n}\n"},"IPassiveRebal.sol":{"content":"// SPDX-License-Identifier: Unlicensed\npragma solidity ^0.8.0;\n\ninterface IPassiveRebal {\n  function applyRebalForProportions(\n    address _aFiContract,\n    address _aFiManager,\n    address _aFiStorage,\n    address[] memory _tokens,\n    uint256 strategy\n  ) external returns (uint[] memory proportions, uint256 totalProp);\n\n  function getPauseStatus() external returns (bool);\n  function getRebalStrategyNumber(address aFiContract) external returns (uint);\n\n  function uniswapV3Oracle(\n    address afiContract,\n    address _tokenIn,\n    address _tokenOut,\n    uint _amountIn,\n    uint _maxTime,\n    address middleToken,\n    uint256 minimumReturnAmount\n  ) external returns (bytes memory swapParams);\n  function getPool(address tok, address midTok) external view returns (address);\n\n  function upDateInputTokPool(address[] memory iToken, bytes memory uniData) external;\n\n  function getPriceOracle(address tok) external view returns (address);\n\n  function updateOracleData(\n    address _uToken,\n    address _oracleAddress\n  ) external;\n\n   function removeToken(\n    address[] memory _nonOverlappingITokens,\n    address token\n  ) external pure returns (address[] memory);\n\n  function initUniStructure(\n    address[] memory inputTokens,\n    bytes memory _poolData\n  ) external;\n}\n"},"ISwapRouter.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity \u003e=0.7.5;\npragma abicoder v2;\n\n\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}"},"IUniswapV3.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"./IUniswapV3Factory.sol\";\nimport \"./IAFi.sol\";\n\ninterface IUniswapOracleV3 {\n  function PERIOD() external returns (uint256);\n  function factory() external returns (address);\n  function getTotalProfit() external view returns (uint256);\n  function getDaoProfit() external view returns (uint256);\n  function update(address _tokenIn, address _tokenOut) external;\n\n  function quotePrice(IAFi aFiContract,address _tokenIn, address _depositToken, uint256 _amount) external view returns (uint256 price);\n\n\n  function consult(\n    address _tokenIn,\n    uint256 _amountIn,\n    address _tokenOut\n  ) external view returns (uint256 _amountOut);\n\n  function estimateAmountOut(\n    address tokenIn,\n    uint128 amountIn,\n    address tokenOut\n  ) external view returns (uint amountOut);\n\n  function estimateAmountOutMin(\n    address tokenIn,\n    uint128 amountIn,\n    address tokenOut,\n    address pool\n  ) external view returns (uint amountOut);\n\n  function updateAndConsult(\n    address _tokenIn,\n    uint256 _amountIn,\n    address _tokenOut\n  ) external returns (uint256 _amountOut);\n\n  function checkUnderlyingPool(address token) external view returns (bool hasPool);\n  function getStalePriceDelay(address aFiContract, address uToken) external view returns(uint256);\n  function getPriceAndDecimals(address aFiContract, address uToken, address feed) external view returns(int256 , uint8 );\n  function getPriceInUSDC(address tok) external view returns (uint256, uint256);\n  function getMidToken(address tok) external view returns (address);\n  function updateMidToken(address[] memory tok, address[] memory midTok) external;\n  function setRedeemData(address _oToken, uint256 _batchWithdrawCounter, uint256 _totalShares, uint256 _oTokenUnits) external;\n  function getControllers(address afiContract) external view returns(address, address);\n  function cumulativeSwap(\n    IAFi.SwapParameters memory params\n  ) external;\n}\n"},"IUniswapV3Factory.sol":{"content":"//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n  /// @notice Emitted when the owner of the factory is changed\n  /// @param oldOwner The owner before the owner was changed\n  /// @param newOwner The owner after the owner was changed\n  event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n  /// @notice Emitted when a pool is created\n  /// @param token0 The first token of the pool by address sort order\n  /// @param token1 The second token of the pool by address sort order\n  /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n  /// @param tickSpacing The minimum number of ticks between initialized ticks\n  /// @param pool The address of the created pool\n  event PoolCreated(\n    address indexed token0,\n    address indexed token1,\n    uint24 indexed fee,\n    int24 tickSpacing,\n    address pool\n  );\n\n  /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n  /// @param fee The enabled fee, denominated in hundredths of a bip\n  /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n  event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n  /// @notice Returns the current owner of the factory\n  /// @dev Can be changed by the current owner via setOwner\n  /// @return The address of the factory owner\n  function owner() external view returns (address);\n\n  /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n  /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n  /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n  /// @return The tick spacing\n  function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n  /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n  /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n  /// @param tokenA The contract address of either token0 or token1\n  /// @param tokenB The contract address of the other token\n  /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n  /// @return pool The pool address\n  function getPool(\n    address tokenA,\n    address tokenB,\n    uint24 fee\n  ) external view returns (address pool);\n\n  /// @notice Creates a pool for the given two tokens and fee\n  /// @param tokenA One of the two tokens in the desired pool\n  /// @param tokenB The other of the two tokens in the desired pool\n  /// @param fee The desired fee for the pool\n  /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n  /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n  /// are invalid.\n  /// @return pool The address of the newly created pool\n  function createPool(\n    address tokenA,\n    address tokenB,\n    uint24 fee\n  ) external returns (address pool);\n\n  /// @notice Updates the owner of the factory\n  /// @dev Must be called by the current owner\n  /// @param _owner The new owner of the factory\n  function setOwner(address _owner) external;\n\n  /// @notice Enables a fee amount with the given tickSpacing\n  /// @dev Fee amounts may never be removed once enabled\n  /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n  /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n  function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n\ninterface IUniswapV3Pool {\n  function observe(\n    uint32[] calldata secondsAgos\n  ) external\n    view\n    returns (\n      int56[] memory tickCumulatives,\n      uint160[] memory secondsPerLiquidityCumulativeX128s\n    );\n\n  function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n  function fee() external returns(uint24);\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}"},"Ownable2Step.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address internal _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    // /**\n    //  * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n    //  * Can only be called by the current owner.\n    //  */\n    // function transferOwnership(address newOwner) public virtual override onlyOwner {\n    //     _pendingOwner = newOwner;\n    //     emit OwnershipTransferStarted(owner(), newOwner);\n    // }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() external {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n}"},"OwnableDelayModule.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport {Ownable2Step} from \"./Ownable2Step.sol\";\n\ncontract OwnableDelayModule is Ownable2Step {\n  address internal delayModule;\n\n  constructor() {\n    delayModule = msg.sender;\n  }\n\n  function isDelayModule() internal view {\n    require(msg.sender == delayModule, \"NA\");\n  }\n\n  function setDelayModule(address _delayModule) external {\n    isDelayModule();\n    require(_delayModule != address(0), \"ODZ\");\n    delayModule = _delayModule;\n  }\n\n  function getDelayModule() external view returns (address) {\n    return delayModule;\n  }\n\n  /**\n   * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n   * Can only be called by the current owner.\n   */\n  function transferOwnership(address newOwner) public override {\n    isDelayModule();\n    _pendingOwner = newOwner;\n    emit OwnershipTransferStarted(owner(), newOwner);\n  }\n}\n"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler\u0027s defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}"},"SafeCast.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity\u0027s `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        require(value \u003c= type(uint248).max, \"SafeCast: value doesn\u0027t fit in 248 bits\");\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity\u0027s `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        require(value \u003c= type(uint240).max, \"SafeCast: value doesn\u0027t fit in 240 bits\");\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity\u0027s `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        require(value \u003c= type(uint232).max, \"SafeCast: value doesn\u0027t fit in 232 bits\");\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity\u0027s `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value \u003c= type(uint224).max, \"SafeCast: value doesn\u0027t fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity\u0027s `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        require(value \u003c= type(uint216).max, \"SafeCast: value doesn\u0027t fit in 216 bits\");\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity\u0027s `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        require(value \u003c= type(uint208).max, \"SafeCast: value doesn\u0027t fit in 208 bits\");\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity\u0027s `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        require(value \u003c= type(uint200).max, \"SafeCast: value doesn\u0027t fit in 200 bits\");\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity\u0027s `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        require(value \u003c= type(uint192).max, \"SafeCast: value doesn\u0027t fit in 192 bits\");\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity\u0027s `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        require(value \u003c= type(uint184).max, \"SafeCast: value doesn\u0027t fit in 184 bits\");\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity\u0027s `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        require(value \u003c= type(uint176).max, \"SafeCast: value doesn\u0027t fit in 176 bits\");\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity\u0027s `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        require(value \u003c= type(uint168).max, \"SafeCast: value doesn\u0027t fit in 168 bits\");\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity\u0027s `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        require(value \u003c= type(uint160).max, \"SafeCast: value doesn\u0027t fit in 160 bits\");\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity\u0027s `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        require(value \u003c= type(uint152).max, \"SafeCast: value doesn\u0027t fit in 152 bits\");\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity\u0027s `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        require(value \u003c= type(uint144).max, \"SafeCast: value doesn\u0027t fit in 144 bits\");\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity\u0027s `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        require(value \u003c= type(uint136).max, \"SafeCast: value doesn\u0027t fit in 136 bits\");\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity\u0027s `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value \u003c= type(uint128).max, \"SafeCast: value doesn\u0027t fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity\u0027s `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        require(value \u003c= type(uint120).max, \"SafeCast: value doesn\u0027t fit in 120 bits\");\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity\u0027s `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        require(value \u003c= type(uint112).max, \"SafeCast: value doesn\u0027t fit in 112 bits\");\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity\u0027s `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        require(value \u003c= type(uint104).max, \"SafeCast: value doesn\u0027t fit in 104 bits\");\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity\u0027s `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value \u003c= type(uint96).max, \"SafeCast: value doesn\u0027t fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity\u0027s `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        require(value \u003c= type(uint88).max, \"SafeCast: value doesn\u0027t fit in 88 bits\");\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity\u0027s `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        require(value \u003c= type(uint80).max, \"SafeCast: value doesn\u0027t fit in 80 bits\");\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity\u0027s `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        require(value \u003c= type(uint72).max, \"SafeCast: value doesn\u0027t fit in 72 bits\");\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity\u0027s `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value \u003c= type(uint64).max, \"SafeCast: value doesn\u0027t fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity\u0027s `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        require(value \u003c= type(uint56).max, \"SafeCast: value doesn\u0027t fit in 56 bits\");\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity\u0027s `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        require(value \u003c= type(uint48).max, \"SafeCast: value doesn\u0027t fit in 48 bits\");\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity\u0027s `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        require(value \u003c= type(uint40).max, \"SafeCast: value doesn\u0027t fit in 40 bits\");\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity\u0027s `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value \u003c= type(uint32).max, \"SafeCast: value doesn\u0027t fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity\u0027s `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        require(value \u003c= type(uint24).max, \"SafeCast: value doesn\u0027t fit in 24 bits\");\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity\u0027s `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value \u003c= type(uint16).max, \"SafeCast: value doesn\u0027t fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity\u0027s `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value \u003c= type(uint8).max, \"SafeCast: value doesn\u0027t fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     *\n     * _Available since v3.0._\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value \u003e= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity\u0027s `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        require(downcasted == value, \"SafeCast: value doesn\u0027t fit in 248 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity\u0027s `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        require(downcasted == value, \"SafeCast: value doesn\u0027t fit in 240 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity\u0027s `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        require(downcasted == value, \"SafeCast: value doesn\u0027t fit in 232 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity\u0027s `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        require(downcasted == value, \"SafeCast: value doesn\u0027t fit in 224 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity\u0027s `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        require(downcasted == value, \"SafeCast: value doesn\u0027t fit in 216 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity\u0027s `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        require(downcasted == value, \"SafeCast: value doesn\u0027t fit in 208 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity\u0027s `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        require(downcasted == value, \"SafeCast: value doesn\u0027t fit in 200 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity\u0027s `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        require(downcasted == value, \"SafeCast: value doesn\u0027t fit in 192 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity\u0027s `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        require(downcasted == value, \"SafeCast: value doesn\u0027t fit in 184 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity\u0027s `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        require(downcasted == value, \"SafeCast: value doesn\u0027t fit in 176 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity\u0027s `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        require(downcasted == value, \"SafeCast: value doesn\u0027t fit in 168 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity\u0027s `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        require(downcasted == value, \"SafeCast: value doesn\u0027t fit in 160 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity\u0027s `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        require(downcasted == value, \"SafeCast: value doesn\u0027t fit in 152 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity\u0027s `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        require(downcasted == value, \"SafeCast: value doesn\u0027t fit in 144 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity\u0027s `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        require(downcasted == value, \"SafeCast: value doesn\u0027t fit in 136 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity\u0027s `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        require(downcasted == value, \"SafeCast: value doesn\u0027t fit in 128 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity\u0027s `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        require(downcasted == value, \"SafeCast: value doesn\u0027t fit in 120 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity\u0027s `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        require(downcasted == value, \"SafeCast: value doesn\u0027t fit in 112 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity\u0027s `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        require(downcasted == value, \"SafeCast: value doesn\u0027t fit in 104 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity\u0027s `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        require(downcasted == value, \"SafeCast: value doesn\u0027t fit in 96 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity\u0027s `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        require(downcasted == value, \"SafeCast: value doesn\u0027t fit in 88 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity\u0027s `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        require(downcasted == value, \"SafeCast: value doesn\u0027t fit in 80 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity\u0027s `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        require(downcasted == value, \"SafeCast: value doesn\u0027t fit in 72 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity\u0027s `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        require(downcasted == value, \"SafeCast: value doesn\u0027t fit in 64 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity\u0027s `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        require(downcasted == value, \"SafeCast: value doesn\u0027t fit in 56 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity\u0027s `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        require(downcasted == value, \"SafeCast: value doesn\u0027t fit in 48 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity\u0027s `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        require(downcasted == value, \"SafeCast: value doesn\u0027t fit in 40 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity\u0027s `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        require(downcasted == value, \"SafeCast: value doesn\u0027t fit in 32 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity\u0027s `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        require(downcasted == value, \"SafeCast: value doesn\u0027t fit in 24 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity\u0027s `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        require(downcasted == value, \"SafeCast: value doesn\u0027t fit in 16 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity\u0027s `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        require(downcasted == value, \"SafeCast: value doesn\u0027t fit in 8 bits\");\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     *\n     * _Available since v3.0._\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value \u003c= uint256(type(int256).max), \"SafeCast: value doesn\u0027t fit in an int256\");\n        return int256(value);\n    }\n}\n"},"SafeERC20.sol":{"content":"    // SPDX-License-Identifier: MIT\n    // OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\n    pragma solidity ^0.8.0;\n\n    import \"./IERC20.sol\";\n    import \"./draft-IERC20Permit.sol\";\n    import \"./Address.sol\";\n\n    /**\n    * @title SafeERC20\n    * @dev Wrappers around ERC20 operations that throw on failure (when the token\n    * contract returns false). Tokens that return no value (and instead revert or\n    * throw on failure) are also supported, non-reverting calls are assumed to be\n    * successful.\n    * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n    * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n    */\n    library SafeERC20 {\n        using Address for address;\n\n        function safeTransfer(\n            IERC20 token,\n            address to,\n            uint256 value\n        ) internal {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n        }\n\n        function safeTransferFrom(\n            IERC20 token,\n            address from,\n            address to,\n            uint256 value\n        ) internal {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n        }\n\n        /**\n        * @dev Deprecated. This function has issues similar to the ones found in\n        * {IERC20-approve}, and its usage is discouraged.\n        *\n        * Whenever possible, use {safeIncreaseAllowance} and\n        * {safeDecreaseAllowance} instead.\n        */\n        function safeApprove(\n            IERC20 token,\n            address spender,\n            uint256 value\n        ) internal {\n            // safeApprove should only be called when setting an initial allowance,\n            // or when resetting it to zero. To increase and decrease it, use\n            // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\n            require(\n                (value == 0) || (token.allowance(address(this), spender) == 0),\n                \"SafeERC20: approve from non-zero to non-zero allowance\"\n            );\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n        }\n\n        function safeIncreaseAllowance(\n            IERC20 token,\n            address spender,\n            uint256 value\n        ) internal {\n            uint256 newAllowance = token.allowance(address(this), spender) + value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n\n        function safeDecreaseAllowance(\n            IERC20 token,\n            address spender,\n            uint256 value\n        ) internal {\n            unchecked {\n                uint256 oldAllowance = token.allowance(address(this), spender);\n                require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\n                uint256 newAllowance = oldAllowance - value;\n                _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n            }\n        }\n\n        function safePermit(\n            IERC20Permit token,\n            address owner,\n            address spender,\n            uint256 value,\n            uint256 deadline,\n            uint8 v,\n            bytes32 r,\n            bytes32 s\n        ) internal {\n            uint256 nonceBefore = token.nonces(owner);\n            token.permit(owner, spender, value, deadline, v, r, s);\n            uint256 nonceAfter = token.nonces(owner);\n            require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n        }\n\n        /**\n        * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n        * on the return value: the return value is optional (but if data is returned, it must not be false).\n        * @param token The token targeted by the call.\n        * @param data The call data (encoded using abi.encode or one of its variants).\n        */\n        function _callOptionalReturn(IERC20 token, bytes memory data) private {\n            // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\n            // we\u0027re implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n            // the target address contains contract code and also asserts for success in the low-level call.\n\n            bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n            if (returndata.length \u003e 0) {\n                // Return data is optional\n                require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n            }\n        }\n    }"}}