{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IERC20Metadata.sol\";\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn\u0027t required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address =\u003e uint256) private _balances;\r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        \r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it\u0027s overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``\u0027s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount \u003c= accountBalance \u003c= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance \u003e= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n"},"IUniswapV2Factory.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Factory {\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n"},"IUniswapV2Router.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Router {\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] memory path) external view returns (uint256[] memory amounts);\r\n    function factory() external pure returns (address);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n        function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n"},"Memecoin.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IUniswapV2Router.sol\";\nimport \"./IUniswapV2Factory.sol\";\nimport \"./ERC20.sol\";\n\ncontract MemeCoin is ERC20 {\n    uint256 public constant TOTAL_SUPPLY = 1000000000 * 10**18; // Total supply tokens = 1bn\n    uint256 public constant TOTAL_BUY_TOKENS = 800000000 * 10**18; // Total tokens to buy = 800mn\n    uint256 public constant LIQUIDITY_TOKENS = 200000000 * 10**18; // Total tokens to for LP = 200mn\n    uint256 public constant BUY_PRICE_DIFFERENCE_PERCENT = 1000; // Difference in buy price as percentage\n    uint256 public constant FEE_PERCENTAGE = 2; // Fee percentage\n    uint256 public constant TARGET_LIQUIDITY = 4 * 10**18; // Target liquidity in ETH, assuming 18 decimals\n    address payable public constant REVENUE_ACCOUNT = payable(0xCDE357ABBdf15Da7CCE4B51CE70a1d0F08DfB782); // Fee collection address\n    uint256 public sanityTokenAmount = 100 * 10 ** 18;\n\n    IUniswapV2Router public uniswapRouter;\n    address public lpAddress;\n    string public picture;\n    address public taxWallet;\n    bool public listed;\n    bool public degen;\n    uint256 public totalETHBought; // Total ETH paid for tokens buying\n    uint256 public totalTokensBought; // Total tokens bought\n    uint256 public maxWalletAmount; // Total amount of tokens a wallet can hold\n    uint256 public buyTax;\n    uint256 public sellTax;\n    uint256 public devTaxTokens;// Tax tokens accumulated off all taxes {buy \u0026 sell}\n\n    mapping(address =\u003e uint256) public contributions; // Track ETH contributions\n    mapping(address =\u003e uint256) public tokens; // Track bought tokens\n\n    constructor(\n        address _router,\n        address _taxWallet,\n        uint256 _maxWalletAmount,\n        uint256 _buyTax,\n        uint256 _sellTax,\n        string memory _name,\n        string memory _ticker,\n        string memory _picture,\n        bool _degen\n    ) ERC20(_name, _ticker) {\n        uniswapRouter = IUniswapV2Router(_router);\n        if (_maxWalletAmount == 0) {\n            maxWalletAmount = type(uint256).max;//No Wallet limit\n        } else if(_maxWalletAmount == 1){\n            maxWalletAmount = (TOTAL_SUPPLY * 5) / 1000;//0.5% Wallet limit\n        } else if(_maxWalletAmount == 2){\n            maxWalletAmount = TOTAL_SUPPLY * 1 / 100; //1% Wallet limit\n        }\n        require(_maxWalletAmount == 0 || _maxWalletAmount == 1 || _maxWalletAmount == 2,\u0027Invalid Max Wallet Amount\u0027);\n        picture = _picture;\n        taxWallet = _taxWallet;\n        buyTax = _buyTax;\n        sellTax = _sellTax;\n        degen = _degen;\n        listed = false;\n        totalETHBought = 0;\n\n        //Create Pair\n        lpAddress = IUniswapV2Factory(uniswapRouter.factory()).createPair(address(this), uniswapRouter.WETH());\n        \n        //Max approve token for Router\n        _approve(address(this), address(uniswapRouter), type(uint256).max);\n\n        _mint(address(this), TOTAL_SUPPLY);\n    }\n\n\n    modifier onlyTaxWallet() {\n        require(tx.origin == taxWallet,\"Unauthorized Reset Attempt\");\n        _;\n    }\n\n\n    // @notice transfer function that handles all the buy and sell tax logic.\n    // @param sender this is the address of the user where tokens are sent from.\n    // @param recepient this the address of the user receiving the tokens.\n    // @param amount this is the amount of tokens to be sent.\n    function _transfer(address sender, address recipient, uint256 amount) internal override {\n            uint256 tax;\n            address _weth = uniswapRouter.WETH();\n        if (listed){\n            updateMaxWalletAmount(lpAddress,_weth);\n            \n            //Buy tax\n            if (buyTax \u003e 0 \u0026\u0026 sender == lpAddress \u0026\u0026 recipient != taxWallet){\n                    tax = amount * buyTax / 100;\n                    uint256 taxedAmount = amount - tax;\n                    devTaxTokens = devTaxTokens + tax;\n                    amount = taxedAmount;\n                    super._transfer(sender, address(this), tax);\n            }\n\n            //Sell tax\n            if (sellTax \u003e 0 \u0026\u0026 recipient == lpAddress \u0026\u0026 sender!= taxWallet){\n                    tax = amount * sellTax / 100;\n                    uint256 taxedAmount = amount - tax;\n                    devTaxTokens = devTaxTokens + tax;\n                    amount = taxedAmount;\n                    super._transfer(sender, address(this), tax);\n            }\n\n            if (recipient != taxWallet \u0026\u0026 recipient != lpAddress \u0026\u0026 recipient != address(0x000000000000000000000000000000000000dEaD)) {\n                require(balanceOf(address(recipient)) + amount \u003c= maxWalletAmount, \"Transfer amount exceeds the max wallet amount\");\n            }\n\n\n            super._transfer(sender, recipient, amount);\n            if(sender != lpAddress \u0026\u0026 recipient != lpAddress){\n                _swapAndLiquify();\n            }\n        }else{\n            \n            \n            if (recipient != taxWallet \u0026\u0026 recipient != address(this) \u0026\u0026 recipient != lpAddress) {\n                \n                require(balanceOf(address(recipient)) + amount \u003c= maxWalletAmount, \"Transfer amount exceeds the max wallet amount\");\n            }\n\n            super._transfer(sender, recipient, amount);\n\n            //Make sure only contract can addLiquidty\n            if(recipient == lpAddress){\n                require(sender == address(this),\"Invalid AddLiquidty Attempt\");\n            }\n        }\n    }\n\n    // @notice allows a user buy a memecoin by sending ETHER.\n    // @param buyer this is the address of the user buyingb the tokens.\n    // @param slippageAmount this is the minimum amount allowed by user to be received during the purchase.\n    function buyTokens(address buyer,uint256 slippageAmount) external payable {\n        require(!listed, \"Liquidity is already added to Uniswap\");\n        require(msg.value \u003e 0, \"Send ETH to buy tokens\");\n\n        uint256 fee = msg.value * FEE_PERCENTAGE / 100;\n        uint256 ethAmount = msg.value - fee;\n\n        uint256 tokenAmount = calculateTokenAmount(ethAmount);\n        uint256 currentPrice = tokenAmount/ethAmount;\n\n        uint256 finalprice;\n\n        if (_getRemainingAmount() == msg.value) {\n\n            finalprice = currentPrice;\n    \n            if(tokenAmount \u003e (TOTAL_BUY_TOKENS - totalTokensBought)){\n                tokenAmount = TOTAL_BUY_TOKENS - totalTokensBought;\n            }\n        }\n\n        totalTokensBought += tokenAmount;    \n        contributions[buyer] += ethAmount;\n    \n\n        if(finalprice == 0){\n            require(tokenAmount \u003e= slippageAmount, \"Slippage Amount Restriction\");\n        }\n\n        if(buyTax \u003e 0 \u0026\u0026 buyer != taxWallet){\n            uint256 tax = tokenAmount * buyTax / 100;\n            uint256 buyerTokens = tokenAmount - tax;\n            devTaxTokens = devTaxTokens + tax;\n            tokens[buyer] += buyerTokens;\n            tokenAmount = buyerTokens;\n        }else{\n            tokens[buyer] += tokenAmount;\n        }\n\n        totalETHBought += ethAmount;\n\n        _transfer(address(this), buyer, tokenAmount);\n        bool success;\n        (success, ) = REVENUE_ACCOUNT.call{value: fee}(\"\");\n        require(success, \"Transfer failed\");\n\n        if (address(this).balance \u003e= TARGET_LIQUIDITY \u0026\u0026 !listed) {\n            _addLiquidity();\n            _burnRemainingTokens();\n        }\n    }\n\n    // @notice allows a user sell a memecoin.\n    // @param seller this is the address of the user selling tokens.\n    // @param tokenAmount this is the amount of tokens a user wants to sell.\n    function sellTokens(address seller,uint256 tokenAmount) external {\n        require(!listed, \"Liquidity is already added to Uniswap\");\n        require(tokenAmount \u003e 0, \"Amount must be greater than 0\");\n\n        uint256 ethAmount = calculateEthAmount(seller,tokenAmount);\n\n        if ((balanceOf(address(this)) + tokenAmount) == TOTAL_SUPPLY) {\n            ethAmount = address(this).balance;\n\n            if(!degen){\n                contributions[seller] = 0;\n            }\n\n            totalETHBought = 0;\n        } else {\n\n            if(!degen){\n                \n                    contributions[seller] -= ethAmount;\n                    totalETHBought -= ethAmount;\n            }else{\n                if(contributions[seller] \u003c ethAmount){\n\n                    uint subAmount;\n                    if(tokenAmount \u003e 0 \u0026\u0026 tokenAmount \u003c= (tokens[seller] * 25 / 100)){\n                        subAmount = contributions[seller] * 25 / 100;\n                    } else if (tokenAmount \u003e= (tokens[seller] * 25 / 100) \u0026\u0026 tokenAmount \u003c= (tokens[seller] * 50 / 100)){\n                        subAmount = contributions[seller] * 50 / 100;\n                    } else if (tokenAmount \u003e= (tokens[seller] * 50 / 100) \u0026\u0026 tokenAmount \u003c= (tokens[seller] * 75 / 100)){\n                        subAmount = contributions[seller] * 75 / 100;\n                    } else if (tokenAmount \u003e= (tokens[seller] * 75 / 100) \u0026\u0026 tokenAmount \u003c= (tokens[seller] * 100 / 100)){\n                        subAmount = contributions[seller] * 100 / 100;\n                    }\n                        contributions[seller] = contributions[seller] - subAmount;\n                        totalETHBought -= ethAmount;                \n                }else{\n                  \n                        totalETHBought -= ethAmount;\n                }\n            }\n\n        }\n\n       uint256 fee = ethAmount * FEE_PERCENTAGE / 100;\n\n       if(sellTax \u003e 0 \u0026\u0026 seller != taxWallet){\n            uint256 tax = tokenAmount * sellTax / 100;\n            uint256 sellerTokens = tokenAmount - tax;\n            tokens[seller] -= tokenAmount;\n            devTaxTokens = devTaxTokens + tax;\n            tokenAmount = sellerTokens;\n        }else{\n            tokens[seller] -= tokenAmount;\n        }\n\n\n        totalTokensBought -= tokenAmount; \n        \n        _transfer(seller, address(this), tokenAmount);\n        bool success;\n        (success, ) = seller.call{value: ethAmount - fee}(\"\");\n        require(success, \"Transfer failed\");\n        (success, ) = REVENUE_ACCOUNT.call{value: fee}(\"\");\n        require(success, \"Transfer failed\");\n\n    }\n\n    // @notice call to get the remaining ETHER amount required to be spent by users for the memecoin to be listed.\n    // @returns A uint value indicating the remaining ETHER amount required to be spent by users for the memecoin to be listed.\n    function getRemainingAmount() public view returns (uint256) {\n        require(TARGET_LIQUIDITY \u003e address(this).balance, \"Liquidity target exceeded\");\n\n        return _getRemainingAmount();\n    }\n\n    // @notice allows the user calculate the minimum amount required to be received during a buy.\n    // @param ethAmount this of ETHER to be used for the buy.\n    // @param slippageAllowance this is the amount in percentage  used to calculate slippage.\n    function slippage(uint256 ethAmount,uint256 slippageAllowance) public view returns(uint256) {\n        uint256 fee = ethAmount * FEE_PERCENTAGE / 100;\n        ethAmount = ethAmount - fee;\n         uint256 slippageAmount = calculateTokenAmount(ethAmount);\n        if (buyTax \u003e 0) {\n            uint256 tax = slippageAmount * buyTax / 100;\n            slippageAmount = slippageAmount - tax;\n        }\n        slippageAllowance = slippageAmount * slippageAllowance / 100;\n        slippageAmount = slippageAmount - slippageAllowance;\n        return slippageAmount;\n    }\n\n    // @notice call to get the remaining ETHER amount required to be spent by users for the memecoin to be listed.\n    // @param ethAmount this an amount of ETHER to be used to buy.\n    // @returns A uint value indicating the token amount a user would receive.\n    function calculateTokenAmount(uint256 ethAmount) public view returns (uint256) {\n        require(totalETHBought + ethAmount \u003c= TARGET_LIQUIDITY, \"Liquidity target exceeded\");\n\n        uint256 initialTokenPrice = _initialTokenPrice();\n        uint256 tokenPrice = initialTokenPrice + ((initialTokenPrice * BUY_PRICE_DIFFERENCE_PERCENT / 100) * (totalETHBought + (ethAmount / 6)) / TARGET_LIQUIDITY);\n        return ethAmount * 10**18 / tokenPrice;\n    }\n\n    // @notice call to get the ETHER amount sent to a user when tokens are sold.\n    // @param user this is the address of the user.\n    // @param tokenAmount this the amount of tokens a user want to sell.\n    // @returns A uint value indicating the ETHER amount a user would receive.\n    function calculateEthAmount(address user,uint256 tokenAmount) public view returns (uint256) {\n        uint256 userTokens = tokens[user];\n        require(userTokens \u003c= tokenAmount, \"Insufficient user token balance\");\n\n        uint256 value;\n        if(!degen){\n\n            return contributions[user] * tokenAmount / userTokens;\n        }else{\n            if(contributions[user] \u003c totalETHBought){\n                value = totalETHBought - contributions[user];\n                value = value / 5;\n                value = value + contributions[user];\n            }else{\n                value = totalETHBought;\n            }\n            return value * tokenAmount / userTokens;\n        }\n    }\n\n\n    // @notice allows the creator of a memecoin set the minimum amount required to be met before a swap of the tax tokens occurs.\n    // @param value this is the minimum amount required to be met before a swap of the tax tokens.\n    function setSanityTokenAmount(uint256 newValue) external onlyTaxWallet {\n        sanityTokenAmount = newValue * 10 ** 18;\n    }\n\n\n    // @notice allows the creator of a memecoin tax from the token.\n    function removeTaxFees() external onlyTaxWallet {\n        buyTax = 0;\n        sellTax = 0;\n    }\n\n\n    // @notice function that adds liqudity to Uniswap once the Target Liquidity is met.\n    function _addLiquidity() internal {\n\n        listed = true;\n        uniswapRouter.addLiquidityETH{ value: address(this).balance }(\n            address(this),\n            LIQUIDITY_TOKENS,\n            0,\n            0,\n            address(this),\n            block.timestamp\n        );\n\n        uint256 amount = IERC20(lpAddress).balanceOf(address(this));\n\n        //Burn LP\n        IERC20(lpAddress).transfer(address(0x000000000000000000000000000000000000dEaD),amount);\n\n        _swapAndLiquify();\n    }\n\n    // @notice function that burns the remaining tokens in the contract after liquidity is added.\n    function _burnRemainingTokens() internal  {\n        \n        uint256 amount;\n        if(devTaxTokens \u003e 0){\n            amount = IERC20(address(this)).balanceOf(address(this)) - devTaxTokens;\n        }else{\n            amount = IERC20(address(this)).balanceOf(address(this));\n        }\n\n        //Burn Remaining Tokens\n        IERC20(address(this)).transfer(address(0x000000000000000000000000000000000000dEaD),amount);\n    }\n\n\n    // @notice fucntion that update the maxWalletAmount once the 6 ETHER requirement is met.\n    function updateMaxWalletAmount(address _lpToken,address _weth) internal {\n        if(maxWalletAmount == type(uint256).max) return;\n\n        uint256 amount = IERC20(_weth).balanceOf(address(_lpToken));\n\n        if (amount \u003e= 6 ether) {\n            maxWalletAmount = type(uint256).max;\n        }\n    }\n    \n    // @notice call to get the remaining ETHER amount required to be spent by users for the memecoin to be listed.\n    // @returns A uint value indicating the remaining ETHER amount required to be spent by users for the memecoin to be listed.\n    function _getRemainingAmount() internal view returns (uint256) {\n    \n        return (TARGET_LIQUIDITY - totalETHBought) * 100 / (100 - FEE_PERCENTAGE);\n    }\n\n\n    // Get initial ETH normalized price per token\n    function _initialTokenPrice() internal pure returns (uint256){\n \n        return TARGET_LIQUIDITY * 10**18 / ((TOTAL_BUY_TOKENS * BUY_PRICE_DIFFERENCE_PERCENT) / 375);      \n    }\n\n    // @notice function that swaps devTaxToken balance for ETHER.\n    function _swapAndLiquify() private {\n\n        if(devTaxTokens \u003c sanityTokenAmount) return;\n        _swapTokensForEth(devTaxTokens);\n        devTaxTokens = 0;\n        \n    }\n\n    // @notice function that executes the swaps devTaxToken balance for ETHER.\n    function _swapTokensForEth(uint256 tokenAmount) private  {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapRouter.WETH();\n        uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            taxWallet,\n            (block.timestamp)\n        );\n    }\n}"},"NewBullaFunDeployer.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./Memecoin.sol\";\n\ncontract BullaFunDeployer {\n    struct TokenInfo {\n        address tokenAddress;\n        address creator;\n        string name;\n        string ticker;\n        string picture;\n        uint256 buyTax;\n        uint256 sellTax;\n        uint256 tokenId;\n        bool degen;\n    }\n\n    uint256 public constant FEE_PERCENTAGE = 2; // Fee percentage\n    address internal constant uniswapRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // Uniswap address\n    uint64 public tokenCount;\n\n    TokenInfo[] public tokens;\n\n    event TokenCreated(\n        address indexed tokenAddress,\n        address indexed creator,\n        string name,\n        string ticker,\n        string picture,\n        uint256 buyTax,\n        uint256 sellTax,\n        uint256 tokenId,\n        bool degen\n    );\n\n    event TokenBuy(\n        address indexed buyerAddress,\n        address indexed tokenAddress,\n        uint256 indexed ethAmountAfterFee,\n        uint256 tokenAmountReceived,\n        bool listedStatus\n    );\n\n    event TokenSell(\n        address indexed sellerAddress,\n        address indexed tokenAddress,\n        uint256 indexed ethAmountReceived,\n        uint256 tokenAmountSent\n    );\n\n\n    // @notice allows a user deploy a memecoin and buy the same in the same transaction.\n    // @dev make sure ETHER is sent with this call if _buy is true.\n    // @param _name this is the name of the deployed memecoin.\n    // @param _ticker this is the symbol of the deployed memecoin.\n    // @param _picture this is the location(typically a link) of the deployed memecoin picture.\n    // @param _maxWalletAmount this is the maxAmount a wallet can hold.\n    // @param _buyTax this is amount set for buyTax.\n    // @param _sellTax this is amount set for sellTax.\n    // @param _tokenId this is the id to keep tarct of each token deployed.\n    // @param _buy this is a boolean set to true is the user wants to buy on deployement or false if otherwise.\n    // @param_degen this is a boolean set to true is the user wants to deploye a degen type of memecoin or false if otherwise.\n    function deployAndBuy(\n        string memory _name,\n        string memory _ticker,\n        string memory _picture,\n        uint256 _maxWalletAmount,\n        uint256 _buyTax,\n        uint256 _sellTax,\n        uint256 _tokenId,\n        bool _buy,\n        bool _degen\n        ) external payable {\n\n        address tokenAddress = address(new MemeCoin(\n                uniswapRouter,\n                msg.sender,\n                _maxWalletAmount,\n                _buyTax,\n                _sellTax,\n                _name,\n                _ticker,\n                _picture,\n                _degen\n        ));\n\n        TokenInfo memory newToken = TokenInfo({\n            tokenAddress: tokenAddress,\n            creator: msg.sender,\n            name: _name,\n            ticker: _ticker,\n            picture: _picture,\n            buyTax: _buyTax,\n            sellTax: _sellTax,\n            tokenId: _tokenId,\n            degen: _degen\n        });\n\n        tokens.push(newToken);\n        tokenCount = tokenCount + 1;\n\n        emit TokenCreated(\n            tokenAddress,\n            msg.sender,\n            _name,\n            _ticker,\n            _picture,\n            _buyTax,\n            _sellTax,\n            _tokenId,\n            _degen\n        );\n\n        if(_buy){\n\n            MemeCoin memeCoin = MemeCoin(tokenAddress);\n            uint256 fee = msg.value * FEE_PERCENTAGE / 100;\n            uint256 ethAmount = msg.value - fee;\n            uint256 tokenAmount = calculateTokenAmount(ethAmount,address(memeCoin));\n            memeCoin.buyTokens{value: msg.value}(msg.sender,0);\n\n            bool listed = memeCoin.listed();\n            emit TokenBuy(msg.sender,tokenAddress,ethAmount,tokenAmount,listed);\n        }\n    }\n\n\n    // @notice allows a user buy a memecoin by sending ETHER.\n    // @param _memeCoinAddress this is the address of the memecoin to be bought.\n    // @param slippageAmount this is the minimum amount allowed by user to be received during the purchase.\n    function buyTokens(address _memeCoinAddress,uint256 slippageAmount) external payable {\n        MemeCoin memeCoin = MemeCoin(_memeCoinAddress);\n        uint256 fee = msg.value * FEE_PERCENTAGE / 100;\n        uint256 ethAmount = msg.value - fee;\n        uint256 tokenAmount = calculateTokenAmount(ethAmount,address(memeCoin));\n        memeCoin.buyTokens{value: msg.value}(msg.sender,slippageAmount);\n\n        bool listed = memeCoin.listed();\n\n        emit TokenBuy(msg.sender,_memeCoinAddress,ethAmount,tokenAmount,listed);\n    }\n\n    // @notice allows a user sell a memecoin.\n    // @param _memeCoinAddress this is the address of the memecoin.\n    // @param tokenAmount this is the amount of tokens a user wants to sell.\n    function sellTokens(uint256 tokenAmount,address _memeCoinAddress) external {\n        MemeCoin memeCoin = MemeCoin(_memeCoinAddress);\n        uint256 ethAmount = calculateEthAmount(msg.sender,tokenAmount,address(memeCoin));\n        memeCoin.sellTokens(msg.sender,tokenAmount);\n\n        emit TokenSell(msg.sender,_memeCoinAddress,ethAmount,tokenAmount);\n    }\n\n    // @notice allows the creator of a memecoin set the minimum amount required to be met before a swap of the tax tokens occurs.\n    // @param value this is the minimum amount required to be met before a swap of the tax tokens.\n    // @param _memeCoinAddress this is the address of the memecoin.\n    function setSanityTokenAmount(uint256 value,address _memeCoinAddress) external {\n        MemeCoin memeCoin = MemeCoin(_memeCoinAddress);\n        memeCoin.setSanityTokenAmount(value);\n    }\n\n    // @notice allows the creator of a memecoin tax from the token.\n    // @param _memeCoinAddress this is the address of the memecoin.\n    function removeTaxFees(address _memeCoinAddress) external {\n        MemeCoin memeCoin = MemeCoin(_memeCoinAddress);\n        memeCoin.removeTaxFees();\n    }\n\n    // @notice allows the user calculate the minimum amount required to be received during a buy.\n    // @param _memeCoinAddress this is the address of the memecoin.\n    // @param ethAmount this of ETHER to be used for the buy.\n    // @param slippageAllowance this is the amount in percentage  used to calculate slippage.\n    function calculateSlippage(address _memeCoinAddress,uint256 ethAmount,uint256 slippageAllowance) external view returns (uint256) {\n        MemeCoin memeCoin = MemeCoin(_memeCoinAddress);\n        return memeCoin.slippage(ethAmount,slippageAllowance);\n    }\n\n    // @notice call to check the listed status of a memecoin.\n    // @param _memeCoinAddress this is the address of the memecoin.\n    // @returns A boolean value indicating whether the memecoin is listed.\n    function getListedStatus(address _memeCoinAddress) external view returns (bool) {\n        MemeCoin memeCoin = MemeCoin(_memeCoinAddress);\n        return memeCoin.listed();\n    }\n\n    // @notice call to check the amount of ETHER a user has used to buy the memecoin. must be called by a user, thus the `msg.sender` passed into the call.\n    // @param _memeCoinAddress this is the address of the memecoin.\n    // @returns A uint value indicating the user ETHER spent.\n    function getContributions(address _memeCoinAddress) external view returns (uint256) {\n        MemeCoin memeCoin = MemeCoin(_memeCoinAddress);\n        return memeCoin.contributions(msg.sender);\n    }\n\n    // @notice call to check the memecoin tokens balance of a user. must be called by a user, thus the `msg.sender` passed into the call.\n    // @param _memeCoinAddress this is the address of the memecoin.\n    // @returns A uint value indicating the user memecoin tokens.\n    function getTokens(address _memeCoinAddress) external view returns (uint256) {\n        MemeCoin memeCoin = MemeCoin(_memeCoinAddress);\n        return memeCoin.tokens(msg.sender);\n    }\n\n    // @notice call to check the total ETHER amount spent by users to buy memecoin tokens.\n    // @param _memeCoinAddress this is the address of the memecoin.\n    // @returns A uint value indicating the total ETHER amount spent by users.\n    function getTotalEthBought(address _memeCoinAddress) external view returns (uint256) {\n        MemeCoin memeCoin = MemeCoin(_memeCoinAddress);\n        return memeCoin.totalETHBought();\n    }\n\n    // @notice call to get the remaining ETHER amount required to be spent by users for the memecoin to be listed.\n    // @param _memeCoinAddress this is the address of the memecoin.\n    // @returns A uint value indicating the remaining ETHER amount required to be spent by users for the memecoin to be listed.\n    function getRemainingAmount(address _memeCoinAddress) external view returns (uint256) {\n        MemeCoin memeCoin = MemeCoin(_memeCoinAddress);\n        return memeCoin.getRemainingAmount();\n    }\n\n    // @notice call to get the remaining ETHER amount required to be spent by users for the memecoin to be listed.\n    // @param ethAmount this an amount of ETHER to be used to buy.\n    // @param _memeCoinAddress this is the address of the memecoin to be bought.\n    // @returns A uint value indicating the token amount a user would receive.\n    function calculateTokenAmount(uint256 ethAmount,address _memeCoinAddress) public view returns (uint256) {\n        MemeCoin memeCoin = MemeCoin(_memeCoinAddress);\n        return memeCoin.calculateTokenAmount(ethAmount);\n    }\n\n    // @notice call to get the ETHER amount sent to a user when tokens are sold.\n    // @param user this is the address of the user.\n    // @param tokenAmount this the amount of tokens a user want to sell.\n    // @param _memeCoinAddress this is the address of the memecoin to be bought.\n    // @returns A uint value indicating the ETHER amount a user would receive.\n    function calculateEthAmount(address user,uint256 tokenAmount,address _memeCoinAddress) public view returns (uint256) {\n        MemeCoin memeCoin = MemeCoin(_memeCoinAddress);\n        return memeCoin.calculateEthAmount(user,tokenAmount);\n    }\n\n    // @notice call to get the address of a memecoin token.\n    // @param index this is index of memcoin address stored on this contract.\n    // @returns An address of a deplyed memecoin.\n    function getTokenAddress(uint256 index) public view returns (address) {\n        require(index \u003c tokens.length, \"Invalid Token index\");\n\n        return tokens[index].tokenAddress;\n    }\n}\n"}}