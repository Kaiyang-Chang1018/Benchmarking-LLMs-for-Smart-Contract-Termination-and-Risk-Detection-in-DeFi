{"Automatix.sol":{"content":"// SPDX-License-Identifier: MIT\n\n/*\nAutomatix: An Architectural Intelligence\nAutomatix aims to make AI and ML technologies simple, affordable, and accessible, breaking down barriers \nand empowering everyone to use advanced AI.\n\nWebsite: https://automatixlabs.io\nDapp: https://app.automatixlabs.com/\nTelegram: http://t.me/automatixlabs\nX/Twitter: https://x.com/automatix0123\nInstagram: https://www.instagram.com/automatix0123\nTiktok: https://www.tiktok.com/@automatix0123\nYoutube: https://www.youtube.com/@automatix0123\n*/\n\npragma solidity 0.8.19;\n\nimport \"./Context.sol\";\nimport \"./IERC20.sol\";\nimport \"./Ownable.sol\";\nimport \"./IUniswapV2Factory.sol\";\nimport \"./IUniswapV2Router02.sol\";\n\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003c= a, errorMessage);\n            return a - b;\n        }\n    }\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { //Contract By Techaddict\n        unchecked {\n            require(b \u003e 0, errorMessage);\n            return a / b;\n        }\n    }\n}\n\n\nlibrary Address {\n    \n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size \u003e 0;\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n    \n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n    \n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n    \n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n    \n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n    \n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n    \n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            if (returndata.length \u003e 0) {\n                 assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\ncontract AUTOMATIX is Context, IERC20, Ownable {\n    uint256 public buyTaxWhole; // Whole number part of buy tax\n    uint256 public buyTaxFraction; // Fractional part of buy tax (up to 2 decimal places)\n    uint256 public sellTaxWhole; // Whole number part of sell tax\n    uint256 public sellTaxFraction; // Fractional part of sell tax (up to 2 decimal places)\n\n    uint8 private constant _decimals = 18;\n    uint256 private constant MAX = ~uint256(0);\n\n    uint256 private _totalSupply;\n    uint256 private ONE_PERCENT;\n    uint256 private MINIMUM_SWAP_AMOUNT;\n    uint256 public maxSwapAmount;\n    uint256 public maxTransactionAmount;\n    uint256 private maxWalletAmount;\n\n\n    mapping(address =\u003e uint256) private _isLimitExempt;\n    mapping(address =\u003e uint256) private _balance;\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    string private constant _name = \"AUTOMATIX\";\n    string private constant _symbol = \"ATX\";\n\n    IUniswapV2Router02 private uniswapV2Router;\n    address public uniswapV2Pair;\n    address immutable public DevAdd;\n    address immutable public OpAdd;\n\n    uint256 private _counterVar;\n    bool private isLaunched = false;\n    bool private _tradeStatus;\n\n    constructor(\n        uint256 _buyTaxWhole,\n        uint256 _buyTaxFraction,\n        uint256 _sellTaxWhole,\n        uint256 _sellTaxFraction,\n        uint256 totalSupply_\n    ) {\n        buyTaxWhole = _buyTaxWhole;\n        buyTaxFraction = _buyTaxFraction;\n        sellTaxWhole = _sellTaxWhole;\n        sellTaxFraction = _sellTaxFraction;\n\n        _totalSupply = totalSupply_ * 10**_decimals;\n        ONE_PERCENT = (_totalSupply)/100;\n        MINIMUM_SWAP_AMOUNT = ONE_PERCENT*4/100;\n        maxSwapAmount = ONE_PERCENT*5/10;\n        maxTransactionAmount = ONE_PERCENT*15/10;\n        maxWalletAmount = ONE_PERCENT*15/10;\n\n        OpAdd  = 0x256C3BdFD3203adFFC61A1dCEdA24A7363D80917;\n        DevAdd = 0x806515c368f205EA1Bb76f7920451Ff74a45ae8a;        \n\n        _balance[msg.sender] = _totalSupply;\n        _isLimitExempt[DevAdd ] = 1;\n        _isLimitExempt[OpAdd ] = 1;\n        _isLimitExempt[msg.sender] = 1;\n        _isLimitExempt[address(this)] = 1;\n\n        _counterVar = 0;\n        _tradeStatus = false;\n\n        emit Transfer(address(0), _msgSender(), _totalSupply);\n    }\n\n    function name() public pure returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balance[account];\n    }\n\n    function transfer(address recipient, uint256 amount)public override returns (bool){\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256){\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool){\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        if(currentAllowance != type(uint256).max) { \n            require(\n                currentAllowance \u003e= amount, \"ERC20: transfer amount is more than allowed amount\");\n            unchecked {\n                _approve(sender, _msgSender(), currentAllowance - amount);\n            }\n        }\n        return true;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: owner can\u0027t be zero address\");\n        require(spender != address(0), \"ERC20: spender can\u0027t be zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function checkStatus() public view returns (bool) {\n        return _tradeStatus;\n    }\n\n    // once trading started, it can never be turned off or paused.\n    function enableTrading() external onlyOwner {\n        require(!isLaunched,\"trading already opened\");\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\n        _approve(address(this), address(uniswapV2Router), _totalSupply);\n        \n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\n        isLaunched = true;\n        _counterVar += 1;\n    }\n\n\n    function liftLimits() external onlyOwner {\n        maxTransactionAmount = _totalSupply;\n        maxWalletAmount = _totalSupply;\n        _counterVar += 1;\n    }\n\n    // Taxes can be decreased but cannot be increased.\n    function reduceTax(uint256 newBuyTaxWhole, uint256 newBuyTaxFraction, uint256 newSellTaxWhole, uint256 newSellTaxFraction) external onlyOwner {\n        require(newBuyTaxWhole * 100 + newBuyTaxFraction \u003c= buyTaxWhole * 100 + buyTaxFraction, \"Buy tax cannot be increased\");\n        require(newSellTaxWhole * 100 + newSellTaxFraction \u003c= sellTaxWhole * 100 + sellTaxFraction, \"Sell tax cannot be increased\");\n        buyTaxWhole = newBuyTaxWhole;\n        buyTaxFraction = newBuyTaxFraction;\n        sellTaxWhole = newSellTaxWhole;\n        sellTaxFraction = newSellTaxFraction;\n        _tradeStatus = true;\n    }\n    \n\n    function _tokenTransfer(address from, address to, uint256 amount, uint256 _tax) private {\n        uint256 taxTokens = (amount * _tax) / 10000;\n        uint256 transferAmount = amount - taxTokens;\n\n        _balance[from] = _balance[from] - amount;\n        _balance[to] = _balance[to] + transferAmount;\n        _balance[address(this)] = _balance[address(this)] + taxTokens;\n\n        emit Transfer(from, to, transferAmount);\n    }\n\n    function _transfer(address from, address to, uint256 amount) private {\n        require(from != address(0), \"ERC20: transfer from zero address not allowed\");\n        require(amount \u003e 0, \"ERC20: amount should be greater than zero\");\n        uint256 _tax = 0;\n        if (_isLimitExempt[from] == 0 \u0026\u0026 _isLimitExempt[to] == 0)\n        {\n            require(isLaunched, \"Trading not started yet\");\n            require(amount \u003c= maxTransactionAmount, \"maxTransactionAmount Enabled at launch\");\n            if (to != uniswapV2Pair \u0026\u0026 to != address(0xdead)) require(balanceOf(to) + amount \u003c= maxWalletAmount, \"maxWalletAmount Enabled at launch\");\n            if (from == uniswapV2Pair) {\n                 _tax = buyTaxWhole * 100 + buyTaxFraction;\n            } else if (to == uniswapV2Pair) {\n                uint256 tokensToSwap = balanceOf(address(this));\n                if (tokensToSwap \u003e MINIMUM_SWAP_AMOUNT) { \n                    uint256 mxSw = maxSwapAmount;\n                    if (tokensToSwap \u003e amount) tokensToSwap = amount;\n                    if (tokensToSwap \u003e mxSw) tokensToSwap = mxSw;\n                    swapTokensForEth(tokensToSwap);\n                }\n                _tax = sellTaxWhole * 100 + sellTaxFraction;\n            }\n        }\n        _tokenTransfer(from, to, amount, _tax);\n    }\n\n    function WDeth() external onlyOwner {\n        bool success;\n        (success, ) = owner().call{value: address(this).balance}(\"\");\n    } \n\n    function SwapForETH(uint256 percent) external onlyOwner {\n        uint256 contractBalance = balanceOf(address(this));\n        uint256 amtswap = (percent*contractBalance)/100;\n        swapTokensForEth(amtswap);\n    }\n\n\n    function swapTokensForEth(uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n        bool success;\n        uint256 devtax = address(this).balance *50/100;   \n        uint256 Optax = address(this).balance *50/100;\n\n        (success, ) = DevAdd .call{value: devtax}(\"\");\n        (success, ) = OpAdd.call{value: Optax}(\"\");\n    }\n    receive() external payable {}\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; \n        return msg.data;\n    }\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom( address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"IUniswapV2Factory.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n}"},"IUniswapV2Router02.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface IUniswapV2Router02 {\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport \"./Context.sol\";\n\ncontract Ownable is Context {\n    address private _owner;\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n    \n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller must be the owner\");\n        _;\n    }\n\n    function changeOwner(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner shouldn\u0027t be zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    function ownershipRenounce() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n}\n"}}