{"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"PaymentProcessor.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"./IERC20.sol\";\n\ncontract PaymentProcessor {\n    // Event to be emitted after a payment is processed\n    event PaymentProcessed(uint256 indexed orderId, bytes32 hash);\n\n    // Mapping to store the hash of amounts and recipients for each Order ID\n    mapping(uint256 =\u003e bytes32) private orderHashes;\n\n    // Address of the PYUSD token\n    address private PYUSD_ADDRESS;\n\n    // Constructor to set the PYUSD token address\n    constructor(address _pyusdAddress) {\n        PYUSD_ADDRESS = _pyusdAddress;\n    }\n\n    // Function to process a payment\n    function processPayment(\n        uint256 orderId,\n        uint256[] memory amounts,\n        address[] memory recipients\n    ) external {\n        require(\n            amounts.length == recipients.length,\n            \"Amounts and recipients length mismatch\"\n        );\n        require(\n            orderHashes[orderId] == bytes32(0),\n            \"Order ID already used\"\n        );\n        bytes32 hash = keccak256(\n            abi.encodePacked(orderId, amounts, recipients)\n        );\n        orderHashes[orderId] = hash;\n        IERC20 pyusd = IERC20(PYUSD_ADDRESS);\n\n        for (uint256 i = 0; i \u003c amounts.length; i++) {\n            // Ensure that the token transfer is successful\n            require(\n                pyusd.transferFrom(msg.sender, recipients[i], amounts[i]),\n                \"Transfer failed\"\n            );\n        }\n\n        emit PaymentProcessed(orderId, hash);\n    }\n\n    // Function to get the hash of amounts and recipients for a given Order ID\n    function getOrderHash(uint256 orderId) external view returns (bytes32) {\n        return orderHashes[orderId];\n    }\n}\n"}}