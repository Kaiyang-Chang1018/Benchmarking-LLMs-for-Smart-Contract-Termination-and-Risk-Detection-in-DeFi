{"Dependencies.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``\u0027s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n\n\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\n\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size \u003e 0;\n    }\n\n    // /**\n    //  * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n    //  * `recipient`, forwarding all available gas and reverting on errors.\n    //  *\n    //  * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n    //  * of certain opcodes, possibly making contracts go over the 2300 gas limit\n    //  * imposed by `transfer`, making them unable to receive funds via\n    //  * `transfer`. {sendValue} removes this limitation.\n    //  *\n    //  * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n    //  *\n    //  * IMPORTANT: because control is transferred to `recipient`, care must be\n    //  * taken to not create reentrancy vulnerabilities. Consider using\n    //  * {ReentrancyGuard} or the\n    //  * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n    //  */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    // /**\n    //  * @dev Performs a Solidity function call using a low level `call`. A\n    //  * plain `call` is an unsafe replacement for a function call: use this\n    //  * function instead.\n    //  *\n    //  * If `target` reverts with a revert reason, it is bubbled up by this\n    //  * function (like regular Solidity function calls).\n    //  *\n    //  * Returns the raw returned data. To convert to the expected return value,\n    //  * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n    //  *\n    //  * Requirements:\n    //  *\n    //  * - `target` must be a contract.\n    //  * - calling `target` with `data` must not revert.\n    //  *\n    //  * _Available since v3.1._\n    //  */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    // /**\n    //  * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n    //  * `errorMessage` as a fallback revert reason when `target` reverts.\n    //  *\n    //  * _Available since v3.1._\n    //  */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    // /**\n    //  * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n    //  * but also transferring `value` wei to `target`.\n    //  *\n    //  * Requirements:\n    //  *\n    //  * - the calling contract must have an ETH balance of at least `value`.\n    //  * - the called Solidity function must be `payable`.\n    //  *\n    //  * _Available since v3.1._\n    //  */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    // *\n    //  * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n    //  * with `errorMessage` as a fallback revert reason when `target` reverts.\n    //  *\n    //  * _Available since v3.1._\n\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    // /**\n    //  * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n    //  * but performing a static call.\n    //  *\n    //  * _Available since v3.3._\n    //  */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    // /**\n    //  * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n    //  * but performing a static call.\n    //  *\n    //  * _Available since v3.3._\n    //  */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    // /**\n    //  * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n    //  * but performing a delegate call.\n    //  *\n    //  * _Available since v3.4._\n    //  */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    // /**\n    //  * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n    //  * but performing a delegate call.\n    //  *\n    //  * _Available since v3.4._\n    //  */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    // /**\n    //  * @dev Tool to verifies that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\n    //  * revert reason using the provided one.\n    //  *\n    //  * _Available since v4.3._\n    //  */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI\u0027s implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    // Don\u0027t need these\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\n\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n\n\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 =\u003e address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address =\u003e uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 =\u003e address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address =\u003e mapping(address =\u003e bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"Nonexistent\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length \u003e 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"Caller is not approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"Nonexistent\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"Caller is not approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"Caller is not approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"Transfer to non implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"Nonexistent\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"Transfer to non implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"Mint to the zero address\");\n        require(!_exists(tokenId), \"Already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"Transfer not own\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver(to).onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"Transfer to non implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``\u0027s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``\u0027s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n\n"},"MoneyMakingOpportunity.sol":{"content":"// SPDX-License-Identifier: MIT\n\n\n/*\n\n /$$      /$$  /$$$$$$  /$$   /$$ /$$$$$$$$ /$$     /$$\n| $$$    /$$$ /$$__  $$| $$$ | $$| $$_____/|  $$   /$$/\n| $$$$  /$$$$| $$  \\ $$| $$$$| $$| $$       \\  $$ /$$/\n| $$ $$/$$ $$| $$  | $$| $$ $$ $$| $$$$$     \\  $$$$/\n| $$  $$$| $$| $$  | $$| $$  $$$$| $$__/      \\  $$/\n| $$\\  $ | $$| $$  | $$| $$\\  $$$| $$          | $$\n| $$ \\/  | $$|  $$$$$$/| $$ \\  $$| $$$$$$$$    | $$\n|__/     |__/ \\______/ |__/  \\__/|________/    |__/\n\n  /$$      /$$  /$$$$$$  /$$   /$$ /$$$$$$ /$$   /$$  /$$$$$$\n | $$$    /$$$ /$$__  $$| $$  /$$/|_  $$_/| $$$ | $$ /$$__  $$\n | $$$$  /$$$$| $$  \\ $$| $$ /$$/   | $$  | $$$$| $$| $$  \\__/\n | $$ $$/$$ $$| $$$$$$$$| $$$$$/    | $$  | $$ $$ $$| $$ /$$$$\n | $$  $$$| $$| $$__  $$| $$  $$    | $$  | $$  $$$$| $$|_  $$\n | $$\\  $ | $$| $$  | $$| $$\\  $$   | $$  | $$\\  $$$| $$  \\ $$\n | $$ \\/  | $$| $$  | $$| $$ \\  $$ /$$$$$$| $$ \\  $$|  $$$$$$/\n |__/     |__/|__/  |__/|__/  \\__/|______/|__/  \\__/ \\______/\n\n  /$$$$$$  /$$$$$$$  /$$$$$$$   /$$$$$$  /$$$$$$$  /$$$$$$$$ /$$   /$$ /$$   /$$ /$$$$$$ /$$$$$$$$ /$$     /$$\n /$$__  $$| $$__  $$| $$__  $$ /$$__  $$| $$__  $$|__  $$__/| $$  | $$| $$$ | $$|_  $$_/|__  $$__/|  $$   /$$/\n| $$  \\ $$| $$  \\ $$| $$  \\ $$| $$  \\ $$| $$  \\ $$   | $$   | $$  | $$| $$$$| $$  | $$     | $$    \\  $$ /$$/\n| $$  | $$| $$$$$$$/| $$$$$$$/| $$  | $$| $$$$$$$/   | $$   | $$  | $$| $$ $$ $$  | $$     | $$     \\  $$$$/\n| $$  | $$| $$____/ | $$____/ | $$  | $$| $$__  $$   | $$   | $$  | $$| $$  $$$$  | $$     | $$      \\  $$/\n| $$  | $$| $$      | $$      | $$  | $$| $$  \\ $$   | $$   | $$  | $$| $$\\  $$$  | $$     | $$       | $$\n|  $$$$$$/| $$      | $$      |  $$$$$$/| $$  | $$   | $$   |  $$$$$$/| $$ \\  $$ /$$$$$$   | $$       | $$\n \\______/ |__/      |__/       \\______/ |__/  |__/   |__/    \\______/ |__/  \\__/|______/   |__/       |__/\n\n\nby steviep.eth\n\n\nMoney Making Opportunity (MMO) is a smart contract-based collaboration game in which an unbound\nnumber of participants send 0.03 ETH to the MMO contract, and must then coordinate to distribute\nthe resulting contract balance. MMO is inspired by the Pirate Game [1], but modified to work within\nthe context of a smart contract with a non specified number of participants.\n\nAt a high level, the game works as follows:\n\n- Participants blindly send 0.03 ETH to moneymakingopportunity.eth, which sends the funds to the\n  MMO contract.\n- The artist starts the game. After this point, sending ETH to moneymakingopportunity.eth does not\n  allow the sender to participate in Money Making Opportunity.\n- Once the game is started, all participants who contributed at least 0.03 ETH before the starting\n  time may claim an MMO NFT.\n- Every week, one token is designated as the \"Leader\".\n- This continues until all tokens have been the Leader.\n- The Leader can propose a \"Settlement Address\" (i.e., an address for which the MMO contract balance\n  can be sent to).\n- The Settlement Address can by an EOA, a smart contract that splits the balance according to custom\n  logic, etc.\n- If at least 50% of eligible participants vote in favor of the active week\u0027s proposal, the balance\n  can be then be sent to that contract.\n- If a proposal is not successfully settle within one week, then that week\u0027s Leader can no longer vote\n  on future proposals.\n- Leadership order is determined by reverse order of token id. For example, if there are 100 tokens,\n  then the owner of token #99 is the Leader for week 1, and the owner of token #0 is the Leader for\n  week 99.\n- MMO tokens may be traded as normal NFTs.\n- Each token may make *one single proposal* for the Settlement Address. This proposal can be made at\n  any time.\n- Tokens can vote on the proposal for any week at any time. These votes can no longer be changed once\n  a proposal has succeeded.\n\n[1] https://en.wikipedia.org/wiki/Pirate_game\n\n\n# ERRORS #\nAll errors were truncated to integers in order to obfuscate functionality during the contribution phase.\n  1: Cannot take this action because contract is locked\n  2: Cannot take this action because contract is unlocked\n  3: This error doesn\u0027t exist because I fucked up\n  4: Only the token owner can call this function\n  5: Cannot vote on weeks that have already passed\n  6: Cannot propose a settlement address because token has already been eliminated\n  7: A settlement address has already been proposed for this token\n  8: Contract has already been settled\n  9: Cannot vote after contract has been settled\n  10: Cannot settle contract because yays \u003c nays\n  11: This action can only be taken by the artist\n  12: Cannot cast votes on tokens assigned to a later week\n\n*/\n\n\n\n\nimport \"./Dependencies.sol\";\n\npragma solidity ^0.8.17;\n\ninterface ITokenURI {\n  function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\n/// @title Money Making Opportunity\n/// @author steviep.eth\n/// @dev All contract errors are reduced to integers in order to obfuscate the pre-verified code\n/// @notice A smart contract-base collaboration game in which participants\n/// must coordinate to split the contract balance\ncontract MoneyMakingOpportunity is ERC721 {\n  /// @notice Participants must send at least 0.03 ether to the contract in order to claim a token\n  uint256 constant public FAIR_CONTRIBUTION = 0.03 ether;\n\n  /// @notice The contribution phase takes place when isLocked == true. The voting/proposal phase\n  /// only becomes active when isLocked == false\n  bool public isLocked = true;\n\n  /// @notice When this is locked, the URI contract can no longer be updated\n  bool public uriLocked;\n\n  /// @notice Total supply of mined tokens\n  uint256 public totalSupply;\n\n  /// @notice Timestamp of the beggining of the voting/proposal phase\n  uint256 public beginning;\n\n  /// @notice Timestamp of the end of the voting/proposal phase\n  uint256 public ending;\n\n  /// @notice Total number of addresses that successfully contributed 0.03 ETH during the contribution phase\n  uint256 public contributors;\n\n  /// @notice Address of the URI contract\n  address public tokenURIContract;\n\n  /// @notice Deployer of contract. Has the sole ability to unlock the contract, update the URI contract\n  /// and lock the URI contract\n  address public artist;\n\n  /// @notice Mapping of addresses to their total contributions\n  mapping(address =\u003e uint256) public amountPaid;\n\n  /// @notice Mapping of addresses to the token ID they may claim\n  mapping(address =\u003e uint256) public addrToTokenId;\n\n  /// @notice Mapping of token IDs to their proposed settlement addresses\n  mapping(uint256 =\u003e address) public settlementAddressProposals;\n\n  /// @notice Mapping of token IDs to their votes\n  mapping(uint256 =\u003e mapping(uint256 =\u003e bool)) private _tokenVotes;\n\n  /// @dev This event emits when the metadata of a token is changed.\n  /// So that the third-party platforms such as NFT market could\n  /// timely update the images and related attributes of the NFT.\n  event MetadataUpdate(uint256 _tokenId);\n\n  /// @dev This event emits when the metadata of a range of tokens is changed.\n  /// So that the third-party platforms such as NFT market could\n  /// timely update the images and related attributes of the NFTs.\n  event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\n\n  /// @dev Sets the artist to the contract deployer\n  constructor() ERC721(\u0027Money Making Opportunity\u0027, \u0027MMO\u0027) {\n    artist = msg.sender;\n    contributors++;\n  }\n\n  /// @notice Handles all ETH sent to the contract. If the contract is locked and the\n  /// cumulative amount of ETH sent to the contract is \u003e= 0.03, then that address is\n  /// assigned a token ID to mint later. If the contract has been settled, the amount\n  /// included in msg.value is forwarded to the final settlement address. Otherwise,\n  /// the ETH is jsut held by the MMO contract.\n  receive() external payable {\n    uint256 originalAmount = amountPaid[msg.sender];\n    amountPaid[msg.sender] += msg.value;\n\n    if (\n      isLocked\n      \u0026\u0026 originalAmount \u003c FAIR_CONTRIBUTION\n      \u0026\u0026 amountPaid[msg.sender] \u003e= FAIR_CONTRIBUTION\n    ) {\n      addrToTokenId[msg.sender] = contributors;\n      contributors++;\n\n    } else if (ending \u003e 0) {\n      payable(settlementAddressProposals[currentWeek()]).transfer(address(this).balance);\n    }\n  }\n\n  /// @notice Unlocks the contract and sends token 0 to the caller\n  /// @param _uriContract Address of the URI contract\n  /// @dev Can only be called by the artist\n  function unlock(address _uriContract) external {\n    require(msg.sender == artist, \u002711\u0027);\n    require(isLocked, \u00271\u0027);\n    isLocked = false;\n    beginning = block.timestamp;\n    tokenURIContract = _uriContract;\n    totalSupply++;\n    _mint(msg.sender, 0);\n  }\n\n  /// @notice Mints the appropriate token to the caller if the contract is unlocked\n  function claim() external {\n    require(!isLocked, \u00272\u0027);\n\n    totalSupply++;\n    _mint(msg.sender, addrToTokenId[msg.sender]);\n  }\n\n  /// @notice Casts a vote for a given week and token ID\n  /// @param tokenId Token ID for vote\n  /// @param week Week # for vote\n  /// @param vote Vote value\n  /// @dev Votes can be made at any time, but cannot be changed once a proposal has been accepted or rejected\n  /// @dev Tokens cannot be used to vote for proposals issued by lower token IDs (or higher week #s)\n  function castVote(uint256 tokenId, uint256 week, bool vote) external {\n    require(ownerOf(tokenId) == msg.sender, \u00274\u0027);\n    require(week \u003e= currentWeek(), \u00275\u0027);\n    require(ending == 0, \u00279\u0027);\n    require(tokenIdToWeek(tokenId) \u003e week, \u002712\u0027);\n\n    _tokenVotes[tokenId][week] = vote;\n  }\n\n  /// @notice Proposes a settlement address for a given week\n  /// @param week Week # of proposal\n  /// @param settlementAddress The proposed settlement address for the provided week\n  /// @dev Proposals can only be made for future weeks\n  /// @dev Proposals can only be made by the corresponding token owner for that week\n  /// @dev Proposals can be made at any time, but once they are made the token can no\n  /// longer propose settlement addresses\n  function proposeSettlementAddress(uint256 week, address settlementAddress) external {\n    uint256 tokenId = weekToTokenId(week);\n    require(!isEliminated(tokenId), \u00276\u0027);\n    require(ownerOf(tokenId) == msg.sender, \u00274\u0027);\n    require(settlementAddressProposals[week] == address(0), \u00277\u0027);\n    settlementAddressProposals[week] = settlementAddress;\n    emit MetadataUpdate(tokenId);\n  }\n\n\n  /// @notice Sends the balance of the contract to the week\u0027s proposed settlement address\n  /// if it has garnered at least 50% of all remaining valid votes.\n  /// @dev This can be called by anyone\n  /// @dev This must be called while the week is still active\n  function settlePayment() external {\n    require(ending == 0, \u00278\u0027);\n    uint256 week = currentWeek();\n    if (week == contributors) require(ownerOf(0) == msg.sender);\n\n    (uint256 yays, uint256 nays) = calculateVotes(week);\n\n    require(yays \u003e= nays, \u002710\u0027);\n\n    ending = block.timestamp;\n    payable(settlementAddressProposals[week]).transfer(address(this).balance);\n    emit BatchMetadataUpdate(0, contributors);\n  }\n\n  /// @notice Calculates all yay/nay votes for a given week\n  /// @dev Only leaders for future weeks are valid. (ex. The leader of week 10 cannot vote on week 9)\n  /// @param week Week # to calculate\n  /// @return yayVotes Number of yays received for that week. The week\u0027s leader automatically\n  /// votes yay for that week\n  /// @return nayVotes Number of nay votes received for that week. All votes are nay by default\n  function calculateVotes(uint256 week) public view returns (uint256, uint256) {\n    uint256 yays = 1;\n    uint256 nays;\n    uint256 tokenId = weekToTokenId(week);\n\n    for (uint256 i = 0; i \u003c tokenId; i++) {\n      if (_tokenVotes[i][week]) yays++;\n      else nays++;\n    }\n\n    return (yays, nays);\n  }\n\n  /// @notice Maps a token ID to its leadership week\n  /// @param tokenId Token ID to query\n  /// @return week Leadership week of token id\n  function tokenIdToWeek(uint256 tokenId) public view returns (uint256) {\n    return contributors - tokenId;\n  }\n\n  /// @notice Finds the leader token of a given week\n  /// @param week Week # to query\n  /// @return tokenId Leader of queried week\n  /// @dev Weeks start at 1, but will return 0 if the contract is locked\n  function weekToTokenId(uint256 week) public view returns (uint256) {\n    if (isLocked) return 0;\n    return contributors - week;\n  }\n\n  /// @notice Returns the current Active Week number\n  /// @return week Active week number\n  /// @dev This will return 0 if locked\n  /// @dev This will return the last valid week if the contract has been settled\n  /// @dev if the contract is never settled, it will default to the highest possible\n  /// week number\n  function currentWeek() public view returns (uint256) {\n    if (isLocked) return 0;\n    uint256 endTime = ending \u003e 0 ? ending : block.timestamp;\n    uint256 week = 1 + (endTime - beginning) / 1 weeks;\n\n    return week \u003e= contributors ? contributors : week;\n  }\n\n  /// @notice Returns the token ID of the leader for the current week\n  /// @return tokenId Token ID of leader for current week\n  function leaderToken() public view returns (uint256) {\n    return weekToTokenId(currentWeek());\n  }\n\n  /// @notice Denotes whether the current leader token can vote on proposals\n  /// made by the provided token ID\n  /// @param tokenId Token ID\n  /// @return canVote\n  function isEliminated (uint256 tokenId) public view returns (bool) {\n    return tokenId \u003e leaderToken();\n  }\n\n  /// @notice Returns the current vote state of a token ID/week\n  /// @param tokenId Token ID\n  /// @param week Week\n  /// @return voteState\n  /// @dev This will always return true for the week in which the given token\n  /// is the leader\n  function votes(uint256 tokenId, uint256 week) public view returns (bool) {\n    if (tokenIdToWeek(tokenId) == week) return true;\n    return _tokenVotes[tokenId][week];\n  }\n\n  /// @notice Token URI\n  /// @param tokenId Token ID to look up URI of\n  /// @return Token URI\n  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n    return ITokenURI(tokenURIContract).tokenURI(tokenId);\n  }\n\n  /// @notice Checks if given token ID exists\n  /// @param tokenId Token to run existence check on\n  /// @return True if token exists\n  function exists(uint256 tokenId) external view returns (bool) {\n    return _exists(tokenId);\n  }\n\n  /// @notice Set the Token URI contract\n  /// @param _uriContract New address of URI contract\n  /// @dev This can only be set by the artists, and cannot be reset after\n  /// the URI is locked\n  function setURIContract(address _uriContract) external {\n    require(msg.sender == artist \u0026\u0026 !uriLocked, \u002711\u0027);\n    tokenURIContract = _uriContract;\n    emit BatchMetadataUpdate(0, contributors);\n  }\n\n  /// @notice Locks the URI contract\n  function commitURI() external {\n    require(msg.sender == artist, \u002711\u0027);\n    require(!isLocked, \u002713\u0027);\n    uriLocked = true;\n  }\n\n  /// @notice Query if a contract implements an interface\n  /// @param interfaceId The interface identifier, as specified in ERC-165\n  /// @return `true` if the contract implements `interfaceId` and\n  ///         `interfaceId` is not 0xffffffff, `false` otherwise\n  /// @dev Interface identification is specified in ERC-165. This function\n  ///      uses less than 30,000 gas. See: https://eips.ethereum.org/EIPS/eip-165\n  ///      See EIP-4906: https://eips.ethereum.org/EIPS/eip-4906\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721) returns (bool) {\n    return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\n  }\n}\n"}}