{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.17;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.17;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.17;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}"},"TEXANMOVER.sol":{"content":"/// SPDX-License-Identifier: UNLICENCSED\n/// @title Airdrop Token Mover\n/// @author Aidrop Mover Team\n/// @notice This contract is proprietary and may not be copied or used without permission.\n\npragma solidity ^0.8.17;\n\n// import \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./IERC20.sol\";\nimport \"./Ownable.sol\";\n\ncontract TEXANMOVER is Ownable {\n    IERC20 _token;\n\n\n    uint tokensTransferredIn = 0;\n    string otherthings = \"\";\n    uint public lastBatch = 0; \n\n    uint _errorCount = 0;\n    uint _successCount = 0;\n    \n    address _zeroAddress = 0x0000000000000000000000000000000000000000;\n    address tokenAddress = _zeroAddress;  //initialize with this\n\n    struct Airdropitem { \n        uint batch;\n        address user_address;\n        string message;\n        uint processed;\n    }\n\n    Airdropitem[] _airdropitems;\n    \n    // @notice This contract has the utilities necessary for the Staking Endowment Token below\n    event BulkTransfer(\n        uint batch,\n        address indexed from,  // Address\n        address indexed to,\n        uint256 indexed amount\n    );\n\n    event BatchStatus ( \n        uint batch,\n        uint totalInBatch,\n        uint successCount,\n        uint errorCount\n    );\n\n\n    // token = MyToken\u0027s contract address\n    constructor(address token) {\n        tokenAddress = token;\n        _token = IERC20(token);\n    }\n\n    // Modifier to check token allowance\n    modifier checkAllowance(uint amount) {\n        require(_token.allowance(msg.sender, address(this)) \u003e= amount, \"Error24\");\n        _;\n    }\n    \n    function setToken(address token) external onlyOwner {\n        tokenAddress = token;\n        _token = IERC20(token);\n    }\n    \n    function showToken() external view returns(address myTokenAddress){\n        return (tokenAddress);\n    }\n    \n    function showToken2() external view returns(address myTokenAddress){\n        return (address(_token));\n    }\n\n\n    function airdrop(address holder, uint256 amount) public onlyOwner {\n        uint batch = 0;\n        Airdropitem memory myTok;\n        \n            try _token.transfer(holder, amount) {\n                // if successful, this will ring true and continue\n                _successCount = _successCount + 1;\n\n            } catch Error(string memory reason) {\n                // This is executed in case\n                // revert was called inside getData\n                // and a reason string was provided.\n                 myTok = Airdropitem(batch, holder, reason, 0);\n                 _airdropitems.push(myTok);\n\n                _errorCount++;\n                \n            } catch (bytes memory mylowlevelreason) {\n                // This is executed in case revert() was used\n                // or there was a failing assertion, division\n                // by zero, etc. inside getData.\n                 myTok = Airdropitem(batch, holder, string(mylowlevelreason), 0);\n                 _airdropitems.push(myTok);\n\n                _errorCount++;\n                \n            }\n    }\n\n\n    function airdropMany(uint batch, address[] memory holders, uint[] memory holderamounts) public onlyOwner {\n        require(holders.length == holderamounts.length, \"Holders and HolderAmounts must have the same number of entries.\");\n        require(address(_token) != _zeroAddress,\"Stop! Do not airdrop to zero address\");\n\n        Airdropitem memory myTok;\n        \n        uint total_in_batch = holders.length;\n        uint local_success = 0;\n        uint local_error = 0;\n\n        for (uint i=0; i\u003cholders.length; i++) {\n            \n            try _token.transfer(holders[i], uint(holderamounts[i])) {\n                // if successful, this will ring true and continue\n                _successCount = _successCount + 1;\n                local_success++;\n\n                emit BulkTransfer(batch, address(_token), holders[i], holderamounts[i]);\n\n            } catch Error(string memory reason) {\n                // This is executed in case\n                // revert was called inside getData\n                // and a reason string was provided.\n                 myTok = Airdropitem(batch, holders[i], reason, holderamounts[i]);\n                 _airdropitems.push(myTok);\n                local_error++;\n                _errorCount++;\n                \n            } catch (bytes memory mylowlevelreason) {\n                // This is executed in case revert() was used\n                // or there was a failing assertion, division\n                // by zero, etc. inside getData.\n                 myTok = Airdropitem(batch, holders[i], string(mylowlevelreason), holderamounts[i]);\n                 _airdropitems.push(myTok);\n\n                _errorCount++;\n                local_error++;\n                \n            }\n            // Set the last batch to the current one\n\n\n            // emit Transfer(address(this), holders[i], amount);\n        }\n        \n        lastBatch = batch;\n        emit BatchStatus(batch, total_in_batch, local_success, local_error);\n\n    }\n\n\n    // Allow you to show how many tokens does this smart contract own\n    function getSmartContractBalance() external view returns(uint) {\n        return _token.balanceOf(payable(address(this)));\n    }\n    \n    // --------------\n    function differenceTest(uint valA, uint valB) public pure returns(uint mydifference){\n        // Gets the difference either way\n        if(valA \u003e valB){\n            mydifference = valA - valB;\n        } else if (valB \u003e valA) {\n            mydifference = valA - valB;\n        } else {\n            // If neither are larger, then return zero\n            mydifference = 0;\n        }\n        return (mydifference);\n    }\n    // --------------\n    function addTest(uint valA, uint valB) public pure returns(uint myAnswer){\n        // Gets the difference either way\n        myAnswer = valA + valB;\n        return (myAnswer);\n    }\n\n    \n\nfunction fund() public payable returns(bool success) {\n    // Do not use this...ever\n}\n\nfunction showStatistics() external view returns(uint successCount, uint errorCount ){\n\n        return (_successCount,_errorCount);\n}\n\n\nfunction countAirdropitems()\n    external\n    view\n    returns (\n        uint256\n    )\n    {\n        return _airdropitems.length;\n    }\n\nfunction unsetMainContract() external onlyOwner {\n    _successCount = 0;\n    _errorCount = 0;\n    tokenAddress = _zeroAddress;\n    delete _token;\n}\n\nfunction getAirdropitems() external view onlyOwner returns( Airdropitem[] memory){\n    return (_airdropitems);\n}\n\nfunction popAirdropitems(uint airdropitemIndex) public onlyOwner(){\n        // Airdropitem[] _airdropitems;\n        // Remove the Stake from your stake list\n        require(_airdropitems.length \u003e 0,\"Nothing to do, array is empty\");\n        require(airdropitemIndex \u003c= _airdropitems.length, \"That index is too large.\");\n\n        uint256 lastIndex = _airdropitems.length - 1;\n        // If it\u0027s the last element, then skip\n        if (airdropitemIndex != lastIndex) {\n            _airdropitems[airdropitemIndex] = _airdropitems[lastIndex];\n        }\n        _airdropitems.pop();\n    }\n\n\n}\n"}}