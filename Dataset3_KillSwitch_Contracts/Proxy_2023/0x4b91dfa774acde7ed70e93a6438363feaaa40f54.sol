{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.25;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size \u003e 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length \u003e 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.25;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.25;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.25;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"},"Ownable2Step.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (access/Ownable2Step.sol)\n\npragma solidity 0.8.25;\n\nimport {Ownable} from \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This extension of the {Ownable} contract includes a two-step mechanism to transfer\n * ownership, where the new owner must call {acceptOwnership} in order to replace the\n * old one. This can help prevent common mistakes, such as transfers of ownership to\n * incorrect accounts, or to contracts that are unable to interact with the\n * permission system.\n *\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     *\n     * Setting `newOwner` to the zero address is allowed; this can be used to cancel an initiated ownership transfer.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        if (pendingOwner() != sender) {\n            require(sender == owner(), \"Ownable: unauthorized account\");\n        }\n        _transferOwnership(sender);\n    }\n}\n"},"SPE.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.25;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./Ownable2Step.sol\";\r\nimport \"./Address.sol\";\r\nimport \"./Context.sol\";\r\n\r\n// IWETH interface to interact with the WETH contract\r\ninterface IWETH {\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract SavePlanetEarth is Context, IERC20, Ownable2Step {\r\n    using Address for address;\r\n\r\n    mapping (address =\u003e uint256) private _tOwned;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n\r\n    mapping (address =\u003e bool) private _isExcludedFromFee;\r\n    \r\n    mapping (address =\u003e bool) public _isPair;\r\n    mapping (address =\u003e bool) public _isBanned;\r\n \r\n    uint256 private constant _tTotal = 1e9 * 10**9;\r\n\r\n    string private constant _name = \"SavePlanetEarth\";\r\n    string private constant _symbol = \"SPE\";\r\n    uint8 private constant _decimals = 9;\r\n\r\n    address public _stakingRewardsWalletAddress;\r\n    address public _liqWalletAddress;\r\n\r\n    uint256 public _buyStakingRewardsFee = 10;\r\n    uint256 public _buyLiquidityFee = 10;\r\n\r\n    uint256 public _sellStakingRewardsFee = 10;\r\n    uint256 public _sellLiquidityFee = 10;\r\n\r\n    uint256 private _stakingRewardsFee;\r\n    uint256 private _liquidityFee;\r\n\r\n    uint256 private _slippageTolerance = 0;\r\n\r\n    bool public _contractFeesEnabled = true;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    \r\n    bool private _inSwapAndLiquify;\r\n    bool public _swapAndLiquifyEnabled = true;\r\n    bool public _swapEnabled = true;\r\n    \r\n    uint256 public _maxTxAmount = _tTotal;\r\n    uint256 public _numTokensSellToAddToLiquidity = 1e5 * 10**9;\r\n    \r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity);\r\n    event NumTokensSellToAddToLiquidityUpdated(uint256 numTokensSellToAddToLiquidity);\r\n    event SetContractFeesEnabled(bool _bool);\r\n    event RouterSet(address _router);\r\n    event SetIsPair(address _address, bool _bool);\r\n    event SetIsBanned(address _address, bool _bool);\r\n    event SetSwapEnabled(bool enabled);\r\n    event SetStakingRewardsWalletAddress(address _address);\r\n    event SetLiqWalletAddress(address _address);\r\n    event WithdrawalEther(uint256 _amount, address to);\r\n    event WithdrawalToken(address _tokenAddr, uint256 _amount, address to);\r\n    event ExcludeFromFee(address account);\r\n    event IncludeInFee(address account);\r\n    event SetBuyStakingRewardsFee(uint256 fee);\r\n    event SetBuyLiquidityFee(uint256 fee);\r\n    event SetSellStakingRewardsFee(uint256 fee);\r\n    event SetSellLiquidityFee(uint256 fee);\r\n    event SetMaxTxAmount(uint256 maxTxAmount);\r\n    event FeesRemoved();\r\n\r\n    // Custom Errors\r\n    error ZeroAddressError();\r\n    error TransferAmountExceedsMaxTx();\r\n    error TransferDisabled();\r\n    error AddressBanned();\r\n    \r\n    modifier _lockTheSwap {\r\n        _inSwapAndLiquify = true;\r\n        _;\r\n        _inSwapAndLiquify = false;\r\n    }\r\n    \r\n    constructor(address router, address stakingRewardsWallet, address liqWallet) {\r\n        require(stakingRewardsWallet != address(0), \"Error: stakingRewardsWallet address cannot be zero address\");\r\n        require(liqWallet != address(0), \"Error: liqWallet address cannot be zero address\");\r\n        _tOwned[owner()] = _tTotal;\r\n        \r\n        _setRouter(router);\r\n        _stakingRewardsWalletAddress = stakingRewardsWallet;\r\n        _liqWalletAddress = liqWallet;\r\n        \r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[stakingRewardsWallet] = true;\r\n        _isExcludedFromFee[liqWallet] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        \r\n        emit Transfer(address(0), owner(), _tTotal);\r\n    }\r\n\r\n    function name() external pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function setSlippageTolerance(uint256 newTolerance) external onlyOwner {\r\n        require(newTolerance \u003c= 5000, \"Slippage too high\");\r\n        _slippageTolerance = newTolerance;\r\n    }\r\n\r\n    function getSlippageTolerance() external view returns (uint256) {\r\n    return _slippageTolerance;\r\n}\r\n\r\n    function excludeFromFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n        emit ExcludeFromFee(account);\r\n    }\r\n    \r\n    function includeInFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n        emit IncludeInFee(account);\r\n    }\r\n    \r\n    function setBuyStakingRewardsFeePercent(uint256 stakingRewardsFee) external onlyOwner() {\r\n        _buyStakingRewardsFee = stakingRewardsFee;\r\n        require(_buyStakingRewardsFee + _buyLiquidityFee \u003c= 100, \"Total fees exceed 10%\");\r\n        emit SetBuyStakingRewardsFee(stakingRewardsFee);\r\n    }\r\n    \r\n    function setBuyLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {\r\n        _buyLiquidityFee = liquidityFee;\r\n        require(_buyStakingRewardsFee + _buyLiquidityFee \u003c= 100, \"Total fees exceed 10%\");\r\n        emit SetBuyLiquidityFee(liquidityFee);\r\n    }\r\n\r\n    function setSellStakingRewardsFeePercent(uint256 stakingRewardsFee) external onlyOwner() {\r\n        _sellStakingRewardsFee = stakingRewardsFee;\r\n        require(_sellStakingRewardsFee + _sellLiquidityFee \u003c= 100, \"Total fees exceed 10%\");\r\n        emit SetSellStakingRewardsFee(stakingRewardsFee);\r\n    }\r\n    \r\n    function setSellLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {\r\n        _sellLiquidityFee = liquidityFee;\r\n        require(_sellStakingRewardsFee + _sellLiquidityFee \u003c= 100, \"Total fees exceed 10%\");\r\n        emit SetSellLiquidityFee(liquidityFee);\r\n    }\r\n   \r\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\r\n        _maxTxAmount = _tTotal * maxTxPercent / 100;\r\n        emit SetMaxTxAmount(_maxTxAmount);\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) external onlyOwner() {\r\n        _swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n    \r\n    function setSwapEnabled(bool _enabled) external onlyOwner() {\r\n        _swapEnabled = _enabled;\r\n        emit SetSwapEnabled(_enabled);\r\n    }\r\n    \r\n    function setStakingRewardsWalletAddress(address _address) external onlyOwner() {\r\n        require(_address != address(0), \"Staking addr zero\");\r\n        _stakingRewardsWalletAddress = _address;\r\n        emit SetStakingRewardsWalletAddress(_address);\r\n    }\r\n\r\n    function setLiqWalletAddress(address _address) external onlyOwner() {\r\n        require(_address != address(0), \"Liq addr zero\");\r\n        _liqWalletAddress = _address;\r\n        emit SetLiqWalletAddress(_address);\r\n    }\r\n    \r\n    function setNumTokensSellToAddToLiquidity(uint256 _amount) external onlyOwner() {\r\n        require(_amount != 0, \"Amount must be greater than zero\");\r\n        _numTokensSellToAddToLiquidity = _amount;\r\n        emit NumTokensSellToAddToLiquidityUpdated(_amount);\r\n    }\r\n\r\n    function setContractFeesEnabled(bool _bool) external onlyOwner() {\r\n        _contractFeesEnabled = _bool;\r\n        emit SetContractFeesEnabled(_bool);\r\n    }\r\n    \r\n    function _setRouter(address _router) private {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(_router);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).getPair(address(this), _uniswapV2Router.WETH());\r\n        if(uniswapV2Pair == address(0))\r\n            uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router = _uniswapV2Router;\r\n        setIsPair(uniswapV2Pair, true);\r\n        emit RouterSet(_router);\r\n    }\r\n    \r\n    function setRouter(address _router) external onlyOwner() {\r\n        _setRouter(_router);\r\n    }\r\n    \r\n    receive() external payable {}\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"Approve from zero addr\");\r\n        require(spender != address(0), \"Approve to zero addr\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    function _transfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n) private {\r\n    if (from == address(0)) revert ZeroAddressError();\r\n    if (to == address(0)) revert ZeroAddressError();\r\n    if (amount == 0) revert TransferAmountExceedsMaxTx();\r\n\r\n    if (from != owner() \u0026\u0026 to != owner() \u0026\u0026 amount \u003e _maxTxAmount) {\r\n        revert TransferAmountExceedsMaxTx();\r\n    }\r\n\r\n    if (!_swapEnabled \u0026\u0026 (_isPair[to] || _isPair[from])) {\r\n        revert TransferDisabled();\r\n    }\r\n\r\n    if (_isBanned[from] || _isBanned[to]) {\r\n        revert AddressBanned();\r\n    }\r\n\r\n    uint256 contractTokenBalance = balanceOf(address(this));\r\n    \r\n    if (contractTokenBalance \u003e= _maxTxAmount) {\r\n        contractTokenBalance = _maxTxAmount;\r\n    }\r\n    \r\n    bool overMinTokenBalance = contractTokenBalance \u003e= _numTokensSellToAddToLiquidity;\r\n    if (\r\n        overMinTokenBalance \u0026\u0026\r\n        !_inSwapAndLiquify \u0026\u0026\r\n        _isPair[to] \u0026\u0026\r\n        _swapAndLiquifyEnabled \u0026\u0026\r\n        !_isExcludedFromFee[from]\r\n    ) {\r\n        contractTokenBalance = _numTokensSellToAddToLiquidity;\r\n        _swapAndLiquify(contractTokenBalance);\r\n    }\r\n    \r\n    bool takeFee = true;\r\n\r\n    if (!_isPair[from] \u0026\u0026 !_isPair[to]) {\r\n        takeFee = false;\r\n    }\r\n\r\n    if (!_contractFeesEnabled) {\r\n        takeFee = false;\r\n    }\r\n\r\n    if (_contractFeesEnabled \u0026\u0026 (from.isContract() || to.isContract())) {\r\n        takeFee = true;\r\n    }\r\n\r\n    if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n        takeFee = false;\r\n    }\r\n\r\n    if (_isPair[from] || from.isContract()) {\r\n        _stakingRewardsFee = _buyStakingRewardsFee;\r\n        _liquidityFee = _buyLiquidityFee;\r\n    }\r\n    \r\n    if (_isPair[to] || to.isContract()) {\r\n        _stakingRewardsFee = _sellStakingRewardsFee;\r\n        _liquidityFee = _sellLiquidityFee;            \r\n    }\r\n    \r\n    _tokenTransfer(from, to, amount, takeFee);\r\n}\r\n\r\n    function batchTransfer(address[] calldata recipients, uint256[] calldata amounts) external {\r\n        require(recipients.length == amounts.length, \"Len mismatch\");\r\n        for (uint256 i = 0; i \u003c recipients.length; ++i) { // Change i++ to ++i\r\n            _transfer(_msgSender(), recipients[i], amounts[i]);\r\n        }\r\n}\r\n\r\n\r\n    function _swapAndLiquify(uint256 contractTokenBalance) private _lockTheSwap {\r\n        uint256 half = contractTokenBalance \u003e\u003e 1;\r\n        uint256 otherHalf = contractTokenBalance - half;\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        _swapTokensForEth(half);\r\n\r\n        uint256 newBalance = address(this).balance - initialBalance;\r\n\r\n        _addLiquidity(otherHalf, newBalance);\r\n        \r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function _swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this); // Token (SPE)\r\n        path[1] = uniswapV2Router.WETH(); // WETH\r\n\r\n    // Calculate minimum ETH output based on the adjustable slippage tolerance\r\n        uint256[] memory amountsOut = uniswapV2Router.getAmountsOut(tokenAmount, path);\r\n        uint256 amountOutMin = (amountsOut[1] * (10000 - _slippageTolerance)) / 10000;\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n    // Perform the swap with the calculated amountOutMin\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        tokenAmount,\r\n        amountOutMin,\r\n        path,\r\n        address(this),\r\n        block.timestamp\r\n    );\r\n\r\n    // Unwrap WETH to ETH if any WETH was received\r\n    uint256 wethBalance = IERC20(uniswapV2Router.WETH()).balanceOf(address(this));\r\n    if (wethBalance \u003e 0) {\r\n        IWETH(uniswapV2Router.WETH()).withdraw(wethBalance);\r\n    }\r\n}\r\n\r\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n    // Calculate minimum amounts for tokens and ETH with slippage tolerance\r\n    uint256 tokenAmountMin = (tokenAmount * (10000 - _slippageTolerance)) / 10000;\r\n    uint256 ethAmountMin = (ethAmount * (10000 - _slippageTolerance)) / 10000;\r\n\r\n    uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n        address(this),\r\n        tokenAmount,\r\n        tokenAmountMin, // Minimum token amount with slippage applied\r\n        ethAmountMin,   // Minimum ETH amount with slippage applied\r\n        _liqWalletAddress,\r\n        block.timestamp\r\n    );\r\n    emit Transfer(address(this), uniswapV2Pair, tokenAmount);\r\n}\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n        if(!takeFee)\r\n            _removeAllFee();\r\n        \r\n        _transferStandard(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n    require(_tOwned[sender] \u003e= tAmount, \"Insufficient balance\");\r\n\r\n    uint256 tStakingRewards = _calculateStakingRewardsFee(tAmount);\r\n    uint256 tLiquidity = _calculateLiquidityFee(tAmount);\r\n    require(tStakingRewards + tLiquidity \u003c= tAmount, \"Invalid fee calculation\");\r\n\r\n    uint256 tTransferAmount = tAmount - tStakingRewards - tLiquidity;\r\n\r\n    _tOwned[sender] = _tOwned[sender] - tAmount;\r\n    _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\r\n\r\n    if (tLiquidity \u003e 0) {\r\n        _takeLiquidity(tLiquidity);\r\n    }\r\n\r\n    if (tStakingRewards \u003e 0) {\r\n        _takeStakingRewards(tStakingRewards);\r\n    }\r\n\r\n    emit Transfer(sender, recipient, tTransferAmount);\r\n}\r\n\r\n\r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n        if (tLiquidity != 0) {\r\n            _tOwned[address(this)] = _tOwned[address(this)] + tLiquidity;\r\n            emit Transfer(msg.sender, address(this), tLiquidity);\r\n}\r\n\r\n    }\r\n    \r\n    function _takeStakingRewards(uint256 tStakingRewards) private {\r\n        if (tStakingRewards != 0) {\r\n            _tOwned[_stakingRewardsWalletAddress] = _tOwned[_stakingRewardsWalletAddress] + tStakingRewards;\r\n            emit Transfer(msg.sender, _stakingRewardsWalletAddress, tStakingRewards);\r\n}\r\n\r\n    }\r\n    \r\n    function _calculateStakingRewardsFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount * _stakingRewardsFee / 1000;\r\n    }\r\n\r\n    function _calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount * _liquidityFee / 1000;\r\n    }\r\n    \r\n    function _removeAllFee() private {\r\n        _stakingRewardsFee = 0;\r\n        _liquidityFee = 0;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) external view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function setIsPair(address _address, bool value) public onlyOwner() {\r\n        require(_address != address(0), \"Error: Pair address cannot be zero address\");\r\n        _isPair[_address] = value;\r\n        emit SetIsPair(_address, value);\r\n    }\r\n\r\n    function setIsBanned(address _address, bool value) external onlyOwner() {\r\n        require(_address != address(0), \"Error: Address cannot be zero address\");\r\n        _isBanned[_address] = value;\r\n        emit SetIsBanned(_address, value);\r\n    }\r\n\r\n    function withdrawalToken(address _tokenAddr, uint _amount, address to) external onlyOwner() {\r\n        require(to != address(0), \"Error: withdrawal to zero address\");\r\n        IERC20 token = IERC20(_tokenAddr);\r\n        token.transfer(to, _amount);\r\n        emit WithdrawalToken(_tokenAddr, _amount, to);\r\n    }\r\n    \r\n    function withdrawalEther(uint _amount, address to) external onlyOwner() {\r\n        require(address(this).balance \u003e= _amount, \"Insufficient contract balance\");\r\n        require(to != address(0), \"Recipient address cannot be the zero address\");\r\n        (bool success, ) = to.call{value: _amount}(\"\");\r\n        require(success, \"Ether withdrawal failed\");\r\n        emit WithdrawalEther(_amount, to);\r\n    }\r\n\r\n \r\n}\r\n"}}